
c:/Users/USER/Desktop/lab13/target/3.0.0/argon/lab13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004064  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8080  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e504  000d8084  0001e504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000284  2003e56c  2003e56c  0002e56c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d80ec  000d80ec  000280ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8114  000d8114  00028114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001eb7e1  00000000  00000000  00028118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001cfa4  00000000  00000000  002138f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00043371  00000000  00000000  0023089d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003408  00000000  00000000  00273c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a558  00000000  00000000  00277016  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040f24  00000000  00000000  0028156e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004d5d0  00000000  00000000  002c2492  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001303b4  00000000  00000000  0030fa62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000978c  00000000  00000000  0043fe18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f8a5 	bl	d717c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f8ad 	bl	d7198 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e504 	.word	0x2003e504
   d4048:	000d8084 	.word	0x000d8084
   d404c:	2003e56c 	.word	0x2003e56c
   d4050:	2003e56c 	.word	0x2003e56c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f891 	bl	d6184 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d805c 	.word	0x000d805c
   d407c:	000d8080 	.word	0x000d8080

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b842 	b.w	d4108 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f893 	bl	d41b0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b83b 	b.w	d6108 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bd13 	b.w	d5abc <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bd11 	b.w	d5abc <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bd17 	b.w	d5acc <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fc64 	bl	d5974 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d5665 	.word	0x000d5665

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_Z3isrv>:
volatile bool interruptOccured = false;
OledWingAdafruit display;
int counter = 0;

void isr() {
  interruptOccured = !interruptOccured;
   d40c4:	4a02      	ldr	r2, [pc, #8]	; (d40d0 <_Z3isrv+0xc>)
   d40c6:	7813      	ldrb	r3, [r2, #0]
   d40c8:	f083 0301 	eor.w	r3, r3, #1
   d40cc:	7013      	strb	r3, [r2, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e640 	.word	0x2003e640

000d40d4 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40d4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d6:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d8:	4b0a      	ldr	r3, [pc, #40]	; (d4104 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d40da:	6003      	str	r3, [r0, #0]
   d40dc:	4605      	mov	r5, r0
   d40de:	b17c      	cbz	r4, d4100 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40e0:	6863      	ldr	r3, [r4, #4]
   d40e2:	3b01      	subs	r3, #1
   d40e4:	6063      	str	r3, [r4, #4]
   d40e6:	b95b      	cbnz	r3, d4100 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d40e8:	6823      	ldr	r3, [r4, #0]
   d40ea:	4620      	mov	r0, r4
   d40ec:	689b      	ldr	r3, [r3, #8]
   d40ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40f0:	68a3      	ldr	r3, [r4, #8]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	60a3      	str	r3, [r4, #8]
   d40f6:	b91b      	cbnz	r3, d4100 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	68db      	ldr	r3, [r3, #12]
   d40fe:	4798      	blx	r3
   d4100:	4628      	mov	r0, r5
   d4102:	bd38      	pop	{r3, r4, r5, pc}
   d4104:	000d7ea8 	.word	0x000d7ea8

000d4108 <setup>:


void setup() {
   d4108:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Serial.begin(9600);
  
  display.setup();
   d410a:	4c19      	ldr	r4, [pc, #100]	; (d4170 <setup+0x68>)
  Serial.begin(9600);
   d410c:	f002 f956 	bl	d63bc <_Z16_fetch_usbserialv>
   d4110:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4114:	f002 f946 	bl	d63a4 <_ZN9USBSerial5beginEl>
  display.setup();
   d4118:	4620      	mov	r0, r4
   d411a:	f000 fd39 	bl	d4b90 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d411e:	4620      	mov	r0, r4
   d4120:	f000 ff42 	bl	d4fa8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4124:	4620      	mov	r0, r4
   d4126:	2101      	movs	r1, #1
   d4128:	f000 fce3 	bl	d4af2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d412c:	2500      	movs	r5, #0
   d412e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Trail");
   d4132:	4910      	ldr	r1, [pc, #64]	; (d4174 <setup+0x6c>)
   d4134:	4620      	mov	r0, r4
   d4136:	e9c4 5304 	strd	r5, r3, [r4, #16]
   d413a:	f001 ff3a 	bl	d5fb2 <_ZN5Print7printlnEPKc>
  display.display();
   d413e:	4620      	mov	r0, r4
   d4140:	f001 f99e 	bl	d5480 <_ZN16Adafruit_SSD13067displayEv>

  attachInterrupt(D7, isr, FALLING); 
   d4144:	f04f 33ff 	mov.w	r3, #4294967295
   d4148:	2202      	movs	r2, #2
   d414a:	490b      	ldr	r1, [pc, #44]	; (d4178 <setup+0x70>)
   d414c:	9500      	str	r5, [sp, #0]
   d414e:	2007      	movs	r0, #7
   d4150:	f002 f960 	bl	d6414 <_Z15attachInterrupttPFvvE13InterruptModeah>
  interrupts();
   d4154:	f002 f988 	bl	d6468 <_Z10interruptsv>

  pinMode(D6, INPUT);
   d4158:	4629      	mov	r1, r5
   d415a:	2006      	movs	r0, #6
   d415c:	f002 fe66 	bl	d6e2c <pinMode>
  pinMode(D7, INPUT_PULLUP);
   d4160:	2102      	movs	r1, #2
   d4162:	2007      	movs	r0, #7
}
   d4164:	b003      	add	sp, #12
   d4166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  pinMode(D7, INPUT_PULLUP);
   d416a:	f002 be5f 	b.w	d6e2c <pinMode>
   d416e:	bf00      	nop
   d4170:	2003e5d0 	.word	0x2003e5d0
   d4174:	000d7228 	.word	0x000d7228
   d4178:	000d40c5 	.word	0x000d40c5

000d417c <_Z14printToDisplay6String>:

void printToDisplay(String output)
{
   d417c:	b538      	push	{r3, r4, r5, lr}
  //reset display
  display.clearDisplay();
   d417e:	4c0b      	ldr	r4, [pc, #44]	; (d41ac <_Z14printToDisplay6String+0x30>)
{
   d4180:	4605      	mov	r5, r0
  display.clearDisplay();
   d4182:	4620      	mov	r0, r4
   d4184:	f000 ff10 	bl	d4fa8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4188:	4620      	mov	r0, r4
   d418a:	2101      	movs	r1, #1
   d418c:	f000 fcb1 	bl	d4af2 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4190:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0,0);

      //output to display
  display.println(output);
   d4194:	6829      	ldr	r1, [r5, #0]
   d4196:	2200      	movs	r2, #0
   d4198:	4620      	mov	r0, r4
   d419a:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d419e:	f001 ff08 	bl	d5fb2 <_ZN5Print7printlnEPKc>
  display.display();
   d41a2:	4620      	mov	r0, r4
}
   d41a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display();
   d41a8:	f001 b96a 	b.w	d5480 <_ZN16Adafruit_SSD13067displayEv>
   d41ac:	2003e5d0 	.word	0x2003e5d0

000d41b0 <loop>:

void loop() {
   d41b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  display.loop();
   d41b2:	4824      	ldr	r0, [pc, #144]	; (d4244 <loop+0x94>)
   d41b4:	4e24      	ldr	r6, [pc, #144]	; (d4248 <loop+0x98>)
   d41b6:	f000 fd14 	bl	d4be2 <_ZN16OledWingAdafruit4loopEv>

  if (digitalRead(D6) == 1 && !interruptOccured)
   d41ba:	2006      	movs	r0, #6
   d41bc:	f002 fe60 	bl	d6e80 <digitalRead>
   d41c0:	2801      	cmp	r0, #1
   d41c2:	d105      	bne.n	d41d0 <loop+0x20>
   d41c4:	4b21      	ldr	r3, [pc, #132]	; (d424c <loop+0x9c>)
   d41c6:	781b      	ldrb	r3, [r3, #0]
   d41c8:	b913      	cbnz	r3, d41d0 <loop+0x20>
  {
    counter += 1;
   d41ca:	6833      	ldr	r3, [r6, #0]
   d41cc:	3301      	adds	r3, #1
   d41ce:	6033      	str	r3, [r6, #0]
  }

  Serial.println(digitalRead(D6));
   d41d0:	f002 f8f4 	bl	d63bc <_Z16_fetch_usbserialv>
   d41d4:	4605      	mov	r5, r0
   d41d6:	2006      	movs	r0, #6
   d41d8:	f002 fe52 	bl	d6e80 <digitalRead>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d41dc:	1e04      	subs	r4, r0, #0
   d41de:	da2c      	bge.n	d423a <loop+0x8a>
            t = print('-');
   d41e0:	212d      	movs	r1, #45	; 0x2d
   d41e2:	4628      	mov	r0, r5
   d41e4:	f001 fed6 	bl	d5f94 <_ZN5Print5printEc>
            val = -n;
   d41e8:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d41ea:	220a      	movs	r2, #10
   d41ec:	4628      	mov	r0, r5
   d41ee:	f001 feea 	bl	d5fc6 <_ZN5Print11printNumberEmh>
        n += println();
   d41f2:	4628      	mov	r0, r5
   d41f4:	f001 fed1 	bl	d5f9a <_ZN5Print7printlnEv>
  Serial.println(digitalRead(D7));
   d41f8:	f002 f8e0 	bl	d63bc <_Z16_fetch_usbserialv>
   d41fc:	4605      	mov	r5, r0
   d41fe:	2007      	movs	r0, #7
   d4200:	f002 fe3e 	bl	d6e80 <digitalRead>
        if (n < 0 && base == 10) {
   d4204:	1e04      	subs	r4, r0, #0
   d4206:	da1a      	bge.n	d423e <loop+0x8e>
            t = print('-');
   d4208:	212d      	movs	r1, #45	; 0x2d
   d420a:	4628      	mov	r0, r5
   d420c:	f001 fec2 	bl	d5f94 <_ZN5Print5printEc>
            val = -n;
   d4210:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4212:	220a      	movs	r2, #10
   d4214:	4628      	mov	r0, r5
   d4216:	f001 fed6 	bl	d5fc6 <_ZN5Print11printNumberEmh>
        n += println();
   d421a:	4628      	mov	r0, r5
   d421c:	f001 febd 	bl	d5f9a <_ZN5Print7printlnEv>

  printToDisplay((String) counter);
   d4220:	6831      	ldr	r1, [r6, #0]
   d4222:	220a      	movs	r2, #10
   d4224:	4668      	mov	r0, sp
   d4226:	f001 fe51 	bl	d5ecc <_ZN6StringC1Eih>
   d422a:	4668      	mov	r0, sp
   d422c:	f7ff ffa6 	bl	d417c <_Z14printToDisplay6String>
   d4230:	4668      	mov	r0, sp
   d4232:	f001 fdee 	bl	d5e12 <_ZN6StringD1Ev>

   d4236:	b004      	add	sp, #16
   d4238:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d423a:	4621      	mov	r1, r4
   d423c:	e7d5      	b.n	d41ea <loop+0x3a>
   d423e:	4621      	mov	r1, r4
   d4240:	e7e7      	b.n	d4212 <loop+0x62>
   d4242:	bf00      	nop
   d4244:	2003e5d0 	.word	0x2003e5d0
   d4248:	2003e5cc 	.word	0x2003e5cc
   d424c:	2003e640 	.word	0x2003e640

000d4250 <_GLOBAL__sub_I_Blynk>:
   d4250:	b538      	push	{r3, r4, r5, lr}
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4252:	4d14      	ldr	r5, [pc, #80]	; (d42a4 <_GLOBAL__sub_I_Blynk+0x54>)
SYSTEM_THREAD(ENABLED);
   d4254:	2100      	movs	r1, #0
   d4256:	2001      	movs	r0, #1
   d4258:	f001 fbac 	bl	d59b4 <system_thread_set_state>
   d425c:	4628      	mov	r0, r5
   d425e:	f002 fc27 	bl	d6ab0 <_ZN9TCPClientC1Ev>
   d4262:	f105 001c 	add.w	r0, r5, #28
   d4266:	f001 fff9 	bl	d625c <_ZN9IPAddressC1Ev>
   d426a:	2400      	movs	r4, #0
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d426c:	4a0e      	ldr	r2, [pc, #56]	; (d42a8 <_GLOBAL__sub_I_Blynk+0x58>)
   d426e:	490f      	ldr	r1, [pc, #60]	; (d42ac <_GLOBAL__sub_I_Blynk+0x5c>)
   d4270:	636c      	str	r4, [r5, #52]	; 0x34
   d4272:	4628      	mov	r0, r5
   d4274:	872c      	strh	r4, [r5, #56]	; 0x38
   d4276:	f002 fe57 	bl	d6f28 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d427a:	4b0d      	ldr	r3, [pc, #52]	; (d42b0 <_GLOBAL__sub_I_Blynk+0x60>)
   d427c:	e9c3 5400 	strd	r5, r4, [r3]
   d4280:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4284:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4288:	619c      	str	r4, [r3, #24]
   d428a:	839c      	strh	r4, [r3, #28]
OledWingAdafruit display;
   d428c:	4c09      	ldr	r4, [pc, #36]	; (d42b4 <_GLOBAL__sub_I_Blynk+0x64>)
   d428e:	2107      	movs	r1, #7
   d4290:	4620      	mov	r0, r4
   d4292:	f000 fc4f 	bl	d4b34 <_ZN16OledWingAdafruitC1Ei>
   d4296:	4620      	mov	r0, r4
   d4298:	4a03      	ldr	r2, [pc, #12]	; (d42a8 <_GLOBAL__sub_I_Blynk+0x58>)
   d429a:	4907      	ldr	r1, [pc, #28]	; (d42b8 <_GLOBAL__sub_I_Blynk+0x68>)
   d429c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   d42a0:	f002 be42 	b.w	d6f28 <__aeabi_atexit>
   d42a4:	2003e590 	.word	0x2003e590
   d42a8:	2003e56c 	.word	0x2003e56c
   d42ac:	000d40d5 	.word	0x000d40d5
   d42b0:	2003e570 	.word	0x2003e570
   d42b4:	2003e5d0 	.word	0x2003e5d0
   d42b8:	000d4b01 	.word	0x000d4b01

000d42bc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d42bc:	4770      	bx	lr

000d42be <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d42be:	b510      	push	{r4, lr}
  }
   d42c0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d42c2:	4604      	mov	r4, r0
  }
   d42c4:	f002 fe35 	bl	d6f32 <_ZdlPvj>
   d42c8:	4620      	mov	r0, r4
   d42ca:	bd10      	pop	{r4, pc}

000d42cc <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42cc:	b40e      	push	{r1, r2, r3}
   d42ce:	b503      	push	{r0, r1, lr}
   d42d0:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d42d2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d42d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d42da:	f001 fe92 	bl	d6002 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d42de:	b002      	add	sp, #8
   d42e0:	f85d eb04 	ldr.w	lr, [sp], #4
   d42e4:	b003      	add	sp, #12
   d42e6:	4770      	bx	lr

000d42e8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42ea:	4604      	mov	r4, r0
   d42ec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42ee:	7922      	ldrb	r2, [r4, #4]
   d42f0:	68a3      	ldr	r3, [r4, #8]
   d42f2:	b132      	cbz	r2, d4302 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42f4:	b9a3      	cbnz	r3, d4320 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42f6:	490b      	ldr	r1, [pc, #44]	; (d4324 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42f8:	b002      	add	sp, #8
   d42fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42fe:	f001 be45 	b.w	d5f8c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4302:	4a09      	ldr	r2, [pc, #36]	; (d4328 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4304:	7b26      	ldrb	r6, [r4, #12]
   d4306:	4d09      	ldr	r5, [pc, #36]	; (d432c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4308:	4909      	ldr	r1, [pc, #36]	; (d4330 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d430a:	7b64      	ldrb	r4, [r4, #13]
   d430c:	2e01      	cmp	r6, #1
   d430e:	bf18      	it	ne
   d4310:	4629      	movne	r1, r5
   d4312:	e9cd 1400 	strd	r1, r4, [sp]
   d4316:	4907      	ldr	r1, [pc, #28]	; (d4334 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4318:	f7ff ffd8 	bl	d42cc <_ZN5Print6printfEPKcz>
  }
   d431c:	b002      	add	sp, #8
   d431e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4320:	4a05      	ldr	r2, [pc, #20]	; (d4338 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4322:	e7ef      	b.n	d4304 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4324:	000d723f 	.word	0x000d723f
   d4328:	000d7236 	.word	0x000d7236
   d432c:	000d723b 	.word	0x000d723b
   d4330:	000d7237 	.word	0x000d7237
   d4334:	000d7255 	.word	0x000d7255
   d4338:	000d722e 	.word	0x000d722e

000d433c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4340:	b085      	sub	sp, #20
   d4342:	461f      	mov	r7, r3
   d4344:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4348:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d434c:	eba8 0902 	sub.w	r9, r8, r2
   d4350:	eba7 0a01 	sub.w	sl, r7, r1
   d4354:	f1b9 0f00 	cmp.w	r9, #0
   d4358:	bfb8      	it	lt
   d435a:	f1c9 0900 	rsblt	r9, r9, #0
   d435e:	f1ba 0f00 	cmp.w	sl, #0
   d4362:	bfb8      	it	lt
   d4364:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4368:	45d1      	cmp	r9, sl
        uint16_t color) {
   d436a:	4683      	mov	fp, r0
   d436c:	460c      	mov	r4, r1
   d436e:	4615      	mov	r5, r2
    if (steep) {
   d4370:	dd04      	ble.n	d437c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4372:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4374:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4376:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4378:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d437a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d437c:	42bc      	cmp	r4, r7
   d437e:	dd05      	ble.n	d438c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4380:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4382:	4645      	mov	r5, r8
   d4384:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4386:	4622      	mov	r2, r4
   d4388:	463c      	mov	r4, r7
   d438a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d438c:	1b3e      	subs	r6, r7, r4
   d438e:	b2b2      	uxth	r2, r6
   d4390:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4392:	eba8 0205 	sub.w	r2, r8, r5
   d4396:	2a00      	cmp	r2, #0
   d4398:	bfb8      	it	lt
   d439a:	4252      	neglt	r2, r2
   d439c:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d439e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d43a2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d43a6:	4545      	cmp	r5, r8
   d43a8:	bfb4      	ite	lt
   d43aa:	2201      	movlt	r2, #1
   d43ac:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d43b0:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d43b2:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d43b4:	42bc      	cmp	r4, r7
   d43b6:	dc1c      	bgt.n	d43f2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d43b8:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d43bc:	9303      	str	r3, [sp, #12]
        if (steep) {
   d43be:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d43c0:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d43c4:	bfc7      	ittee	gt
   d43c6:	4629      	movgt	r1, r5
   d43c8:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d43ca:	462a      	movle	r2, r5
   d43cc:	4621      	movle	r1, r4
   d43ce:	4658      	mov	r0, fp
   d43d0:	47c0      	blx	r8
        }
        err -= dy;
   d43d2:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d43d4:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d43d6:	1ab6      	subs	r6, r6, r2
   d43d8:	b2b1      	uxth	r1, r6
   d43da:	b236      	sxth	r6, r6
        if (err < 0) {
   d43dc:	2e00      	cmp	r6, #0
   d43de:	da05      	bge.n	d43ec <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d43e0:	9a02      	ldr	r2, [sp, #8]
   d43e2:	4415      	add	r5, r2
            err += dx;
   d43e4:	9a00      	ldr	r2, [sp, #0]
   d43e6:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d43e8:	b22d      	sxth	r5, r5
            err += dx;
   d43ea:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d43ec:	3401      	adds	r4, #1
   d43ee:	b224      	sxth	r4, r4
   d43f0:	e7e0      	b.n	d43b4 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d43f2:	b005      	add	sp, #20
   d43f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d43f8 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d43f8:	4770      	bx	lr

000d43fa <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d43fa:	b410      	push	{r4}
    drawPixel(x, y, color);
   d43fc:	6804      	ldr	r4, [r0, #0]
   d43fe:	6924      	ldr	r4, [r4, #16]
   d4400:	46a4      	mov	ip, r4
}
   d4402:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4406:	4760      	bx	ip

000d4408 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4408:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d440a:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d440c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4410:	9502      	str	r5, [sp, #8]
   d4412:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4414:	46a4      	mov	ip, r4
}
   d4416:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4418:	4760      	bx	ip

000d441a <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d441a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d441c:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d441e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4422:	9502      	str	r5, [sp, #8]
   d4424:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4426:	46a4      	mov	ip, r4
}
   d4428:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d442a:	4760      	bx	ip

000d442c <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d442c:	b470      	push	{r4, r5, r6}
   d442e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4432:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4436:	6804      	ldr	r4, [r0, #0]
   d4438:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d443c:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d443e:	46a4      	mov	ip, r4
}
   d4440:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4442:	4760      	bx	ip

000d4444 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4448:	461c      	mov	r4, r3
    startWrite();
   d444a:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d444c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4450:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4452:	4605      	mov	r5, r0
   d4454:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4456:	3c01      	subs	r4, #1
   d4458:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d445a:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d445c:	b224      	sxth	r4, r4
    startWrite();
   d445e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4460:	682b      	ldr	r3, [r5, #0]
   d4462:	f8cd 8004 	str.w	r8, [sp, #4]
   d4466:	9400      	str	r4, [sp, #0]
   d4468:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d446a:	4628      	mov	r0, r5
   d446c:	463b      	mov	r3, r7
   d446e:	4632      	mov	r2, r6
   d4470:	4639      	mov	r1, r7
   d4472:	47a0      	blx	r4
    endWrite();
   d4474:	682b      	ldr	r3, [r5, #0]
   d4476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4478:	4628      	mov	r0, r5
}
   d447a:	b002      	add	sp, #8
   d447c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4480:	4718      	bx	r3

000d4482 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4482:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4486:	461d      	mov	r5, r3
    startWrite();
   d4488:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d448a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d448e:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4490:	4604      	mov	r4, r0
   d4492:	4617      	mov	r7, r2
   d4494:	460e      	mov	r6, r1
    startWrite();
   d4496:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4498:	e9cd 7800 	strd	r7, r8, [sp]
   d449c:	6822      	ldr	r2, [r4, #0]
   d449e:	1e6b      	subs	r3, r5, #1
   d44a0:	4433      	add	r3, r6
   d44a2:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d44a4:	4620      	mov	r0, r4
   d44a6:	b21b      	sxth	r3, r3
   d44a8:	463a      	mov	r2, r7
   d44aa:	4631      	mov	r1, r6
   d44ac:	47a8      	blx	r5
    endWrite();
   d44ae:	6823      	ldr	r3, [r4, #0]
   d44b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44b2:	4620      	mov	r0, r4
}
   d44b4:	b002      	add	sp, #8
   d44b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d44ba:	4718      	bx	r3

000d44bc <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d44bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d44c0:	461e      	mov	r6, r3
    startWrite();
   d44c2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d44c4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d44c8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d44ca:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d44ce:	460c      	mov	r4, r1
   d44d0:	4605      	mov	r5, r0
   d44d2:	4617      	mov	r7, r2
    startWrite();
   d44d4:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d44d6:	4426      	add	r6, r4
   d44d8:	42b4      	cmp	r4, r6
   d44da:	682b      	ldr	r3, [r5, #0]
   d44dc:	da0b      	bge.n	d44f6 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d44de:	f8cd 8000 	str.w	r8, [sp]
   d44e2:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d44e6:	4621      	mov	r1, r4
   d44e8:	464b      	mov	r3, r9
   d44ea:	463a      	mov	r2, r7
   d44ec:	4628      	mov	r0, r5
   d44ee:	3401      	adds	r4, #1
   d44f0:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d44f2:	b224      	sxth	r4, r4
   d44f4:	e7f0      	b.n	d44d8 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d44f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44f8:	4628      	mov	r0, r5
}
   d44fa:	b002      	add	sp, #8
   d44fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4500:	4718      	bx	r3

000d4502 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4502:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4504:	6802      	ldr	r2, [r0, #0]
   d4506:	9101      	str	r1, [sp, #4]
   d4508:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d450c:	9100      	str	r1, [sp, #0]
   d450e:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4510:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4514:	2200      	movs	r2, #0
   d4516:	4611      	mov	r1, r2
   d4518:	47a0      	blx	r4
}
   d451a:	b002      	add	sp, #8
   d451c:	bd10      	pop	{r4, pc}

000d451e <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d451e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4522:	461d      	mov	r5, r3
    startWrite();
   d4524:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4526:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d452a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d452c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4530:	4604      	mov	r4, r0
   d4532:	460f      	mov	r7, r1
   d4534:	4616      	mov	r6, r2
    startWrite();
   d4536:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4538:	6823      	ldr	r3, [r4, #0]
   d453a:	f8cd 8000 	str.w	r8, [sp]
   d453e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4542:	4632      	mov	r2, r6
   d4544:	462b      	mov	r3, r5
   d4546:	4639      	mov	r1, r7
   d4548:	4620      	mov	r0, r4
   d454a:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d454c:	6823      	ldr	r3, [r4, #0]
   d454e:	f8cd 8000 	str.w	r8, [sp]
   d4552:	f109 32ff 	add.w	r2, r9, #4294967295
   d4556:	4432      	add	r2, r6
   d4558:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d455c:	4639      	mov	r1, r7
   d455e:	462b      	mov	r3, r5
   d4560:	4620      	mov	r0, r4
   d4562:	b212      	sxth	r2, r2
   d4564:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4566:	6823      	ldr	r3, [r4, #0]
   d4568:	f8cd 8000 	str.w	r8, [sp]
   d456c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4570:	4632      	mov	r2, r6
   d4572:	464b      	mov	r3, r9
   d4574:	4639      	mov	r1, r7
   d4576:	4620      	mov	r0, r4
   d4578:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d457a:	1e6b      	subs	r3, r5, #1
   d457c:	19d9      	adds	r1, r3, r7
   d457e:	6823      	ldr	r3, [r4, #0]
   d4580:	f8cd 8000 	str.w	r8, [sp]
   d4584:	6a1d      	ldr	r5, [r3, #32]
   d4586:	4620      	mov	r0, r4
   d4588:	464b      	mov	r3, r9
   d458a:	4632      	mov	r2, r6
   d458c:	b209      	sxth	r1, r1
   d458e:	47a8      	blx	r5
    endWrite();
   d4590:	6823      	ldr	r3, [r4, #0]
   d4592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4594:	4620      	mov	r0, r4
}
   d4596:	b002      	add	sp, #8
   d4598:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d459c:	4718      	bx	r3

000d459e <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d459e:	4770      	bx	lr

000d45a0 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d45a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d45a4:	4299      	cmp	r1, r3
        uint16_t color) {
   d45a6:	4616      	mov	r6, r2
   d45a8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d45ac:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d45b0:	6802      	ldr	r2, [r0, #0]
   d45b2:	4680      	mov	r8, r0
   d45b4:	460d      	mov	r5, r1
   d45b6:	461c      	mov	r4, r3
    if(x0 == x1){
   d45b8:	d113      	bne.n	d45e2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d45ba:	42be      	cmp	r6, r7
   d45bc:	bfc8      	it	gt
   d45be:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d45c0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d45c4:	bfc4      	itt	gt
   d45c6:	463e      	movgt	r6, r7
   d45c8:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d45ca:	1c7b      	adds	r3, r7, #1
   d45cc:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d45ce:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45d0:	b21b      	sxth	r3, r3
   d45d2:	4632      	mov	r2, r6
   d45d4:	4629      	mov	r1, r5
   d45d6:	4640      	mov	r0, r8
   d45d8:	46a4      	mov	ip, r4
}
   d45da:	b003      	add	sp, #12
   d45dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45e0:	4760      	bx	ip
    } else if(y0 == y1){
   d45e2:	42be      	cmp	r6, r7
   d45e4:	d10a      	bne.n	d45fc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d45e6:	4299      	cmp	r1, r3
   d45e8:	bfc2      	ittt	gt
   d45ea:	460b      	movgt	r3, r1
   d45ec:	4625      	movgt	r5, r4
   d45ee:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45f0:	1c63      	adds	r3, r4, #1
   d45f2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d45f6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d45f8:	1b5b      	subs	r3, r3, r5
   d45fa:	e7e9      	b.n	d45d0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d45fc:	6953      	ldr	r3, [r2, #20]
   d45fe:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4600:	e9cd 7900 	strd	r7, r9, [sp]
   d4604:	f8d8 3000 	ldr.w	r3, [r8]
   d4608:	4640      	mov	r0, r8
   d460a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d460c:	4632      	mov	r2, r6
   d460e:	4623      	mov	r3, r4
   d4610:	4629      	mov	r1, r5
   d4612:	47b8      	blx	r7
        endWrite();
   d4614:	f8d8 3000 	ldr.w	r3, [r8]
   d4618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d461a:	4640      	mov	r0, r8
}
   d461c:	b003      	add	sp, #12
   d461e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d4622:	4718      	bx	r3

000d4624 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4624:	f001 0303 	and.w	r3, r1, #3
   d4628:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d462c:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d462e:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4630:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4634:	bf59      	ittee	pl
   d4636:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4638:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d463a:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d463c:	81c3      	strhmi	r3, [r0, #14]
}
   d463e:	4770      	bx	lr

000d4640 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4640:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d4642:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d4644:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d4646:	4a07      	ldr	r2, [pc, #28]	; (d4664 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d4648:	4d07      	ldr	r5, [pc, #28]	; (d4668 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d464a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d464c:	2400      	movs	r4, #0
    _width    = WIDTH;
   d464e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d4650:	f04f 31ff 	mov.w	r1, #4294967295
   d4654:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d4658:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d465a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d465c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d465e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d4660:	6204      	str	r4, [r0, #32]
}
   d4662:	bd30      	pop	{r4, r5, pc}
   d4664:	01000101 	.word	0x01000101
   d4668:	000d777c 	.word	0x000d777c

000d466c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4670:	b089      	sub	sp, #36	; 0x24
   d4672:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d4676:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4678:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d467c:	9304      	str	r3, [sp, #16]
   d467e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d4682:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4684:	9305      	str	r3, [sp, #20]
   d4686:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d468a:	4604      	mov	r4, r0
    startWrite();
   d468c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d468e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d4692:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4696:	bf48      	it	mi
   d4698:	f108 020e 	addmi.w	r2, r8, #14
   d469c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d46a0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d46a2:	4635      	mov	r5, r6
   d46a4:	9b03      	ldr	r3, [sp, #12]
   d46a6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d46a8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d46ac:	189a      	adds	r2, r3, r2
   d46ae:	9b05      	ldr	r3, [sp, #20]
   d46b0:	428b      	cmp	r3, r1
   d46b2:	b212      	sxth	r2, r2
   d46b4:	dd27      	ble.n	d4706 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46b6:	9b04      	ldr	r3, [sp, #16]
   d46b8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d46ba:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46be:	9306      	str	r3, [sp, #24]
   d46c0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d46c4:	4580      	cmp	r8, r0
   d46c6:	fa1f f189 	uxth.w	r1, r9
   d46ca:	dd17      	ble.n	d46fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d46cc:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46ce:	bf05      	ittet	eq
   d46d0:	9b06      	ldreq	r3, [sp, #24]
   d46d2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d46d4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46d6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d46d8:	bf18      	it	ne
   d46da:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d46dc:	062b      	lsls	r3, r5, #24
   d46de:	d50a      	bpl.n	d46f6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d46e0:	9b02      	ldr	r3, [sp, #8]
   d46e2:	6820      	ldr	r0, [r4, #0]
   d46e4:	9207      	str	r2, [sp, #28]
   d46e6:	4419      	add	r1, r3
   d46e8:	6983      	ldr	r3, [r0, #24]
   d46ea:	b209      	sxth	r1, r1
   d46ec:	461f      	mov	r7, r3
   d46ee:	4620      	mov	r0, r4
   d46f0:	4653      	mov	r3, sl
   d46f2:	47b8      	blx	r7
   d46f4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d46f6:	f109 0901 	add.w	r9, r9, #1
   d46fa:	e7e1      	b.n	d46c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d46fc:	9b01      	ldr	r3, [sp, #4]
   d46fe:	3301      	adds	r3, #1
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	445e      	add	r6, fp
   d4704:	e7ce      	b.n	d46a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d4706:	6823      	ldr	r3, [r4, #0]
   d4708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d470a:	4620      	mov	r0, r4
}
   d470c:	b009      	add	sp, #36	; 0x24
   d470e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d4712:	4718      	bx	r3

000d4714 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4718:	ed2d 8b02 	vpush	{d8}
   d471c:	b091      	sub	sp, #68	; 0x44
   d471e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4720:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4722:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d4726:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d472a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d472e:	9103      	str	r1, [sp, #12]
   d4730:	461f      	mov	r7, r3
   d4732:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d4736:	9304      	str	r3, [sp, #16]
   d4738:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d473a:	2a00      	cmp	r2, #0
   d473c:	f040 80c5 	bne.w	d48ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d4740:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4744:	428b      	cmp	r3, r1
   d4746:	f340 814c 	ble.w	d49e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d474a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d474e:	42b3      	cmp	r3, r6
   d4750:	f340 8147 	ble.w	d49e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4754:	2306      	movs	r3, #6
   d4756:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d475a:	2b00      	cmp	r3, #0
   d475c:	f340 8141 	ble.w	d49e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d4760:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4764:	2b00      	cmp	r3, #0
   d4766:	f340 813c 	ble.w	d49e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d476a:	7f03      	ldrb	r3, [r0, #28]
   d476c:	b91b      	cbnz	r3, d4776 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d476e:	2faf      	cmp	r7, #175	; 0xaf
   d4770:	bf84      	itt	hi
   d4772:	3701      	addhi	r7, #1
   d4774:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d4776:	f8db 3000 	ldr.w	r3, [fp]
   d477a:	4658      	mov	r0, fp
   d477c:	695b      	ldr	r3, [r3, #20]
   d477e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4780:	2205      	movs	r2, #5
   d4782:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4784:	2200      	movs	r2, #0
   d4786:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4788:	4a98      	ldr	r2, [pc, #608]	; (d49ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d478a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d478e:	18d3      	adds	r3, r2, r3
   d4790:	930c      	str	r3, [sp, #48]	; 0x30
   d4792:	b2b3      	uxth	r3, r6
   d4794:	9306      	str	r3, [sp, #24]
   d4796:	9a05      	ldr	r2, [sp, #20]
   d4798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d479a:	5c9b      	ldrb	r3, [r3, r2]
   d479c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d479e:	b2ab      	uxth	r3, r5
   d47a0:	930b      	str	r3, [sp, #44]	; 0x2c
   d47a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d47a6:	9308      	str	r3, [sp, #32]
   d47a8:	9b03      	ldr	r3, [sp, #12]
   d47aa:	fb02 f905 	mul.w	r9, r2, r5
   d47ae:	fa19 f983 	uxtah	r9, r9, r3
   d47b2:	fa0f f389 	sxth.w	r3, r9
   d47b6:	ee08 3a10 	vmov	s16, r3
   d47ba:	2308      	movs	r3, #8
   d47bc:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d47be:	9b03      	ldr	r3, [sp, #12]
   d47c0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d47c4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d47c8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d47cc:	9a07      	ldr	r2, [sp, #28]
   d47ce:	f8db 3000 	ldr.w	r3, [fp]
   d47d2:	07d2      	lsls	r2, r2, #31
   d47d4:	d552      	bpl.n	d487c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d47d6:	2d01      	cmp	r5, #1
   d47d8:	fa1f f289 	uxth.w	r2, r9
   d47dc:	d13e      	bne.n	d485c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d47de:	2c01      	cmp	r4, #1
   d47e0:	d13c      	bne.n	d485c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d47e2:	699b      	ldr	r3, [r3, #24]
   d47e4:	9906      	ldr	r1, [sp, #24]
   d47e6:	461f      	mov	r7, r3
   d47e8:	9b04      	ldr	r3, [sp, #16]
   d47ea:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d47ec:	b212      	sxth	r2, r2
   d47ee:	4651      	mov	r1, sl
   d47f0:	4658      	mov	r0, fp
   d47f2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d47f4:	f109 0301 	add.w	r3, r9, #1
   d47f8:	fa4f f983 	sxtb.w	r9, r3
   d47fc:	9b07      	ldr	r3, [sp, #28]
   d47fe:	085b      	lsrs	r3, r3, #1
   d4800:	9307      	str	r3, [sp, #28]
   d4802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4804:	3b01      	subs	r3, #1
   d4806:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d480a:	930a      	str	r3, [sp, #40]	; 0x28
   d480c:	d1de      	bne.n	d47cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d480e:	9f05      	ldr	r7, [sp, #20]
   d4810:	3701      	adds	r7, #1
   d4812:	b27b      	sxtb	r3, r7
   d4814:	9305      	str	r3, [sp, #20]
   d4816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4818:	3b01      	subs	r3, #1
   d481a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d481e:	9309      	str	r3, [sp, #36]	; 0x24
   d4820:	d1b9      	bne.n	d4796 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d4822:	9b04      	ldr	r3, [sp, #16]
   d4824:	4543      	cmp	r3, r8
   d4826:	d00f      	beq.n	d4848 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d4828:	2d01      	cmp	r5, #1
   d482a:	f8db 3000 	ldr.w	r3, [fp]
   d482e:	d13b      	bne.n	d48a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4830:	2c01      	cmp	r4, #1
   d4832:	d139      	bne.n	d48a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4834:	9908      	ldr	r1, [sp, #32]
   d4836:	f8cd 8000 	str.w	r8, [sp]
   d483a:	3105      	adds	r1, #5
   d483c:	6a1c      	ldr	r4, [r3, #32]
   d483e:	4632      	mov	r2, r6
   d4840:	2308      	movs	r3, #8
   d4842:	b209      	sxth	r1, r1
   d4844:	4658      	mov	r0, fp
   d4846:	47a0      	blx	r4
        endWrite();
   d4848:	f8db 3000 	ldr.w	r3, [fp]
   d484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d484e:	4658      	mov	r0, fp
}
   d4850:	b011      	add	sp, #68	; 0x44
   d4852:	ecbd 8b02 	vpop	{d8}
   d4856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d485a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d485c:	9906      	ldr	r1, [sp, #24]
   d485e:	fb14 f202 	smulbb	r2, r4, r2
   d4862:	440a      	add	r2, r1
   d4864:	9904      	ldr	r1, [sp, #16]
   d4866:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4868:	9400      	str	r4, [sp, #0]
   d486a:	69db      	ldr	r3, [r3, #28]
   d486c:	ee18 1a10 	vmov	r1, s16
   d4870:	461f      	mov	r7, r3
   d4872:	b212      	sxth	r2, r2
   d4874:	462b      	mov	r3, r5
   d4876:	4658      	mov	r0, fp
   d4878:	47b8      	blx	r7
   d487a:	e7bb      	b.n	d47f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d487c:	9a04      	ldr	r2, [sp, #16]
   d487e:	4542      	cmp	r2, r8
   d4880:	d0b8      	beq.n	d47f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d4882:	2d01      	cmp	r5, #1
   d4884:	fa1f f289 	uxth.w	r2, r9
   d4888:	d107      	bne.n	d489a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d488a:	2c01      	cmp	r4, #1
   d488c:	d105      	bne.n	d489a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d488e:	699b      	ldr	r3, [r3, #24]
   d4890:	9906      	ldr	r1, [sp, #24]
   d4892:	461f      	mov	r7, r3
   d4894:	440a      	add	r2, r1
   d4896:	4643      	mov	r3, r8
   d4898:	e7a8      	b.n	d47ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d489a:	9906      	ldr	r1, [sp, #24]
   d489c:	f8cd 8004 	str.w	r8, [sp, #4]
   d48a0:	fb14 f202 	smulbb	r2, r4, r2
   d48a4:	440a      	add	r2, r1
   d48a6:	e7df      	b.n	d4868 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d48a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d48aa:	f8cd 8004 	str.w	r8, [sp, #4]
   d48ae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d48b2:	9a08      	ldr	r2, [sp, #32]
   d48b4:	00e4      	lsls	r4, r4, #3
   d48b6:	440a      	add	r2, r1
   d48b8:	4611      	mov	r1, r2
   d48ba:	9400      	str	r4, [sp, #0]
   d48bc:	69dc      	ldr	r4, [r3, #28]
   d48be:	4632      	mov	r2, r6
   d48c0:	462b      	mov	r3, r5
   d48c2:	b209      	sxth	r1, r1
   d48c4:	4658      	mov	r0, fp
   d48c6:	47a0      	blx	r4
        endWrite();
   d48c8:	e7be      	b.n	d4848 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d48ca:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d48cc:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d48ce:	6812      	ldr	r2, [r2, #0]
   d48d0:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d48d2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d48d4:	b2ff      	uxtb	r7, r7
   d48d6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d48da:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d48de:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d48e0:	789a      	ldrb	r2, [r3, #2]
   d48e2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d48e4:	78da      	ldrb	r2, [r3, #3]
   d48e6:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d48e8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d48ea:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d48ee:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d48f2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d48f4:	d801      	bhi.n	d48fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d48f6:	2c01      	cmp	r4, #1
   d48f8:	d957      	bls.n	d49aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d48fa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d48fe:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4900:	fa0f f38a 	sxth.w	r3, sl
   d4904:	9307      	str	r3, [sp, #28]
        startWrite();
   d4906:	f8db 3000 	ldr.w	r3, [fp]
   d490a:	4658      	mov	r0, fp
   d490c:	695b      	ldr	r3, [r3, #20]
   d490e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4910:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4912:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4916:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4918:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d491c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d491e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4920:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d4922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4924:	429f      	cmp	r7, r3
   d4926:	d28f      	bcs.n	d4848 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4928:	9b07      	ldr	r3, [sp, #28]
   d492a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d492c:	443b      	add	r3, r7
   d492e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d4932:	2200      	movs	r2, #0
   d4934:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4938:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d493a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d493e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4942:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4946:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d4948:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d494a:	9905      	ldr	r1, [sp, #20]
   d494c:	4291      	cmp	r1, r2
   d494e:	d241      	bcs.n	d49d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d4950:	1c5a      	adds	r2, r3, #1
   d4952:	b2d2      	uxtb	r2, r2
   d4954:	075b      	lsls	r3, r3, #29
   d4956:	920c      	str	r2, [sp, #48]	; 0x30
   d4958:	d107      	bne.n	d496a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d495a:	9b06      	ldr	r3, [sp, #24]
   d495c:	9906      	ldr	r1, [sp, #24]
   d495e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d4960:	3301      	adds	r3, #1
   d4962:	b29b      	uxth	r3, r3
   d4964:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4968:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d496a:	f019 0f80 	tst.w	r9, #128	; 0x80
   d496e:	d012      	beq.n	d4996 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4970:	2d01      	cmp	r5, #1
   d4972:	f8db 3000 	ldr.w	r3, [fp]
   d4976:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d497a:	d11a      	bne.n	d49b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d497c:	2c01      	cmp	r4, #1
   d497e:	d118      	bne.n	d49b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4982:	699b      	ldr	r3, [r3, #24]
   d4984:	4411      	add	r1, r2
   d4986:	9a05      	ldr	r2, [sp, #20]
   d4988:	4411      	add	r1, r2
   d498a:	461e      	mov	r6, r3
   d498c:	4652      	mov	r2, sl
   d498e:	9b04      	ldr	r3, [sp, #16]
   d4990:	b209      	sxth	r1, r1
   d4992:	4658      	mov	r0, fp
   d4994:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d4996:	9e05      	ldr	r6, [sp, #20]
   d4998:	3601      	adds	r6, #1
   d499a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d499c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d49a0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d49a2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d49a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d49a8:	e7ce      	b.n	d4948 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d49aa:	2300      	movs	r3, #0
   d49ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d49b0:	e7a9      	b.n	d4906 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d49b2:	9805      	ldr	r0, [sp, #20]
   d49b4:	9a08      	ldr	r2, [sp, #32]
   d49b6:	4402      	add	r2, r0
   d49b8:	fb02 1105 	mla	r1, r2, r5, r1
   d49bc:	9a04      	ldr	r2, [sp, #16]
   d49be:	e9cd 4200 	strd	r4, r2, [sp]
   d49c2:	69db      	ldr	r3, [r3, #28]
   d49c4:	ee18 2a10 	vmov	r2, s16
   d49c8:	461e      	mov	r6, r3
   d49ca:	b209      	sxth	r1, r1
   d49cc:	462b      	mov	r3, r5
   d49ce:	4658      	mov	r0, fp
   d49d0:	47b0      	blx	r6
   d49d2:	e7e0      	b.n	d4996 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d49d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d49d6:	3701      	adds	r7, #1
   d49d8:	4498      	add	r8, r3
   d49da:	fa5f f888 	uxtb.w	r8, r8
   d49de:	b2ff      	uxtb	r7, r7
   d49e0:	e79f      	b.n	d4922 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d49e2:	b011      	add	sp, #68	; 0x44
   d49e4:	ecbd 8b02 	vpop	{d8}
   d49e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d49ec:	000d7272 	.word	0x000d7272

000d49f0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d49f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d49f2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d49f4:	b085      	sub	sp, #20
   d49f6:	4604      	mov	r4, r0
   d49f8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d49fa:	2a00      	cmp	r2, #0
   d49fc:	d134      	bne.n	d4a68 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d49fe:	290a      	cmp	r1, #10
   d4a00:	d108      	bne.n	d4a14 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4a02:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4a04:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4a06:	7e42      	ldrb	r2, [r0, #25]
   d4a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4a0c:	8263      	strh	r3, [r4, #18]
}
   d4a0e:	2001      	movs	r0, #1
   d4a10:	b005      	add	sp, #20
   d4a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4a14:	290d      	cmp	r1, #13
   d4a16:	d0fa      	beq.n	d4a0e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4a18:	7ee1      	ldrb	r1, [r4, #27]
   d4a1a:	7e00      	ldrb	r0, [r0, #24]
   d4a1c:	7e65      	ldrb	r5, [r4, #25]
   d4a1e:	b171      	cbz	r1, d4a3e <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4a20:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4a24:	2106      	movs	r1, #6
   d4a26:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4a2a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4a2e:	42b1      	cmp	r1, r6
   d4a30:	bfc1      	itttt	gt
   d4a32:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4a36:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4a38:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4a3c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a3e:	8ae2      	ldrh	r2, [r4, #22]
   d4a40:	9201      	str	r2, [sp, #4]
   d4a42:	8aa2      	ldrh	r2, [r4, #20]
   d4a44:	9200      	str	r2, [sp, #0]
   d4a46:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4a4a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a4e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a52:	4620      	mov	r0, r4
   d4a54:	f7ff fe5e 	bl	d4714 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4a58:	7e23      	ldrb	r3, [r4, #24]
   d4a5a:	8a22      	ldrh	r2, [r4, #16]
   d4a5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4a60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a64:	8223      	strh	r3, [r4, #16]
   d4a66:	e7d2      	b.n	d4a0e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4a68:	290a      	cmp	r1, #10
   d4a6a:	d107      	bne.n	d4a7c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4a6c:	2300      	movs	r3, #0
   d4a6e:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a70:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4a72:	7e41      	ldrb	r1, [r0, #25]
   d4a74:	8a42      	ldrh	r2, [r0, #18]
   d4a76:	fb01 2303 	mla	r3, r1, r3, r2
   d4a7a:	e7c7      	b.n	d4a0c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4a7c:	290d      	cmp	r1, #13
   d4a7e:	d0c6      	beq.n	d4a0e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4a80:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4a82:	42a9      	cmp	r1, r5
   d4a84:	d3c3      	bcc.n	d4a0e <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4a86:	7a51      	ldrb	r1, [r2, #9]
   d4a88:	4299      	cmp	r1, r3
   d4a8a:	d3c0      	bcc.n	d4a0e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4a8c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4a8e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4a90:	b2ed      	uxtb	r5, r5
   d4a92:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4a96:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4a98:	b32f      	cbz	r7, d4ae6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4a9a:	78e9      	ldrb	r1, [r5, #3]
   d4a9c:	b319      	cbz	r1, d4ae6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4a9e:	7ee1      	ldrb	r1, [r4, #27]
   d4aa0:	7e00      	ldrb	r0, [r0, #24]
   d4aa2:	7e66      	ldrb	r6, [r4, #25]
   d4aa4:	b191      	cbz	r1, d4acc <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4aa6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4aaa:	4439      	add	r1, r7
   d4aac:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4ab0:	fb00 7101 	mla	r1, r0, r1, r7
   d4ab4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4ab8:	42b9      	cmp	r1, r7
   d4aba:	dd07      	ble.n	d4acc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4abc:	2700      	movs	r7, #0
   d4abe:	8227      	strh	r7, [r4, #16]
   d4ac0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4ac4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4ac6:	fb02 1206 	mla	r2, r2, r6, r1
   d4aca:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4acc:	8ae2      	ldrh	r2, [r4, #22]
   d4ace:	9201      	str	r2, [sp, #4]
   d4ad0:	8aa2      	ldrh	r2, [r4, #20]
   d4ad2:	9200      	str	r2, [sp, #0]
   d4ad4:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4ad8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4adc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f7ff fe17 	bl	d4714 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4ae6:	7929      	ldrb	r1, [r5, #4]
   d4ae8:	7e23      	ldrb	r3, [r4, #24]
   d4aea:	8a22      	ldrh	r2, [r4, #16]
   d4aec:	fb01 2303 	mla	r3, r1, r3, r2
   d4af0:	e7b8      	b.n	d4a64 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4af2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4af2:	2901      	cmp	r1, #1
   d4af4:	bf38      	it	cc
   d4af6:	2101      	movcc	r1, #1
   d4af8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4afa:	7641      	strb	r1, [r0, #25]
}
   d4afc:	4770      	bx	lr
	...

000d4b00 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4b00:	b510      	push	{r4, lr}
   d4b02:	4b06      	ldr	r3, [pc, #24]	; (d4b1c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4b04:	6003      	str	r3, [r0, #0]
   d4b06:	4604      	mov	r4, r0
	if (mutex) {
   d4b08:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4b0a:	b108      	cbz	r0, d4b10 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4b0c:	f000 fdc2 	bl	d5694 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4b10:	4620      	mov	r0, r4
   d4b12:	f000 f8d1 	bl	d4cb8 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4b16:	4620      	mov	r0, r4
   d4b18:	bd10      	pop	{r4, pc}
   d4b1a:	bf00      	nop
   d4b1c:	000d77d4 	.word	0x000d77d4

000d4b20 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4b20:	b510      	push	{r4, lr}
   d4b22:	4604      	mov	r4, r0
}
   d4b24:	f7ff ffec 	bl	d4b00 <_ZN16OledWingAdafruitD1Ev>
   d4b28:	4620      	mov	r0, r4
   d4b2a:	2170      	movs	r1, #112	; 0x70
   d4b2c:	f002 fa01 	bl	d6f32 <_ZdlPvj>
   d4b30:	4620      	mov	r0, r4
   d4b32:	bd10      	pop	{r4, pc}

000d4b34 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4b34:	b530      	push	{r4, r5, lr}
   d4b36:	b085      	sub	sp, #20
   d4b38:	4604      	mov	r4, r0
   d4b3a:	460d      	mov	r5, r1
   d4b3c:	f002 f9cc 	bl	d6ed8 <_Z19__fetch_global_Wirev>
   d4b40:	4a10      	ldr	r2, [pc, #64]	; (d4b84 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4b42:	4911      	ldr	r1, [pc, #68]	; (d4b88 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4b44:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4b48:	f04f 32ff 	mov.w	r2, #4294967295
   d4b4c:	2180      	movs	r1, #128	; 0x80
   d4b4e:	4603      	mov	r3, r0
   d4b50:	9200      	str	r2, [sp, #0]
   d4b52:	4620      	mov	r0, r4
   d4b54:	2220      	movs	r2, #32
   d4b56:	f000 f935 	bl	d4dc4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4b5a:	4b0c      	ldr	r3, [pc, #48]	; (d4b8c <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4b5c:	6023      	str	r3, [r4, #0]
   d4b5e:	2300      	movs	r3, #0
   d4b60:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4b64:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b68:	f000 f854 	bl	d4c14 <_ZN8DebounceC1Ev>
   d4b6c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b70:	f000 f850 	bl	d4c14 <_ZN8DebounceC1Ev>
   d4b74:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b78:	f000 f84c 	bl	d4c14 <_ZN8DebounceC1Ev>
}
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	b005      	add	sp, #20
   d4b80:	bd30      	pop	{r4, r5, pc}
   d4b82:	bf00      	nop
   d4b84:	00061a80 	.word	0x00061a80
   d4b88:	000186a0 	.word	0x000186a0
   d4b8c:	000d77d4 	.word	0x000d77d4

000d4b90 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4b90:	b513      	push	{r0, r1, r4, lr}
   d4b92:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4b94:	3050      	adds	r0, #80	; 0x50
   d4b96:	f000 fd75 	bl	d5684 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4b9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b9c:	07d9      	lsls	r1, r3, #31
   d4b9e:	d505      	bpl.n	d4bac <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4ba0:	2202      	movs	r2, #2
   d4ba2:	2104      	movs	r1, #4
   d4ba4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4ba8:	f000 f848 	bl	d4c3c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4bac:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bae:	079a      	lsls	r2, r3, #30
   d4bb0:	d505      	bpl.n	d4bbe <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4bb2:	2200      	movs	r2, #0
   d4bb4:	2103      	movs	r1, #3
   d4bb6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4bba:	f000 f83f 	bl	d4c3c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4bbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bc0:	075b      	lsls	r3, r3, #29
   d4bc2:	d505      	bpl.n	d4bd0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4bc4:	2202      	movs	r2, #2
   d4bc6:	4611      	mov	r1, r2
   d4bc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4bcc:	f000 f836 	bl	d4c3c <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4bd0:	2301      	movs	r3, #1
   d4bd2:	9300      	str	r3, [sp, #0]
   d4bd4:	223c      	movs	r2, #60	; 0x3c
   d4bd6:	2102      	movs	r1, #2
   d4bd8:	4620      	mov	r0, r4
   d4bda:	f000 f9f3 	bl	d4fc4 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4bde:	b002      	add	sp, #8
   d4be0:	bd10      	pop	{r4, pc}

000d4be2 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4be2:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4be4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4be6:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4be8:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4bea:	d502      	bpl.n	d4bf2 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4bec:	3058      	adds	r0, #88	; 0x58
   d4bee:	f000 f832 	bl	d4c56 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4bf2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bf4:	079a      	lsls	r2, r3, #30
   d4bf6:	d503      	bpl.n	d4c00 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4bf8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4bfc:	f000 f82b 	bl	d4c56 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4c00:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4c02:	075b      	lsls	r3, r3, #29
   d4c04:	d505      	bpl.n	d4c12 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4c06:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4c0e:	f000 b822 	b.w	d4c56 <_ZN8Debounce6updateEv>
}
   d4c12:	bd10      	pop	{r4, pc}

000d4c14 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4c14:	2100      	movs	r1, #0
   d4c16:	220a      	movs	r2, #10
   d4c18:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4c1c:	4770      	bx	lr

000d4c1e <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4c1e:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4c20:	b510      	push	{r4, lr}
   d4c22:	4604      	mov	r4, r0
    this->pin = pin;
   d4c24:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4c26:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4c28:	b288      	uxth	r0, r1
   d4c2a:	f002 f929 	bl	d6e80 <digitalRead>
   d4c2e:	b108      	cbz	r0, d4c34 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4c30:	2303      	movs	r3, #3
   d4c32:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c34:	f000 fd1e 	bl	d5674 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4c38:	6020      	str	r0, [r4, #0]
#endif
}
   d4c3a:	bd10      	pop	{r4, pc}

000d4c3c <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4c3c:	b538      	push	{r3, r4, r5, lr}
   d4c3e:	460c      	mov	r4, r1
   d4c40:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4c42:	4611      	mov	r1, r2
   d4c44:	b2a0      	uxth	r0, r4
   d4c46:	f002 f8f1 	bl	d6e2c <pinMode>
  
  this->attach(pin);
   d4c4a:	4621      	mov	r1, r4
   d4c4c:	4628      	mov	r0, r5
}
   d4c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4c52:	f7ff bfe4 	b.w	d4c1e <_ZN8Debounce6attachEi>

000d4c56 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4c56:	b538      	push	{r3, r4, r5, lr}
   d4c58:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4c5a:	79c0      	ldrb	r0, [r0, #7]
   d4c5c:	f002 f910 	bl	d6e80 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4c60:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4c62:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4c64:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4c68:	bf18      	it	ne
   d4c6a:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4c6c:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4c70:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4c72:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4c74:	d00a      	beq.n	d4c8c <_ZN8Debounce6updateEv+0x36>
   d4c76:	f000 fcfd 	bl	d5674 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4c7a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4c7c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4c7e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4c82:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4c84:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4c86:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4c8a:	bd38      	pop	{r3, r4, r5, pc}
   d4c8c:	f000 fcf2 	bl	d5674 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4c90:	6823      	ldr	r3, [r4, #0]
   d4c92:	1ac0      	subs	r0, r0, r3
   d4c94:	88a3      	ldrh	r3, [r4, #4]
   d4c96:	4298      	cmp	r0, r3
   d4c98:	d3f4      	bcc.n	d4c84 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4c9a:	79a3      	ldrb	r3, [r4, #6]
   d4c9c:	f003 0301 	and.w	r3, r3, #1
   d4ca0:	42ab      	cmp	r3, r5
   d4ca2:	d0ef      	beq.n	d4c84 <_ZN8Debounce6updateEv+0x2e>
   d4ca4:	f000 fce6 	bl	d5674 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4ca8:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4caa:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4cac:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4cb0:	f043 0308 	orr.w	r3, r3, #8
   d4cb4:	e7e5      	b.n	d4c82 <_ZN8Debounce6updateEv+0x2c>
	...

000d4cb8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4cb8:	b510      	push	{r4, lr}
   d4cba:	4b04      	ldr	r3, [pc, #16]	; (d4ccc <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4cbc:	6003      	str	r3, [r0, #0]
   d4cbe:	4604      	mov	r4, r0
  if(buffer) {
   d4cc0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4cc2:	b108      	cbz	r0, d4cc8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4cc4:	f000 ff02 	bl	d5acc <free>
    buffer = NULL;
  }
}
   d4cc8:	4620      	mov	r0, r4
   d4cca:	bd10      	pop	{r4, pc}
   d4ccc:	000d7ce0 	.word	0x000d7ce0

000d4cd0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4cd0:	b510      	push	{r4, lr}
   d4cd2:	4604      	mov	r4, r0
}
   d4cd4:	f7ff fff0 	bl	d4cb8 <_ZN16Adafruit_SSD1306D1Ev>
   d4cd8:	4620      	mov	r0, r4
   d4cda:	2150      	movs	r1, #80	; 0x50
   d4cdc:	f002 f929 	bl	d6f32 <_ZdlPvj>
   d4ce0:	4620      	mov	r0, r4
   d4ce2:	bd10      	pop	{r4, pc}

000d4ce4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4ce4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4ce6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4ce8:	db4b      	blt.n	d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4cea:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4cee:	428c      	cmp	r4, r1
   d4cf0:	dd47      	ble.n	d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4cf2:	2a00      	cmp	r2, #0
   d4cf4:	db45      	blt.n	d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4cf6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4cfa:	4294      	cmp	r4, r2
   d4cfc:	dd41      	ble.n	d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4cfe:	7e84      	ldrb	r4, [r0, #26]
   d4d00:	2c02      	cmp	r4, #2
   d4d02:	d01f      	beq.n	d4d44 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4d04:	2c03      	cmp	r4, #3
   d4d06:	d026      	beq.n	d4d56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4d08:	2c01      	cmp	r4, #1
   d4d0a:	d104      	bne.n	d4d16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4d0c:	8904      	ldrh	r4, [r0, #8]
   d4d0e:	43d2      	mvns	r2, r2
   d4d10:	4414      	add	r4, r2
      break;
   d4d12:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4d14:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4d16:	2b01      	cmp	r3, #1
   d4d18:	d023      	beq.n	d4d62 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4d1a:	2b02      	cmp	r3, #2
   d4d1c:	d032      	beq.n	d4d84 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4d1e:	bb83      	cbnz	r3, d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4d20:	2a00      	cmp	r2, #0
   d4d22:	4613      	mov	r3, r2
   d4d24:	8904      	ldrh	r4, [r0, #8]
   d4d26:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d28:	bfb8      	it	lt
   d4d2a:	1dd3      	addlt	r3, r2, #7
   d4d2c:	10db      	asrs	r3, r3, #3
   d4d2e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d32:	f002 0207 	and.w	r2, r2, #7
   d4d36:	2301      	movs	r3, #1
   d4d38:	4093      	lsls	r3, r2
   d4d3a:	5c42      	ldrb	r2, [r0, r1]
   d4d3c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4d40:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4d42:	e01e      	b.n	d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4d44:	8904      	ldrh	r4, [r0, #8]
   d4d46:	43c9      	mvns	r1, r1
   d4d48:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4d4a:	8944      	ldrh	r4, [r0, #10]
   d4d4c:	43d2      	mvns	r2, r2
   d4d4e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4d50:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4d52:	b212      	sxth	r2, r2
      break;
   d4d54:	e7df      	b.n	d4d16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4d56:	8944      	ldrh	r4, [r0, #10]
   d4d58:	43c9      	mvns	r1, r1
   d4d5a:	440c      	add	r4, r1
      break;
   d4d5c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4d5e:	b222      	sxth	r2, r4
      break;
   d4d60:	e7d9      	b.n	d4d16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4d62:	2a00      	cmp	r2, #0
   d4d64:	8904      	ldrh	r4, [r0, #8]
   d4d66:	4613      	mov	r3, r2
   d4d68:	bfb8      	it	lt
   d4d6a:	1dd3      	addlt	r3, r2, #7
   d4d6c:	10db      	asrs	r3, r3, #3
   d4d6e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4d74:	f002 0007 	and.w	r0, r2, #7
   d4d78:	2201      	movs	r2, #1
   d4d7a:	4082      	lsls	r2, r0
   d4d7c:	5c58      	ldrb	r0, [r3, r1]
   d4d7e:	4302      	orrs	r2, r0
   d4d80:	545a      	strb	r2, [r3, r1]
}
   d4d82:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4d84:	2a00      	cmp	r2, #0
   d4d86:	4613      	mov	r3, r2
   d4d88:	8904      	ldrh	r4, [r0, #8]
   d4d8a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d8c:	bfb8      	it	lt
   d4d8e:	1dd3      	addlt	r3, r2, #7
   d4d90:	10db      	asrs	r3, r3, #3
   d4d92:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d96:	f002 0207 	and.w	r2, r2, #7
   d4d9a:	2301      	movs	r3, #1
   d4d9c:	fa03 f202 	lsl.w	r2, r3, r2
   d4da0:	5c43      	ldrb	r3, [r0, r1]
   d4da2:	405a      	eors	r2, r3
   d4da4:	e7cc      	b.n	d4d40 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4da6 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4da6:	b510      	push	{r4, lr}
   d4da8:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4daa:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4dae:	2101      	movs	r1, #1
   d4db0:	b280      	uxth	r0, r0
   d4db2:	f002 f84c 	bl	d6e4e <digitalWrite>
   d4db6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4db8:	b118      	cbz	r0, d4dc2 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4dbe:	f000 bf0c 	b.w	d5bda <_ZN8SPIClass14endTransactionEv>
}
   d4dc2:	bd10      	pop	{r4, pc}

000d4dc4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4dc4:	b570      	push	{r4, r5, r6, lr}
   d4dc6:	4604      	mov	r4, r0
   d4dc8:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4dca:	2600      	movs	r6, #0
   d4dcc:	f7ff fc38 	bl	d4640 <_ZN12Adafruit_GFXC1Ess>
   d4dd0:	4b11      	ldr	r3, [pc, #68]	; (d4e18 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4dd2:	6023      	str	r3, [r4, #0]
   d4dd4:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4dd6:	b915      	cbnz	r5, d4dde <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4dd8:	f002 f87e 	bl	d6ed8 <_Z19__fetch_global_Wirev>
   d4ddc:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4dde:	23ff      	movs	r3, #255	; 0xff
   d4de0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4de4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4de8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4dec:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4df0:	4b0a      	ldr	r3, [pc, #40]	; (d4e1c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4df2:	63a3      	str	r3, [r4, #56]	; 0x38
   d4df4:	2301      	movs	r3, #1
   d4df6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4dfa:	9b05      	ldr	r3, [sp, #20]
   d4dfc:	64a3      	str	r3, [r4, #72]	; 0x48
   d4dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e02:	9b06      	ldr	r3, [sp, #24]
   d4e04:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4e06:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4e0a:	6426      	str	r6, [r4, #64]	; 0x40
   d4e0c:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4e10:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4e12:	4620      	mov	r0, r4
   d4e14:	bd70      	pop	{r4, r5, r6, pc}
   d4e16:	bf00      	nop
   d4e18:	000d7ce0 	.word	0x000d7ce0
   d4e1c:	000d782c 	.word	0x000d782c

000d4e20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e22:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4e24:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4e26:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4e28:	b190      	cbz	r0, d4e50 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4e2a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e2e:	f001 fbe7 	bl	d6600 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e34:	6803      	ldr	r3, [r0, #0]
   d4e36:	2100      	movs	r1, #0
   d4e38:	689b      	ldr	r3, [r3, #8]
   d4e3a:	4798      	blx	r3
    WIRE_WRITE(c);
   d4e3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e3e:	6803      	ldr	r3, [r0, #0]
   d4e40:	4629      	mov	r1, r5
   d4e42:	689b      	ldr	r3, [r3, #8]
   d4e44:	4798      	blx	r3
    wire->endTransmission();
   d4e46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4e48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4e4c:	f001 bbdf 	b.w	d660e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4e50:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4e54:	4601      	mov	r1, r0
   d4e56:	b298      	uxth	r0, r3
   d4e58:	f001 fff9 	bl	d6e4e <digitalWrite>
  if(spi) {
   d4e5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e5e:	b120      	cbz	r0, d4e6a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4e60:	4629      	mov	r1, r5
}
   d4e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4e66:	f000 bf3f 	b.w	d5ce8 <_ZN8SPIClass8transferEh>
   d4e6a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e6c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4e6e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4e72:	ea05 0107 	and.w	r1, r5, r7
   d4e76:	b280      	uxth	r0, r0
   d4e78:	f001 ffe9 	bl	d6e4e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4e7c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e80:	2101      	movs	r1, #1
   d4e82:	b280      	uxth	r0, r0
   d4e84:	f001 ffe3 	bl	d6e4e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4e88:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e8c:	2100      	movs	r1, #0
   d4e8e:	b280      	uxth	r0, r0
   d4e90:	f001 ffdd 	bl	d6e4e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e94:	3e01      	subs	r6, #1
   d4e96:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4e9a:	d1e8      	bne.n	d4e6e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e9e <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e9e:	b538      	push	{r3, r4, r5, lr}
   d4ea0:	4604      	mov	r4, r0
  TRANSACTION_START
   d4ea2:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4ea4:	460d      	mov	r5, r1
  TRANSACTION_START
   d4ea6:	b180      	cbz	r0, d4eca <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4ea8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4eaa:	f001 fb9b 	bl	d65e4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4eae:	2d00      	cmp	r5, #0
   d4eb0:	4620      	mov	r0, r4
   d4eb2:	bf14      	ite	ne
   d4eb4:	21a7      	movne	r1, #167	; 0xa7
   d4eb6:	21a6      	moveq	r1, #166	; 0xa6
   d4eb8:	f7ff ffb2 	bl	d4e20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4ebc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ebe:	b188      	cbz	r0, d4ee4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4ec0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4ec6:	f001 bb8d 	b.w	d65e4 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4eca:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4ecc:	b118      	cbz	r0, d4ed6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4ece:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4ed2:	f000 fe9b 	bl	d5c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4ed6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4eda:	2100      	movs	r1, #0
   d4edc:	b280      	uxth	r0, r0
   d4ede:	f001 ffb6 	bl	d6e4e <digitalWrite>
   d4ee2:	e7e4      	b.n	d4eae <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4ee4:	4620      	mov	r0, r4
}
   d4ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4eea:	f7ff bf5c 	b.w	d4da6 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4ef2:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4ef4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4ef6:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4ef8:	188f      	adds	r7, r1, r2
   d4efa:	b340      	cbz	r0, d4f4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4efc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4f00:	f001 fb7e 	bl	d6600 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4f04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f06:	6803      	ldr	r3, [r0, #0]
   d4f08:	2100      	movs	r1, #0
   d4f0a:	689b      	ldr	r3, [r3, #8]
   d4f0c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4f0e:	2601      	movs	r6, #1
    while(n--) {
   d4f10:	42bd      	cmp	r5, r7
   d4f12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f14:	d017      	beq.n	d4f46 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4f16:	2e1f      	cmp	r6, #31
   d4f18:	d90c      	bls.n	d4f34 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4f1a:	f001 fb78 	bl	d660e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4f1e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4f22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f24:	f001 fb6c 	bl	d6600 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4f28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f2a:	6803      	ldr	r3, [r0, #0]
   d4f2c:	2100      	movs	r1, #0
   d4f2e:	689b      	ldr	r3, [r3, #8]
   d4f30:	4798      	blx	r3
        bytesOut = 1;
   d4f32:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4f34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f36:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f3a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4f3c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4f3e:	689b      	ldr	r3, [r3, #8]
   d4f40:	4798      	blx	r3
      bytesOut++;
   d4f42:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4f44:	e7e4      	b.n	d4f10 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4f46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4f4a:	f001 bb60 	b.w	d660e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4f4e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4f52:	4601      	mov	r1, r0
   d4f54:	b298      	uxth	r0, r3
   d4f56:	f001 ff7a 	bl	d6e4e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4f5a:	42af      	cmp	r7, r5
   d4f5c:	d022      	beq.n	d4fa4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4f5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4f60:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4f64:	b118      	cbz	r0, d4f6e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4f66:	4649      	mov	r1, r9
   d4f68:	f000 febe 	bl	d5ce8 <_ZN8SPIClass8transferEh>
   d4f6c:	e7f5      	b.n	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4f6e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f70:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4f74:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4f78:	ea09 0108 	and.w	r1, r9, r8
   d4f7c:	b280      	uxth	r0, r0
   d4f7e:	f001 ff66 	bl	d6e4e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4f82:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f86:	2101      	movs	r1, #1
   d4f88:	b280      	uxth	r0, r0
   d4f8a:	f001 ff60 	bl	d6e4e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4f8e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f92:	2100      	movs	r1, #0
   d4f94:	b280      	uxth	r0, r0
   d4f96:	f001 ff5a 	bl	d6e4e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f9a:	3e01      	subs	r6, #1
   d4f9c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4fa0:	d1e8      	bne.n	d4f74 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4fa2:	e7da      	b.n	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4fa8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4fa8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4fac:	1dda      	adds	r2, r3, #7
   d4fae:	bf48      	it	mi
   d4fb0:	f103 020e 	addmi.w	r2, r3, #14
   d4fb4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4fb8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4fba:	10d2      	asrs	r2, r2, #3
   d4fbc:	435a      	muls	r2, r3
   d4fbe:	2100      	movs	r1, #0
   d4fc0:	f002 b8ea 	b.w	d7198 <memset>

000d4fc4 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4fc8:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4fca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4fcc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4fd0:	4604      	mov	r4, r0
   d4fd2:	460f      	mov	r7, r1
   d4fd4:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4fd6:	b1b3      	cbz	r3, d5006 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f7ff ffe5 	bl	d4fa8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4fde:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4fe2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4fe6:	2820      	cmp	r0, #32
   d4fe8:	dc1f      	bgt.n	d502a <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4fea:	2320      	movs	r3, #32
   d4fec:	2201      	movs	r2, #1
   d4fee:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4ff2:	3820      	subs	r0, #32
   d4ff4:	2373      	movs	r3, #115	; 0x73
   d4ff6:	3973      	subs	r1, #115	; 0x73
   d4ff8:	9300      	str	r3, [sp, #0]
   d4ffa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4ffe:	4b89      	ldr	r3, [pc, #548]	; (d5224 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5000:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d5004:	e01f      	b.n	d5046 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5006:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d500a:	1dd8      	adds	r0, r3, #7
   d500c:	bf48      	it	mi
   d500e:	f103 000e 	addmi.w	r0, r3, #14
   d5012:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d5016:	10c0      	asrs	r0, r0, #3
   d5018:	4358      	muls	r0, r3
   d501a:	f000 fd4f 	bl	d5abc <malloc>
   d501e:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5020:	2800      	cmp	r0, #0
   d5022:	d1d9      	bne.n	d4fd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d5024:	b004      	add	sp, #16
   d5026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d502a:	2340      	movs	r3, #64	; 0x40
   d502c:	f04f 0c01 	mov.w	ip, #1
   d5030:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d5034:	2352      	movs	r3, #82	; 0x52
   d5036:	3840      	subs	r0, #64	; 0x40
   d5038:	3952      	subs	r1, #82	; 0x52
   d503a:	9300      	str	r3, [sp, #0]
   d503c:	4b7a      	ldr	r3, [pc, #488]	; (d5228 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d503e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5042:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5046:	f340 024f 	sbfx	r2, r0, #1, #16
   d504a:	f341 014f 	sbfx	r1, r1, #1, #16
   d504e:	4620      	mov	r0, r4
   d5050:	f7ff fb0c 	bl	d466c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5054:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d5056:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d505a:	2800      	cmp	r0, #0
   d505c:	d078      	beq.n	d5150 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d505e:	2d00      	cmp	r5, #0
   d5060:	d174      	bne.n	d514c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d5062:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5066:	2b20      	cmp	r3, #32
   d5068:	bf0c      	ite	eq
   d506a:	253c      	moveq	r5, #60	; 0x3c
   d506c:	253d      	movne	r5, #61	; 0x3d
   d506e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d5072:	f1b8 0f00 	cmp.w	r8, #0
   d5076:	d001      	beq.n	d507c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5078:	f001 fab8 	bl	d65ec <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d507c:	b1fe      	cbz	r6, d50be <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d507e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5082:	2800      	cmp	r0, #0
   d5084:	db1b      	blt.n	d50be <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d5086:	2101      	movs	r1, #1
   d5088:	b280      	uxth	r0, r0
   d508a:	f001 fecf 	bl	d6e2c <pinMode>
    digitalWrite(rstPin, HIGH);
   d508e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5092:	2101      	movs	r1, #1
   d5094:	b280      	uxth	r0, r0
   d5096:	f001 feda 	bl	d6e4e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d509a:	2001      	movs	r0, #1
   d509c:	f000 fffa 	bl	d6094 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d50a0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d50a4:	2100      	movs	r1, #0
   d50a6:	b280      	uxth	r0, r0
   d50a8:	f001 fed1 	bl	d6e4e <digitalWrite>
    delay(10);                  // Wait 10 ms
   d50ac:	200a      	movs	r0, #10
   d50ae:	f000 fff1 	bl	d6094 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d50b2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d50b6:	2101      	movs	r1, #1
   d50b8:	b280      	uxth	r0, r0
   d50ba:	f001 fec8 	bl	d6e4e <digitalWrite>
  TRANSACTION_START
   d50be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d50c0:	2800      	cmp	r0, #0
   d50c2:	d074      	beq.n	d51ae <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d50c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d50c6:	f001 fa8d 	bl	d65e4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d50ca:	2204      	movs	r2, #4
   d50cc:	4957      	ldr	r1, [pc, #348]	; (d522c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d50ce:	4620      	mov	r0, r4
   d50d0:	f7ff ff0d 	bl	d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d50d4:	7aa1      	ldrb	r1, [r4, #10]
   d50d6:	3901      	subs	r1, #1
   d50d8:	b2c9      	uxtb	r1, r1
   d50da:	4620      	mov	r0, r4
   d50dc:	f7ff fea0 	bl	d4e20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d50e0:	4953      	ldr	r1, [pc, #332]	; (d5230 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d50e2:	2204      	movs	r2, #4
   d50e4:	4620      	mov	r0, r4
   d50e6:	f7ff ff02 	bl	d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d50ea:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d50ee:	2b01      	cmp	r3, #1
   d50f0:	bf0c      	ite	eq
   d50f2:	2110      	moveq	r1, #16
   d50f4:	2114      	movne	r1, #20
   d50f6:	4620      	mov	r0, r4
   d50f8:	f7ff fe92 	bl	d4e20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d50fc:	2204      	movs	r2, #4
   d50fe:	494d      	ldr	r1, [pc, #308]	; (d5234 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5100:	4620      	mov	r0, r4
   d5102:	f7ff fef4 	bl	d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d5106:	68a3      	ldr	r3, [r4, #8]
   d5108:	4a4b      	ldr	r2, [pc, #300]	; (d5238 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d510a:	4293      	cmp	r3, r2
   d510c:	d15c      	bne.n	d51c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d510e:	494b      	ldr	r1, [pc, #300]	; (d523c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5110:	2204      	movs	r2, #4
   d5112:	4620      	mov	r0, r4
   d5114:	f7ff feeb 	bl	d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d5118:	21d9      	movs	r1, #217	; 0xd9
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff fe80 	bl	d4e20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5120:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5124:	2b01      	cmp	r3, #1
   d5126:	bf0c      	ite	eq
   d5128:	2122      	moveq	r1, #34	; 0x22
   d512a:	21f1      	movne	r1, #241	; 0xf1
   d512c:	4620      	mov	r0, r4
   d512e:	f7ff fe77 	bl	d4e20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5132:	4620      	mov	r0, r4
   d5134:	4942      	ldr	r1, [pc, #264]	; (d5240 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d5136:	2206      	movs	r2, #6
   d5138:	f7ff fed9 	bl	d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d513c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d513e:	2800      	cmp	r0, #0
   d5140:	d063      	beq.n	d520a <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d5142:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5144:	f001 fa4e 	bl	d65e4 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5148:	2001      	movs	r0, #1
   d514a:	e76b      	b.n	d5024 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d514c:	b26d      	sxtb	r5, r5
   d514e:	e78e      	b.n	d506e <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5150:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5154:	2101      	movs	r1, #1
   d5156:	b280      	uxth	r0, r0
   d5158:	f001 fe68 	bl	d6e2c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d515c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5160:	2101      	movs	r1, #1
   d5162:	b280      	uxth	r0, r0
   d5164:	f001 fe62 	bl	d6e2c <pinMode>
    SSD1306_DESELECT
   d5168:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d516c:	2101      	movs	r1, #1
   d516e:	b280      	uxth	r0, r0
   d5170:	f001 fe6d 	bl	d6e4e <digitalWrite>
    if(spi) { // Hardware SPI
   d5174:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5176:	b13d      	cbz	r5, d5188 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5178:	f1b8 0f00 	cmp.w	r8, #0
   d517c:	f43f af7e 	beq.w	d507c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5180:	4628      	mov	r0, r5
   d5182:	f000 fd19 	bl	d5bb8 <_ZN8SPIClass5beginEv>
   d5186:	e779      	b.n	d507c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5188:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d518c:	2101      	movs	r1, #1
   d518e:	b280      	uxth	r0, r0
   d5190:	f001 fe4c 	bl	d6e2c <pinMode>
      pinMode(clkPin , OUTPUT);
   d5194:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5198:	2101      	movs	r1, #1
   d519a:	b280      	uxth	r0, r0
   d519c:	f001 fe46 	bl	d6e2c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d51a0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d51a4:	4629      	mov	r1, r5
   d51a6:	b280      	uxth	r0, r0
   d51a8:	f001 fe51 	bl	d6e4e <digitalWrite>
   d51ac:	e766      	b.n	d507c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d51ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51b0:	b118      	cbz	r0, d51ba <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d51b2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d51b6:	f000 fd29 	bl	d5c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d51ba:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d51be:	2100      	movs	r1, #0
   d51c0:	b280      	uxth	r0, r0
   d51c2:	f001 fe44 	bl	d6e4e <digitalWrite>
   d51c6:	e780      	b.n	d50ca <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d51c8:	4a1e      	ldr	r2, [pc, #120]	; (d5244 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d51ca:	4293      	cmp	r3, r2
   d51cc:	d10e      	bne.n	d51ec <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d51ce:	491e      	ldr	r1, [pc, #120]	; (d5248 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d51d0:	2203      	movs	r2, #3
   d51d2:	4620      	mov	r0, r4
   d51d4:	f7ff fe8b 	bl	d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d51d8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d51dc:	2b01      	cmp	r3, #1
   d51de:	bf0c      	ite	eq
   d51e0:	219f      	moveq	r1, #159	; 0x9f
   d51e2:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d51e4:	4620      	mov	r0, r4
   d51e6:	f7ff fe1b 	bl	d4e20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d51ea:	e795      	b.n	d5118 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d51ec:	4a17      	ldr	r2, [pc, #92]	; (d524c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d51ee:	4293      	cmp	r3, r2
   d51f0:	d192      	bne.n	d5118 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d51f2:	4917      	ldr	r1, [pc, #92]	; (d5250 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d51f4:	2203      	movs	r2, #3
   d51f6:	4620      	mov	r0, r4
   d51f8:	f7ff fe79 	bl	d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d51fc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5200:	2b01      	cmp	r3, #1
   d5202:	bf0c      	ite	eq
   d5204:	2110      	moveq	r1, #16
   d5206:	21af      	movne	r1, #175	; 0xaf
   d5208:	e7ec      	b.n	d51e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d520a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d520e:	2101      	movs	r1, #1
   d5210:	b280      	uxth	r0, r0
   d5212:	f001 fe1c 	bl	d6e4e <digitalWrite>
   d5216:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5218:	2800      	cmp	r0, #0
   d521a:	d095      	beq.n	d5148 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d521c:	f000 fcdd 	bl	d5bda <_ZN8SPIClass14endTransactionEv>
   d5220:	e792      	b.n	d5148 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5222:	bf00      	nop
   d5224:	000d7af8 	.word	0x000d7af8
   d5228:	000d7838 	.word	0x000d7838
   d522c:	000d7d40 	.word	0x000d7d40
   d5230:	000d7d44 	.word	0x000d7d44
   d5234:	000d7d48 	.word	0x000d7d48
   d5238:	00200080 	.word	0x00200080
   d523c:	000d7d52 	.word	0x000d7d52
   d5240:	000d7d4c 	.word	0x000d7d4c
   d5244:	00400080 	.word	0x00400080
   d5248:	000d7d56 	.word	0x000d7d56
   d524c:	00100060 	.word	0x00100060
   d5250:	000d7d59 	.word	0x000d7d59

000d5254 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5254:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5256:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5258:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d525c:	db3d      	blt.n	d52da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d525e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5262:	4294      	cmp	r4, r2
   d5264:	dd39      	ble.n	d52da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d5266:	2900      	cmp	r1, #0
      w += x;
   d5268:	bfbe      	ittt	lt
   d526a:	185b      	addlt	r3, r3, r1
   d526c:	b21b      	sxthlt	r3, r3
      x  = 0;
   d526e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5270:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5274:	18ce      	adds	r6, r1, r3
   d5276:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5278:	bfc4      	itt	gt
   d527a:	1a63      	subgt	r3, r4, r1
   d527c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d527e:	2b00      	cmp	r3, #0
   d5280:	dd2b      	ble.n	d52da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5282:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5284:	10d6      	asrs	r6, r2, #3
   d5286:	fb14 1106 	smlabb	r1, r4, r6, r1
   d528a:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d528c:	f002 0007 	and.w	r0, r2, #7
   d5290:	2201      	movs	r2, #1
   d5292:	4082      	lsls	r2, r0
      switch(color) {
   d5294:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5296:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5298:	d016      	beq.n	d52c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d529a:	2d02      	cmp	r5, #2
   d529c:	d00b      	beq.n	d52b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d529e:	b9e5      	cbnz	r5, d52da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d52a0:	43d2      	mvns	r2, r2
   d52a2:	b2d2      	uxtb	r2, r2
   d52a4:	440b      	add	r3, r1
   d52a6:	4299      	cmp	r1, r3
   d52a8:	d017      	beq.n	d52da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d52aa:	f811 0b01 	ldrb.w	r0, [r1], #1
   d52ae:	4010      	ands	r0, r2
   d52b0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d52b4:	e7f7      	b.n	d52a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d52b6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d52b8:	4299      	cmp	r1, r3
   d52ba:	d00e      	beq.n	d52da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d52bc:	f811 0b01 	ldrb.w	r0, [r1], #1
   d52c0:	4050      	eors	r0, r2
   d52c2:	f801 0c01 	strb.w	r0, [r1, #-1]
   d52c6:	e7f7      	b.n	d52b8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d52c8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d52ca:	4299      	cmp	r1, r3
   d52cc:	d005      	beq.n	d52da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d52ce:	f811 0b01 	ldrb.w	r0, [r1], #1
   d52d2:	4310      	orrs	r0, r2
   d52d4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d52d8:	e7f7      	b.n	d52ca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d52da:	bd70      	pop	{r4, r5, r6, pc}

000d52dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d52dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d52de:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d52e0:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d52e4:	db76      	blt.n	d53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d52e6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d52ea:	42a9      	cmp	r1, r5
   d52ec:	da72      	bge.n	d53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d52ee:	2a00      	cmp	r2, #0
      __h += __y;
   d52f0:	bfbc      	itt	lt
   d52f2:	18d2      	addlt	r2, r2, r3
   d52f4:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d52f6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d52fa:	bfb8      	it	lt
   d52fc:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d52fe:	18d7      	adds	r7, r2, r3
   d5300:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5302:	bfc4      	itt	gt
   d5304:	1aa3      	subgt	r3, r4, r2
   d5306:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5308:	2b00      	cmp	r3, #0
   d530a:	dd63      	ble.n	d53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d530c:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5310:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5312:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5316:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d531a:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d531c:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5320:	d023      	beq.n	d536a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5322:	f1c2 0208 	rsb	r2, r2, #8
   d5326:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5328:	4d2c      	ldr	r5, [pc, #176]	; (d53dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d532a:	4293      	cmp	r3, r2
   d532c:	bf3c      	itt	cc
   d532e:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5332:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5336:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5338:	bf3c      	itt	cc
   d533a:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d533e:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5342:	2e01      	cmp	r6, #1
   d5344:	d007      	beq.n	d5356 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5346:	2e02      	cmp	r6, #2
   d5348:	d02e      	beq.n	d53a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d534a:	b94e      	cbnz	r6, d5360 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d534c:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5350:	ea2c 0505 	bic.w	r5, ip, r5
   d5354:	e003      	b.n	d535e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5356:	f817 c001 	ldrb.w	ip, [r7, r1]
   d535a:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d535e:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5360:	4293      	cmp	r3, r2
   d5362:	d337      	bcc.n	d53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5364:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5368:	440c      	add	r4, r1
        h -= mod;
   d536a:	1a9a      	subs	r2, r3, r2
   d536c:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d536e:	2a07      	cmp	r2, #7
   d5370:	d90e      	bls.n	d5390 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5372:	2e02      	cmp	r6, #2
   d5374:	d11d      	bne.n	d53b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5376:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5378:	7821      	ldrb	r1, [r4, #0]
   d537a:	43c9      	mvns	r1, r1
   d537c:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d537e:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5380:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5384:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5386:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5388:	440c      	add	r4, r1
            } while(h >= 8);
   d538a:	d8f5      	bhi.n	d5378 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d538c:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5390:	b302      	cbz	r2, d53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5392:	4b13      	ldr	r3, [pc, #76]	; (d53e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5394:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5396:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5398:	d019      	beq.n	d53ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d539a:	2e02      	cmp	r6, #2
   d539c:	d01b      	beq.n	d53d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d539e:	b9ce      	cbnz	r6, d53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d53a0:	7822      	ldrb	r2, [r4, #0]
   d53a2:	ea22 0303 	bic.w	r3, r2, r3
   d53a6:	e014      	b.n	d53d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d53a8:	f817 c001 	ldrb.w	ip, [r7, r1]
   d53ac:	ea85 050c 	eor.w	r5, r5, ip
   d53b0:	e7d5      	b.n	d535e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d53b2:	2e00      	cmp	r6, #0
   d53b4:	bf14      	ite	ne
   d53b6:	25ff      	movne	r5, #255	; 0xff
   d53b8:	2500      	moveq	r5, #0
   d53ba:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d53bc:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d53be:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d53c0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d53c4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d53c6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d53c8:	440c      	add	r4, r1
            } while(h >= 8);
   d53ca:	d8f7      	bhi.n	d53bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d53cc:	e7de      	b.n	d538c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d53ce:	7822      	ldrb	r2, [r4, #0]
   d53d0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d53d2:	7023      	strb	r3, [r4, #0]
}
   d53d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d53d6:	7822      	ldrb	r2, [r4, #0]
   d53d8:	4053      	eors	r3, r2
   d53da:	e7fa      	b.n	d53d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d53dc:	000d7d30 	.word	0x000d7d30
   d53e0:	000d7d38 	.word	0x000d7d38

000d53e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d53e4:	b470      	push	{r4, r5, r6}
   d53e6:	4614      	mov	r4, r2
  switch(rotation) {
   d53e8:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d53ea:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d53ee:	2a02      	cmp	r2, #2
   d53f0:	d00d      	beq.n	d540e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d53f2:	2a03      	cmp	r2, #3
   d53f4:	d018      	beq.n	d5428 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d53f6:	2a01      	cmp	r2, #1
   d53f8:	d111      	bne.n	d541e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d53fa:	8902      	ldrh	r2, [r0, #8]
   d53fc:	43e4      	mvns	r4, r4
   d53fe:	4414      	add	r4, r2
   d5400:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5402:	9603      	str	r6, [sp, #12]
   d5404:	460a      	mov	r2, r1
   d5406:	4621      	mov	r1, r4
}
   d5408:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d540a:	f7ff bf67 	b.w	d52dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d540e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5410:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5412:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5414:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5416:	4414      	add	r4, r2
    x -= (w-1);
   d5418:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d541a:	b224      	sxth	r4, r4
    x -= (w-1);
   d541c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d541e:	9603      	str	r6, [sp, #12]
   d5420:	4622      	mov	r2, r4
}
   d5422:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5424:	f7ff bf16 	b.w	d5254 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5428:	8945      	ldrh	r5, [r0, #10]
   d542a:	4419      	add	r1, r3
   d542c:	1a69      	subs	r1, r5, r1
   d542e:	b209      	sxth	r1, r1
    break;
   d5430:	e7e7      	b.n	d5402 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5432 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5432:	b430      	push	{r4, r5}
   d5434:	4614      	mov	r4, r2
  switch(rotation) {
   d5436:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5438:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d543c:	2a02      	cmp	r2, #2
   d543e:	d00d      	beq.n	d545c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5440:	2a03      	cmp	r2, #3
   d5442:	d018      	beq.n	d5476 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5444:	2a01      	cmp	r2, #1
   d5446:	d111      	bne.n	d546c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5448:	18e2      	adds	r2, r4, r3
   d544a:	8904      	ldrh	r4, [r0, #8]
   d544c:	1aa4      	subs	r4, r4, r2
   d544e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5450:	9502      	str	r5, [sp, #8]
   d5452:	460a      	mov	r2, r1
   d5454:	4621      	mov	r1, r4
}
   d5456:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5458:	f7ff befc 	b.w	d5254 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d545c:	8902      	ldrh	r2, [r0, #8]
   d545e:	43c9      	mvns	r1, r1
   d5460:	4411      	add	r1, r2
    y -= (h-1);
   d5462:	18e2      	adds	r2, r4, r3
   d5464:	8944      	ldrh	r4, [r0, #10]
   d5466:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5468:	b209      	sxth	r1, r1
    y -= (h-1);
   d546a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d546c:	9502      	str	r5, [sp, #8]
   d546e:	4622      	mov	r2, r4
}
   d5470:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5472:	f7ff bf33 	b.w	d52dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5476:	8942      	ldrh	r2, [r0, #10]
   d5478:	43c9      	mvns	r1, r1
   d547a:	4411      	add	r1, r2
   d547c:	b209      	sxth	r1, r1
    break;
   d547e:	e7e7      	b.n	d5450 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5480 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5484:	4604      	mov	r4, r0
  TRANSACTION_START
   d5486:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5488:	2800      	cmp	r0, #0
   d548a:	d042      	beq.n	d5512 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d548c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d548e:	f001 f8a9 	bl	d65e4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5492:	4947      	ldr	r1, [pc, #284]	; (d55b0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5494:	2205      	movs	r2, #5
   d5496:	4620      	mov	r0, r4
   d5498:	f7ff fd29 	bl	d4eee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d549c:	7a21      	ldrb	r1, [r4, #8]
   d549e:	3901      	subs	r1, #1
   d54a0:	4620      	mov	r0, r4
   d54a2:	b2c9      	uxtb	r1, r1
   d54a4:	f7ff fcbc 	bl	d4e20 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d54a8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d54ac:	1dde      	adds	r6, r3, #7
   d54ae:	bf48      	it	mi
   d54b0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d54b4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d54b8:	8923      	ldrh	r3, [r4, #8]
   d54ba:	10f6      	asrs	r6, r6, #3
   d54bc:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d54c0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d54c4:	2800      	cmp	r0, #0
   d54c6:	d03a      	beq.n	d553e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d54c8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d54cc:	f001 f898 	bl	d6600 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d54d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54d2:	6803      	ldr	r3, [r0, #0]
   d54d4:	2140      	movs	r1, #64	; 0x40
   d54d6:	689b      	ldr	r3, [r3, #8]
   d54d8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d54da:	2701      	movs	r7, #1
    while(count--) {
   d54dc:	42b5      	cmp	r5, r6
   d54de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54e0:	d024      	beq.n	d552c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d54e2:	2f1f      	cmp	r7, #31
   d54e4:	d90c      	bls.n	d5500 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d54e6:	f001 f892 	bl	d660e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d54ea:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d54ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54f0:	f001 f886 	bl	d6600 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d54f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54f6:	6803      	ldr	r3, [r0, #0]
   d54f8:	2140      	movs	r1, #64	; 0x40
   d54fa:	689b      	ldr	r3, [r3, #8]
   d54fc:	4798      	blx	r3
        bytesOut = 1;
   d54fe:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5500:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5502:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5506:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5508:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d550a:	689b      	ldr	r3, [r3, #8]
   d550c:	4798      	blx	r3
      bytesOut++;
   d550e:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5510:	e7e4      	b.n	d54dc <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5512:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5514:	b118      	cbz	r0, d551e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5516:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d551a:	f000 fb77 	bl	d5c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d551e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5522:	2100      	movs	r1, #0
   d5524:	b280      	uxth	r0, r0
   d5526:	f001 fc92 	bl	d6e4e <digitalWrite>
   d552a:	e7b2      	b.n	d5492 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d552c:	f001 f86f 	bl	d660e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5530:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5532:	b378      	cbz	r0, d5594 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5534:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5536:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d553a:	f001 b853 	b.w	d65e4 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d553e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5542:	2101      	movs	r1, #1
   d5544:	b280      	uxth	r0, r0
   d5546:	f001 fc82 	bl	d6e4e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d554a:	42b5      	cmp	r5, r6
   d554c:	d0f0      	beq.n	d5530 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d554e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5550:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5554:	b118      	cbz	r0, d555e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5556:	4649      	mov	r1, r9
   d5558:	f000 fbc6 	bl	d5ce8 <_ZN8SPIClass8transferEh>
   d555c:	e7f5      	b.n	d554a <_ZN16Adafruit_SSD13067displayEv+0xca>
   d555e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5560:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5564:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5568:	ea09 0108 	and.w	r1, r9, r8
   d556c:	b280      	uxth	r0, r0
   d556e:	f001 fc6e 	bl	d6e4e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5572:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5576:	2101      	movs	r1, #1
   d5578:	b280      	uxth	r0, r0
   d557a:	f001 fc68 	bl	d6e4e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d557e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5582:	2100      	movs	r1, #0
   d5584:	b280      	uxth	r0, r0
   d5586:	f001 fc62 	bl	d6e4e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d558a:	3f01      	subs	r7, #1
   d558c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5590:	d1e8      	bne.n	d5564 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5592:	e7da      	b.n	d554a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5594:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5598:	2101      	movs	r1, #1
   d559a:	b280      	uxth	r0, r0
   d559c:	f001 fc57 	bl	d6e4e <digitalWrite>
   d55a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d55a2:	b118      	cbz	r0, d55ac <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d55a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d55a8:	f000 bb17 	b.w	d5bda <_ZN8SPIClass14endTransactionEv>
}
   d55ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d55b0:	000d7d5c 	.word	0x000d7d5c

000d55b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <netdb_freeaddrinfo+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	689b      	ldr	r3, [r3, #8]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030268 	.word	0x00030268

000d55c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <netdb_getaddrinfo+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	68db      	ldr	r3, [r3, #12]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030268 	.word	0x00030268

000d55d4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <HAL_Pin_Mode+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	689b      	ldr	r3, [r3, #8]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	0003022c 	.word	0x0003022c

000d55e4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <HAL_Get_Pin_Mode+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	68db      	ldr	r3, [r3, #12]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	0003022c 	.word	0x0003022c

000d55f4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <HAL_GPIO_Write+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	691b      	ldr	r3, [r3, #16]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	0003022c 	.word	0x0003022c

000d5604 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <HAL_GPIO_Read+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	695b      	ldr	r3, [r3, #20]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	0003022c 	.word	0x0003022c

000d5614 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <HAL_Interrupts_Attach+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	699b      	ldr	r3, [r3, #24]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	0003022c 	.word	0x0003022c

000d5624 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <HAL_Interrupts_Detach+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	69db      	ldr	r3, [r3, #28]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	0003022c 	.word	0x0003022c

000d5634 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <HAL_Interrupts_Enable_All+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	6a1b      	ldr	r3, [r3, #32]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	0003022c 	.word	0x0003022c

000d5644 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <if_index_to_name+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	695b      	ldr	r3, [r3, #20]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	0003026c 	.word	0x0003026c

000d5654 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <HAL_RNG_GetRandomNumber+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	685b      	ldr	r3, [r3, #4]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030218 	.word	0x00030218

000d5664 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <HAL_Delay_Microseconds+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	68db      	ldr	r3, [r3, #12]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030218 	.word	0x00030218

000d5674 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	695b      	ldr	r3, [r3, #20]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030218 	.word	0x00030218

000d5684 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <os_mutex_create+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030248 	.word	0x00030248

000d5694 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <os_mutex_destroy+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030248 	.word	0x00030248

000d56a4 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <os_mutex_recursive_create+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030248 	.word	0x00030248

000d56b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <os_mutex_recursive_destroy+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030248 	.word	0x00030248

000d56c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <inet_inet_ntop+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	695b      	ldr	r3, [r3, #20]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030264 	.word	0x00030264

000d56d4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <inet_htonl+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6a1b      	ldr	r3, [r3, #32]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030264 	.word	0x00030264

000d56e4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <inet_htons+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030264 	.word	0x00030264

000d56f4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <hal_usart_init+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	681b      	ldr	r3, [r3, #0]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	0003023c 	.word	0x0003023c

000d5704 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <hal_usart_write+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	68db      	ldr	r3, [r3, #12]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	0003023c 	.word	0x0003023c

000d5714 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <hal_usart_available+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	691b      	ldr	r3, [r3, #16]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	0003023c 	.word	0x0003023c

000d5724 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <hal_usart_read+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	695b      	ldr	r3, [r3, #20]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003023c 	.word	0x0003023c

000d5734 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <hal_usart_peek+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	699b      	ldr	r3, [r3, #24]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003023c 	.word	0x0003023c

000d5744 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <hal_usart_flush+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	69db      	ldr	r3, [r3, #28]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003023c 	.word	0x0003023c

000d5754 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <hal_usart_is_enabled+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	6a1b      	ldr	r3, [r3, #32]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003023c 	.word	0x0003023c

000d5764 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <hal_usart_available_data_for_write+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003023c 	.word	0x0003023c

000d5774 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <hal_i2c_set_speed+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	681b      	ldr	r3, [r3, #0]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030228 	.word	0x00030228

000d5784 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <hal_i2c_begin+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	68db      	ldr	r3, [r3, #12]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030228 	.word	0x00030228

000d5794 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <hal_i2c_begin_transmission+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	699b      	ldr	r3, [r3, #24]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030228 	.word	0x00030228

000d57a4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <hal_i2c_end_transmission+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	69db      	ldr	r3, [r3, #28]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030228 	.word	0x00030228

000d57b4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <hal_i2c_write+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6a1b      	ldr	r3, [r3, #32]
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030228 	.word	0x00030228

000d57c4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <hal_i2c_available+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030228 	.word	0x00030228

000d57d4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <hal_i2c_read+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030228 	.word	0x00030228

000d57e4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <hal_i2c_peek+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030228 	.word	0x00030228

000d57f4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <hal_i2c_flush+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030228 	.word	0x00030228

000d5804 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <hal_i2c_is_enabled+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030228 	.word	0x00030228

000d5814 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <hal_i2c_init+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030228 	.word	0x00030228

000d5824 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <sock_setsockopt+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	699b      	ldr	r3, [r3, #24]
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030238 	.word	0x00030238

000d5834 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <sock_close+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	69db      	ldr	r3, [r3, #28]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030238 	.word	0x00030238

000d5844 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <sock_connect+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	6a1b      	ldr	r3, [r3, #32]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030238 	.word	0x00030238

000d5854 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <sock_recv+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	00030238 	.word	0x00030238

000d5864 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <sock_send+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	00030238 	.word	0x00030238

000d5874 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <sock_socket+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	00030238 	.word	0x00030238

000d5884 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <hal_spi_begin+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	681b      	ldr	r3, [r3, #0]
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	00030230 	.word	0x00030230

000d5894 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <hal_spi_transfer+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	695b      	ldr	r3, [r3, #20]
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	00030230 	.word	0x00030230

000d58a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <hal_spi_init+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	69db      	ldr	r3, [r3, #28]
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	00030230 	.word	0x00030230

000d58b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <hal_spi_is_enabled+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	6a1b      	ldr	r3, [r3, #32]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	00030230 	.word	0x00030230

000d58c4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <hal_spi_info+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	00030230 	.word	0x00030230

000d58d4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <hal_spi_set_settings+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	00030230 	.word	0x00030230

000d58e4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <hal_spi_acquire+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	00030230 	.word	0x00030230

000d58f4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <hal_spi_release+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030230 	.word	0x00030230

000d5904 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <HAL_USB_USART_Init+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	681b      	ldr	r3, [r3, #0]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	0003024c 	.word	0x0003024c

000d5914 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <HAL_USB_USART_Begin+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	685b      	ldr	r3, [r3, #4]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	0003024c 	.word	0x0003024c

000d5924 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <HAL_USB_USART_Available_Data+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	691b      	ldr	r3, [r3, #16]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	0003024c 	.word	0x0003024c

000d5934 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	695b      	ldr	r3, [r3, #20]
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	0003024c 	.word	0x0003024c

000d5944 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <HAL_USB_USART_Receive_Data+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	699b      	ldr	r3, [r3, #24]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	0003024c 	.word	0x0003024c

000d5954 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <HAL_USB_USART_Send_Data+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	69db      	ldr	r3, [r3, #28]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	0003024c 	.word	0x0003024c

000d5964 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <HAL_USB_USART_Flush_Data+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	6a1b      	ldr	r3, [r3, #32]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	0003024c 	.word	0x0003024c

000d5974 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <panic_+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030260 	.word	0x00030260

000d5984 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <log_message+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030260 	.word	0x00030260

000d5994 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <set_system_mode+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	685b      	ldr	r3, [r3, #4]
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030220 	.word	0x00030220

000d59a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <system_delay_ms+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	695b      	ldr	r3, [r3, #20]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030220 	.word	0x00030220

000d59b4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <system_thread_set_state+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	00030220 	.word	0x00030220

000d59c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b03      	ldr	r3, [pc, #12]	; (d59d4 <system_ctrl_set_app_request_handler+0x10>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d59ce:	9301      	str	r3, [sp, #4]
   d59d0:	bd08      	pop	{r3, pc}
   d59d2:	0000      	.short	0x0000
   d59d4:	00030220 	.word	0x00030220

000d59d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b03      	ldr	r3, [pc, #12]	; (d59e8 <system_ctrl_set_result+0x10>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d59e2:	9301      	str	r3, [sp, #4]
   d59e4:	bd08      	pop	{r3, pc}
   d59e6:	0000      	.short	0x0000
   d59e8:	00030220 	.word	0x00030220

000d59ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <network_connect+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	685b      	ldr	r3, [r3, #4]
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	00030240 	.word	0x00030240

000d59fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <network_connecting+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	689b      	ldr	r3, [r3, #8]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	00030240 	.word	0x00030240

000d5a0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <network_disconnect+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	68db      	ldr	r3, [r3, #12]
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	00030240 	.word	0x00030240

000d5a1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <network_ready+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	691b      	ldr	r3, [r3, #16]
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	00030240 	.word	0x00030240

000d5a2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <network_on+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	695b      	ldr	r3, [r3, #20]
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	00030240 	.word	0x00030240

000d5a3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <network_off+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	699b      	ldr	r3, [r3, #24]
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030240 	.word	0x00030240

000d5a4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <network_listen+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	69db      	ldr	r3, [r3, #28]
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030240 	.word	0x00030240

000d5a5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <network_listening+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	6a1b      	ldr	r3, [r3, #32]
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030240 	.word	0x00030240

000d5a6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <network_set_listen_timeout+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030240 	.word	0x00030240

000d5a7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <network_get_listen_timeout+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030240 	.word	0x00030240

000d5a8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <network_is_on+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030240 	.word	0x00030240

000d5a9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <network_is_off+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030240 	.word	0x00030240

000d5aac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030244 	.word	0x00030244

000d5abc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <malloc+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	681b      	ldr	r3, [r3, #0]
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	0003021c 	.word	0x0003021c

000d5acc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <free+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	685b      	ldr	r3, [r3, #4]
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	0003021c 	.word	0x0003021c

000d5adc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <realloc+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	689b      	ldr	r3, [r3, #8]
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	0003021c 	.word	0x0003021c

000d5aec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <vsnprintf+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	0003021c 	.word	0x0003021c

000d5afc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <__errno+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	0003021c 	.word	0x0003021c

000d5b0c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <newlib_impure_ptr_callback+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	0003021c 	.word	0x0003021c

000d5b1c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b1c:	2200      	movs	r2, #0
   d5b1e:	6840      	ldr	r0, [r0, #4]
   d5b20:	4611      	mov	r1, r2
   d5b22:	f7ff bf9b 	b.w	d5a5c <network_listening>

000d5b26 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5b26:	2200      	movs	r2, #0
   d5b28:	6840      	ldr	r0, [r0, #4]
   d5b2a:	4611      	mov	r1, r2
   d5b2c:	f7ff bfa6 	b.w	d5a7c <network_get_listen_timeout>

000d5b30 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5b30:	6840      	ldr	r0, [r0, #4]
   d5b32:	2200      	movs	r2, #0
   d5b34:	f7ff bf9a 	b.w	d5a6c <network_set_listen_timeout>

000d5b38 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b38:	6840      	ldr	r0, [r0, #4]
   d5b3a:	2200      	movs	r2, #0
   d5b3c:	f081 0101 	eor.w	r1, r1, #1
   d5b40:	f7ff bf84 	b.w	d5a4c <network_listen>

000d5b44 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5b44:	2300      	movs	r3, #0
   d5b46:	6840      	ldr	r0, [r0, #4]
   d5b48:	461a      	mov	r2, r3
   d5b4a:	4619      	mov	r1, r3
   d5b4c:	f7ff bf76 	b.w	d5a3c <network_off>

000d5b50 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5b50:	2300      	movs	r3, #0
   d5b52:	6840      	ldr	r0, [r0, #4]
   d5b54:	461a      	mov	r2, r3
   d5b56:	4619      	mov	r1, r3
   d5b58:	f7ff bf68 	b.w	d5a2c <network_on>

000d5b5c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b5c:	2200      	movs	r2, #0
   d5b5e:	6840      	ldr	r0, [r0, #4]
   d5b60:	4611      	mov	r1, r2
   d5b62:	f7ff bf5b 	b.w	d5a1c <network_ready>

000d5b66 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5b66:	2200      	movs	r2, #0
   d5b68:	6840      	ldr	r0, [r0, #4]
   d5b6a:	4611      	mov	r1, r2
   d5b6c:	f7ff bf46 	b.w	d59fc <network_connecting>

000d5b70 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b70:	6840      	ldr	r0, [r0, #4]
   d5b72:	2200      	movs	r2, #0
   d5b74:	2102      	movs	r1, #2
   d5b76:	f7ff bf49 	b.w	d5a0c <network_disconnect>

000d5b7a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5b7a:	2300      	movs	r3, #0
   d5b7c:	6840      	ldr	r0, [r0, #4]
   d5b7e:	461a      	mov	r2, r3
   d5b80:	f7ff bf34 	b.w	d59ec <network_connect>

000d5b84 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b84:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b86:	2203      	movs	r2, #3
   d5b88:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b8a:	4a02      	ldr	r2, [pc, #8]	; (d5b94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b8c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5b8e:	4770      	bx	lr
   d5b90:	2003e650 	.word	0x2003e650
   d5b94:	000d7d6c 	.word	0x000d7d6c

000d5b98 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5b98:	2100      	movs	r1, #0
   d5b9a:	f7ff bea3 	b.w	d58e4 <hal_spi_acquire>

000d5b9e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5b9e:	2100      	movs	r1, #0
   d5ba0:	f7ff bea8 	b.w	d58f4 <hal_spi_release>

000d5ba4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5ba4:	b510      	push	{r4, lr}
   d5ba6:	4604      	mov	r4, r0
   d5ba8:	4608      	mov	r0, r1
{
    _spi = spi;
   d5baa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5bac:	f7ff fe7a 	bl	d58a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5bb0:	2300      	movs	r3, #0
   d5bb2:	6063      	str	r3, [r4, #4]
}
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	bd10      	pop	{r4, pc}

000d5bb8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5bb8:	b510      	push	{r4, lr}
   d5bba:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5bbc:	7800      	ldrb	r0, [r0, #0]
   d5bbe:	f7ff ffeb 	bl	d5b98 <_ZN8SPIClass4lockEv.isra.0>
   d5bc2:	b948      	cbnz	r0, d5bd8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5bc4:	7820      	ldrb	r0, [r4, #0]
   d5bc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5bca:	f7ff fe5b 	bl	d5884 <hal_spi_begin>
        unlock();
   d5bce:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5bd4:	f7ff bfe3 	b.w	d5b9e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5bd8:	bd10      	pop	{r4, pc}

000d5bda <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5bda:	7800      	ldrb	r0, [r0, #0]
   d5bdc:	f7ff bfdf 	b.w	d5b9e <_ZN8SPIClass6unlockEv.isra.0>

000d5be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5be0:	0840      	lsrs	r0, r0, #1
{
   d5be2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5be4:	6018      	str	r0, [r3, #0]
   d5be6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5be8:	6818      	ldr	r0, [r3, #0]
   d5bea:	4288      	cmp	r0, r1
   d5bec:	b2e5      	uxtb	r5, r4
   d5bee:	d906      	bls.n	d5bfe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5bf0:	3401      	adds	r4, #1
   d5bf2:	2c08      	cmp	r4, #8
   d5bf4:	d002      	beq.n	d5bfc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5bf6:	0840      	lsrs	r0, r0, #1
   d5bf8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5bfa:	e7f5      	b.n	d5be8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5bfc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5c00:	5d5b      	ldrb	r3, [r3, r5]
   d5c02:	7013      	strb	r3, [r2, #0]
}
   d5c04:	bd30      	pop	{r4, r5, pc}
   d5c06:	bf00      	nop
   d5c08:	000d7da0 	.word	0x000d7da0

000d5c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c10:	4606      	mov	r6, r0
   d5c12:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5c14:	7800      	ldrb	r0, [r0, #0]
{
   d5c16:	460c      	mov	r4, r1
    CHECK(lock());
   d5c18:	f7ff ffbe 	bl	d5b98 <_ZN8SPIClass4lockEv.isra.0>
   d5c1c:	2800      	cmp	r0, #0
   d5c1e:	db1b      	blt.n	d5c58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5c20:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5c22:	2214      	movs	r2, #20
   d5c24:	2100      	movs	r1, #0
   d5c26:	a809      	add	r0, sp, #36	; 0x24
   d5c28:	f001 fab6 	bl	d7198 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5c2c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5c2e:	2200      	movs	r2, #0
   d5c30:	a909      	add	r1, sp, #36	; 0x24
   d5c32:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5c34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5c38:	f7ff fe44 	bl	d58c4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5c3c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5c40:	b113      	cbz	r3, d5c48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5c42:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5c46:	b155      	cbz	r5, d5c5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5c48:	2700      	movs	r7, #0
   d5c4a:	46b9      	mov	r9, r7
   d5c4c:	46b8      	mov	r8, r7
   d5c4e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5c50:	7923      	ldrb	r3, [r4, #4]
   d5c52:	b15d      	cbz	r5, d5c6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5c54:	b1c3      	cbz	r3, d5c88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5c56:	2000      	movs	r0, #0
}
   d5c58:	b00f      	add	sp, #60	; 0x3c
   d5c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5c5e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5c62:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5c66:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5c6a:	e7f1      	b.n	d5c50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5c6c:	2b00      	cmp	r3, #0
   d5c6e:	d135      	bne.n	d5cdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5c70:	68a3      	ldr	r3, [r4, #8]
   d5c72:	4543      	cmp	r3, r8
   d5c74:	d108      	bne.n	d5c88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5c76:	f88d 9020 	strb.w	r9, [sp, #32]
   d5c7a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5c7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5c82:	89a3      	ldrh	r3, [r4, #12]
   d5c84:	429a      	cmp	r2, r3
   d5c86:	d0e6      	beq.n	d5c56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5c88:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5c8a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5c8c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5c90:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5c92:	ab04      	add	r3, sp, #16
   d5c94:	f10d 020f 	add.w	r2, sp, #15
   d5c98:	f7ff ffa2 	bl	d5be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5c9c:	7921      	ldrb	r1, [r4, #4]
   d5c9e:	b985      	cbnz	r5, d5cc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5ca0:	b989      	cbnz	r1, d5cc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5ca2:	68a3      	ldr	r3, [r4, #8]
   d5ca4:	4543      	cmp	r3, r8
   d5ca6:	d30e      	bcc.n	d5cc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5ca8:	f88d 9020 	strb.w	r9, [sp, #32]
   d5cac:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5cb0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5cb4:	89a3      	ldrh	r3, [r4, #12]
   d5cb6:	429a      	cmp	r2, r3
   d5cb8:	d105      	bne.n	d5cc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5cba:	9b04      	ldr	r3, [sp, #16]
   d5cbc:	4543      	cmp	r3, r8
   d5cbe:	d102      	bne.n	d5cc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5cc0:	e7c9      	b.n	d5c56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5cc2:	2900      	cmp	r1, #0
   d5cc4:	d1f9      	bne.n	d5cba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5cc6:	2300      	movs	r3, #0
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	7b63      	ldrb	r3, [r4, #13]
   d5ccc:	9300      	str	r3, [sp, #0]
   d5cce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5cd2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5cd4:	7830      	ldrb	r0, [r6, #0]
   d5cd6:	f7ff fdfd 	bl	d58d4 <hal_spi_set_settings>
   d5cda:	e7bc      	b.n	d5c56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5cdc:	e9cd 5500 	strd	r5, r5, [sp]
   d5ce0:	462b      	mov	r3, r5
   d5ce2:	462a      	mov	r2, r5
   d5ce4:	2101      	movs	r1, #1
   d5ce6:	e7f5      	b.n	d5cd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5ce8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5ce8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5cea:	7800      	ldrb	r0, [r0, #0]
   d5cec:	f7ff fdd2 	bl	d5894 <hal_spi_transfer>
}
   d5cf0:	b2c0      	uxtb	r0, r0
   d5cf2:	bd08      	pop	{r3, pc}

000d5cf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5cf4:	b510      	push	{r4, lr}
   d5cf6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5cf8:	6800      	ldr	r0, [r0, #0]
   d5cfa:	b118      	cbz	r0, d5d04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5cfc:	f7ff fee6 	bl	d5acc <free>
            wakeupSource_ = nullptr;
   d5d00:	2300      	movs	r3, #0
   d5d02:	6023      	str	r3, [r4, #0]
        }
    }
   d5d04:	bd10      	pop	{r4, pc}

000d5d06 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5d06:	b510      	push	{r4, lr}
   d5d08:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5d0a:	f7ff fff3 	bl	d5cf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5d0e:	4620      	mov	r0, r4
   d5d10:	bd10      	pop	{r4, pc}
	...

000d5d14 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5d14:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5d16:	4b09      	ldr	r3, [pc, #36]	; (d5d3c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5d18:	4c09      	ldr	r4, [pc, #36]	; (d5d40 <_GLOBAL__sub_I_System+0x2c>)
   d5d1a:	2202      	movs	r2, #2
   d5d1c:	2000      	movs	r0, #0
   d5d1e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5d20:	4b08      	ldr	r3, [pc, #32]	; (d5d44 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5d22:	6020      	str	r0, [r4, #0]
   d5d24:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5d26:	71a0      	strb	r0, [r4, #6]
   d5d28:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5d2a:	f7ff fe33 	bl	d5994 <set_system_mode>
SystemClass System;
   d5d2e:	4620      	mov	r0, r4
   d5d30:	4a05      	ldr	r2, [pc, #20]	; (d5d48 <_GLOBAL__sub_I_System+0x34>)
   d5d32:	4906      	ldr	r1, [pc, #24]	; (d5d4c <_GLOBAL__sub_I_System+0x38>)
   d5d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5d38:	f001 b8f6 	b.w	d6f28 <__aeabi_atexit>
   d5d3c:	2003e664 	.word	0x2003e664
   d5d40:	2003e658 	.word	0x2003e658
   d5d44:	ffff0000 	.word	0xffff0000
   d5d48:	2003e56c 	.word	0x2003e56c
   d5d4c:	000d5d07 	.word	0x000d5d07

000d5d50 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5d50:	b510      	push	{r4, lr}
   d5d52:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5d54:	f001 fa56 	bl	d7204 <strlen>
   d5d58:	3801      	subs	r0, #1
   d5d5a:	1823      	adds	r3, r4, r0
   d5d5c:	4620      	mov	r0, r4
	while(i<j){
   d5d5e:	4283      	cmp	r3, r0
   d5d60:	d906      	bls.n	d5d70 <_Z11str_reversePc+0x20>
		c = *i;
   d5d62:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5d64:	7819      	ldrb	r1, [r3, #0]
   d5d66:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5d6a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5d6e:	e7f6      	b.n	d5d5e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5d70:	bd10      	pop	{r4, pc}

000d5d72 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5d72:	b570      	push	{r4, r5, r6, lr}
   d5d74:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5d76:	1e91      	subs	r1, r2, #2
   d5d78:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5d7a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5d7c:	d822      	bhi.n	d5dc4 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5d7e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5d80:	b16d      	cbz	r5, d5d9e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5d82:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5d86:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5d8a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5d8c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5d8e:	bf94      	ite	ls
   d5d90:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5d92:	3157      	addhi	r1, #87	; 0x57
   d5d94:	b2c9      	uxtb	r1, r1
   d5d96:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d5d9a:	4635      	mov	r5, r6
	while(a){
   d5d9c:	e7f0      	b.n	d5d80 <ultoa+0xe>
   d5d9e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5da0:	4423      	add	r3, r4
            *ptr++ = '0';
   d5da2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5da4:	4293      	cmp	r3, r2
   d5da6:	d902      	bls.n	d5dae <ultoa+0x3c>
            *ptr++ = '0';
   d5da8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5dac:	e7fa      	b.n	d5da4 <ultoa+0x32>
   d5dae:	1a1a      	subs	r2, r3, r0
   d5db0:	4283      	cmp	r3, r0
   d5db2:	bf38      	it	cc
   d5db4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d5db6:	2300      	movs	r3, #0
   d5db8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d5dba:	4620      	mov	r0, r4
   d5dbc:	f7ff ffc8 	bl	d5d50 <_Z11str_reversePc>
	return buffer;
   d5dc0:	4620      	mov	r0, r4
}
   d5dc2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5dc4:	2000      	movs	r0, #0
   d5dc6:	e7fc      	b.n	d5dc2 <ultoa+0x50>

000d5dc8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5dc8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5dca:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5dcc:	460c      	mov	r4, r1
   d5dce:	4615      	mov	r5, r2
	if(a<0){
   d5dd0:	da0e      	bge.n	d5df0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d5dd6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5dda:	bf14      	ite	ne
   d5ddc:	4258      	negne	r0, r3
   d5dde:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5de0:	2301      	movs	r3, #1
		*buffer = '-';
   d5de2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d5de4:	462a      	mov	r2, r5
   d5de6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d5de8:	f7ff ffc3 	bl	d5d72 <ultoa>
	}
	return buffer;
}
   d5dec:	4620      	mov	r0, r4
   d5dee:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d5df0:	2301      	movs	r3, #1
   d5df2:	e7f9      	b.n	d5de8 <itoa+0x20>

000d5df4 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5df4:	b570      	push	{r4, r5, r6, lr}
   d5df6:	b086      	sub	sp, #24
   d5df8:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5dfa:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5dfc:	4668      	mov	r0, sp
   d5dfe:	f000 fa71 	bl	d62e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e04:	1d34      	adds	r4, r6, #4
   d5e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e08:	682b      	ldr	r3, [r5, #0]
   d5e0a:	7023      	strb	r3, [r4, #0]
    }
   d5e0c:	4630      	mov	r0, r6
   d5e0e:	b006      	add	sp, #24
   d5e10:	bd70      	pop	{r4, r5, r6, pc}

000d5e12 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5e12:	b510      	push	{r4, lr}
   d5e14:	4604      	mov	r4, r0
{
	free(buffer);
   d5e16:	6800      	ldr	r0, [r0, #0]
   d5e18:	f7ff fe58 	bl	d5acc <free>
}
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	bd10      	pop	{r4, pc}

000d5e20 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5e20:	b510      	push	{r4, lr}
   d5e22:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5e24:	6800      	ldr	r0, [r0, #0]
   d5e26:	b108      	cbz	r0, d5e2c <_ZN6String10invalidateEv+0xc>
   d5e28:	f7ff fe50 	bl	d5acc <free>
	buffer = NULL;
   d5e2c:	2300      	movs	r3, #0
	capacity = len = 0;
   d5e2e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5e32:	6023      	str	r3, [r4, #0]
}
   d5e34:	bd10      	pop	{r4, pc}

000d5e36 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5e36:	b538      	push	{r3, r4, r5, lr}
   d5e38:	4604      	mov	r4, r0
   d5e3a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5e3c:	6800      	ldr	r0, [r0, #0]
   d5e3e:	3101      	adds	r1, #1
   d5e40:	f7ff fe4c 	bl	d5adc <realloc>
	if (newbuffer) {
   d5e44:	b110      	cbz	r0, d5e4c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5e46:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5e4a:	2001      	movs	r0, #1
	}
	return 0;
}
   d5e4c:	bd38      	pop	{r3, r4, r5, pc}

000d5e4e <_ZN6String7reserveEj>:
{
   d5e4e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5e50:	6803      	ldr	r3, [r0, #0]
{
   d5e52:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5e54:	b123      	cbz	r3, d5e60 <_ZN6String7reserveEj+0x12>
   d5e56:	6843      	ldr	r3, [r0, #4]
   d5e58:	428b      	cmp	r3, r1
   d5e5a:	d301      	bcc.n	d5e60 <_ZN6String7reserveEj+0x12>
   d5e5c:	2001      	movs	r0, #1
}
   d5e5e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5e60:	4620      	mov	r0, r4
   d5e62:	f7ff ffe8 	bl	d5e36 <_ZN6String12changeBufferEj>
   d5e66:	2800      	cmp	r0, #0
   d5e68:	d0f9      	beq.n	d5e5e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5e6a:	68a3      	ldr	r3, [r4, #8]
   d5e6c:	2b00      	cmp	r3, #0
   d5e6e:	d1f5      	bne.n	d5e5c <_ZN6String7reserveEj+0xe>
   d5e70:	6822      	ldr	r2, [r4, #0]
   d5e72:	7013      	strb	r3, [r2, #0]
   d5e74:	e7f2      	b.n	d5e5c <_ZN6String7reserveEj+0xe>

000d5e76 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5e76:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e78:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5e7a:	4611      	mov	r1, r2
   d5e7c:	9201      	str	r2, [sp, #4]
{
   d5e7e:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5e80:	f7ff ffe5 	bl	d5e4e <_ZN6String7reserveEj>
   d5e84:	9a01      	ldr	r2, [sp, #4]
   d5e86:	b928      	cbnz	r0, d5e94 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5e88:	4620      	mov	r0, r4
   d5e8a:	f7ff ffc9 	bl	d5e20 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5e8e:	4620      	mov	r0, r4
   d5e90:	b003      	add	sp, #12
   d5e92:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5e94:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5e96:	4629      	mov	r1, r5
   d5e98:	6820      	ldr	r0, [r4, #0]
   d5e9a:	f001 f96f 	bl	d717c <memcpy>
	buffer[len] = 0;
   d5e9e:	6822      	ldr	r2, [r4, #0]
   d5ea0:	68a3      	ldr	r3, [r4, #8]
   d5ea2:	2100      	movs	r1, #0
   d5ea4:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5ea6:	e7f2      	b.n	d5e8e <_ZN6String4copyEPKcj+0x18>

000d5ea8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5ea8:	b513      	push	{r0, r1, r4, lr}
   d5eaa:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5eac:	b159      	cbz	r1, d5ec6 <_ZN6StringaSEPKc+0x1e>
   d5eae:	4608      	mov	r0, r1
   d5eb0:	9101      	str	r1, [sp, #4]
   d5eb2:	f001 f9a7 	bl	d7204 <strlen>
   d5eb6:	9901      	ldr	r1, [sp, #4]
   d5eb8:	4602      	mov	r2, r0
   d5eba:	4620      	mov	r0, r4
   d5ebc:	f7ff ffdb 	bl	d5e76 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5ec0:	4620      	mov	r0, r4
   d5ec2:	b002      	add	sp, #8
   d5ec4:	bd10      	pop	{r4, pc}
	else invalidate();
   d5ec6:	f7ff ffab 	bl	d5e20 <_ZN6String10invalidateEv>
   d5eca:	e7f9      	b.n	d5ec0 <_ZN6StringaSEPKc+0x18>

000d5ecc <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	4604      	mov	r4, r0
   d5ed0:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5ed2:	2300      	movs	r3, #0
	capacity = 0;
   d5ed4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5ed8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5eda:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d5edc:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d5ede:	a901      	add	r1, sp, #4
   d5ee0:	f7ff ff72 	bl	d5dc8 <itoa>
	*this = buf;
   d5ee4:	a901      	add	r1, sp, #4
   d5ee6:	4620      	mov	r0, r4
   d5ee8:	f7ff ffde 	bl	d5ea8 <_ZN6StringaSEPKc>
}
   d5eec:	4620      	mov	r0, r4
   d5eee:	b00a      	add	sp, #40	; 0x28
   d5ef0:	bd10      	pop	{r4, pc}

000d5ef2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5ef2:	b510      	push	{r4, lr}
   d5ef4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5ef6:	6800      	ldr	r0, [r0, #0]
   d5ef8:	b108      	cbz	r0, d5efe <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5efa:	f7ff fbdb 	bl	d56b4 <os_mutex_recursive_destroy>
    }
   d5efe:	4620      	mov	r0, r4
   d5f00:	bd10      	pop	{r4, pc}

000d5f02 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5f02:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5f04:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5f06:	4604      	mov	r4, r0
      if (_M_manager)
   d5f08:	b113      	cbz	r3, d5f10 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f0a:	2203      	movs	r2, #3
   d5f0c:	4601      	mov	r1, r0
   d5f0e:	4798      	blx	r3
    }
   d5f10:	4620      	mov	r0, r4
   d5f12:	bd10      	pop	{r4, pc}

000d5f14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5f14:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5f16:	4c06      	ldr	r4, [pc, #24]	; (d5f30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5f18:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5f1a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5f1c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5f1e:	f7ff fbc1 	bl	d56a4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5f22:	4620      	mov	r0, r4
   d5f24:	4a03      	ldr	r2, [pc, #12]	; (d5f34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5f26:	4904      	ldr	r1, [pc, #16]	; (d5f38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5f2c:	f000 bffc 	b.w	d6f28 <__aeabi_atexit>
   d5f30:	2003e668 	.word	0x2003e668
   d5f34:	2003e56c 	.word	0x2003e56c
   d5f38:	000d5ef3 	.word	0x000d5ef3

000d5f3c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f3e:	4606      	mov	r6, r0
   d5f40:	460d      	mov	r5, r1
  size_t n = 0;
   d5f42:	188f      	adds	r7, r1, r2
   d5f44:	2400      	movs	r4, #0
  while (size--) {
   d5f46:	42bd      	cmp	r5, r7
   d5f48:	d00c      	beq.n	d5f64 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5f4a:	6833      	ldr	r3, [r6, #0]
   d5f4c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5f50:	689b      	ldr	r3, [r3, #8]
   d5f52:	4630      	mov	r0, r6
   d5f54:	4798      	blx	r3
     if (chunk>=0)
   d5f56:	1e03      	subs	r3, r0, #0
   d5f58:	db01      	blt.n	d5f5e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5f5a:	441c      	add	r4, r3
  while (size--) {
   d5f5c:	e7f3      	b.n	d5f46 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5f5e:	2c00      	cmp	r4, #0
   d5f60:	bf08      	it	eq
   d5f62:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5f64:	4620      	mov	r0, r4
   d5f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f68 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f68:	b513      	push	{r0, r1, r4, lr}
   d5f6a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5f6c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5f6e:	b159      	cbz	r1, d5f88 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5f70:	9101      	str	r1, [sp, #4]
   d5f72:	f001 f947 	bl	d7204 <strlen>
   d5f76:	6823      	ldr	r3, [r4, #0]
   d5f78:	9901      	ldr	r1, [sp, #4]
   d5f7a:	68db      	ldr	r3, [r3, #12]
   d5f7c:	4602      	mov	r2, r0
   d5f7e:	4620      	mov	r0, r4
    }
   d5f80:	b002      	add	sp, #8
   d5f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5f86:	4718      	bx	r3
    }
   d5f88:	b002      	add	sp, #8
   d5f8a:	bd10      	pop	{r4, pc}

000d5f8c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5f8c:	b508      	push	{r3, lr}
  return write(str);
   d5f8e:	f7ff ffeb 	bl	d5f68 <_ZN5Print5writeEPKc>
}
   d5f92:	bd08      	pop	{r3, pc}

000d5f94 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5f94:	6803      	ldr	r3, [r0, #0]
   d5f96:	689b      	ldr	r3, [r3, #8]
   d5f98:	4718      	bx	r3

000d5f9a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f9a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5f9c:	210d      	movs	r1, #13
{
   d5f9e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5fa0:	f7ff fff8 	bl	d5f94 <_ZN5Print5printEc>
  n += print('\n');
   d5fa4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5fa6:	4604      	mov	r4, r0
  n += print('\n');
   d5fa8:	4628      	mov	r0, r5
   d5faa:	f7ff fff3 	bl	d5f94 <_ZN5Print5printEc>
  return n;
}
   d5fae:	4420      	add	r0, r4
   d5fb0:	bd38      	pop	{r3, r4, r5, pc}

000d5fb2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5fb2:	b538      	push	{r3, r4, r5, lr}
   d5fb4:	4605      	mov	r5, r0
  return write(str);
   d5fb6:	f7ff ffd7 	bl	d5f68 <_ZN5Print5writeEPKc>
   d5fba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5fbc:	4628      	mov	r0, r5
   d5fbe:	f7ff ffec 	bl	d5f9a <_ZN5Print7printlnEv>
  return n;
}
   d5fc2:	4420      	add	r0, r4
   d5fc4:	bd38      	pop	{r3, r4, r5, pc}

000d5fc6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5fc6:	b530      	push	{r4, r5, lr}
   d5fc8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5fca:	2300      	movs	r3, #0
   d5fcc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5fd0:	2a01      	cmp	r2, #1
   d5fd2:	bf98      	it	ls
   d5fd4:	220a      	movls	r2, #10
   d5fd6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5fd8:	460d      	mov	r5, r1
   d5fda:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5fde:	fb01 5312 	mls	r3, r1, r2, r5
   d5fe2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5fe6:	2b09      	cmp	r3, #9
   d5fe8:	bf94      	ite	ls
   d5fea:	3330      	addls	r3, #48	; 0x30
   d5fec:	3337      	addhi	r3, #55	; 0x37
   d5fee:	b2db      	uxtb	r3, r3
  } while(n);
   d5ff0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ff2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5ff6:	d9ef      	bls.n	d5fd8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5ff8:	4621      	mov	r1, r4
   d5ffa:	f7ff ffb5 	bl	d5f68 <_ZN5Print5writeEPKc>
}
   d5ffe:	b00b      	add	sp, #44	; 0x2c
   d6000:	bd30      	pop	{r4, r5, pc}

000d6002 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6006:	b086      	sub	sp, #24
   d6008:	af00      	add	r7, sp, #0
   d600a:	4605      	mov	r5, r0
   d600c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d600e:	1d38      	adds	r0, r7, #4
   d6010:	2114      	movs	r1, #20
{
   d6012:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6014:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6016:	f7ff fd69 	bl	d5aec <vsnprintf>

    if (n<bufsize)
   d601a:	2813      	cmp	r0, #19
   d601c:	d80e      	bhi.n	d603c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d601e:	1d39      	adds	r1, r7, #4
   d6020:	4628      	mov	r0, r5
   d6022:	f7ff ffa1 	bl	d5f68 <_ZN5Print5writeEPKc>
   d6026:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6028:	b11e      	cbz	r6, d6032 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d602a:	4628      	mov	r0, r5
   d602c:	f7ff ffb5 	bl	d5f9a <_ZN5Print7printlnEv>
   d6030:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6032:	4620      	mov	r0, r4
   d6034:	3718      	adds	r7, #24
   d6036:	46bd      	mov	sp, r7
   d6038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d603c:	f100 0308 	add.w	r3, r0, #8
   d6040:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6044:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6046:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d604a:	4622      	mov	r2, r4
   d604c:	1c41      	adds	r1, r0, #1
   d604e:	683b      	ldr	r3, [r7, #0]
   d6050:	4668      	mov	r0, sp
   d6052:	f7ff fd4b 	bl	d5aec <vsnprintf>
  return write(str);
   d6056:	4669      	mov	r1, sp
   d6058:	4628      	mov	r0, r5
   d605a:	f7ff ff85 	bl	d5f68 <_ZN5Print5writeEPKc>
   d605e:	4604      	mov	r4, r0
   d6060:	46c5      	mov	sp, r8
   d6062:	e7e1      	b.n	d6028 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6064 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6064:	2300      	movs	r3, #0
   d6066:	6840      	ldr	r0, [r0, #4]
   d6068:	461a      	mov	r2, r3
   d606a:	4619      	mov	r1, r3
   d606c:	f7ff bcde 	b.w	d5a2c <network_on>

000d6070 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6070:	4b01      	ldr	r3, [pc, #4]	; (d6078 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6072:	4a02      	ldr	r2, [pc, #8]	; (d607c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6074:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6076:	4770      	bx	lr
   d6078:	2003e66c 	.word	0x2003e66c
   d607c:	000d7db0 	.word	0x000d7db0

000d6080 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6080:	4b02      	ldr	r3, [pc, #8]	; (d608c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6082:	681a      	ldr	r2, [r3, #0]
   d6084:	4b02      	ldr	r3, [pc, #8]	; (d6090 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6086:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6088:	4770      	bx	lr
   d608a:	bf00      	nop
   d608c:	2003e504 	.word	0x2003e504
   d6090:	2003e670 	.word	0x2003e670

000d6094 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6094:	2100      	movs	r1, #0
   d6096:	f7ff bc85 	b.w	d59a4 <system_delay_ms>

000d609a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d609a:	b510      	push	{r4, lr}
   d609c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d609e:	f7ff ff30 	bl	d5f02 <_ZNSt14_Function_baseD1Ev>
   d60a2:	4620      	mov	r0, r4
   d60a4:	bd10      	pop	{r4, pc}
	...

000d60a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d60a8:	4803      	ldr	r0, [pc, #12]	; (d60b8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d60aa:	4a04      	ldr	r2, [pc, #16]	; (d60bc <_GLOBAL__sub_I_RGB+0x14>)
   d60ac:	4904      	ldr	r1, [pc, #16]	; (d60c0 <_GLOBAL__sub_I_RGB+0x18>)
   d60ae:	2300      	movs	r3, #0
   d60b0:	6083      	str	r3, [r0, #8]
   d60b2:	f000 bf39 	b.w	d6f28 <__aeabi_atexit>
   d60b6:	bf00      	nop
   d60b8:	2003e674 	.word	0x2003e674
   d60bc:	2003e56c 	.word	0x2003e56c
   d60c0:	000d609b 	.word	0x000d609b

000d60c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d60c4:	4b01      	ldr	r3, [pc, #4]	; (d60cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d60c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d60c8:	4770      	bx	lr
   d60ca:	bf00      	nop
   d60cc:	2003e508 	.word	0x2003e508

000d60d0 <serialEventRun>:
{
   d60d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d60d2:	4b0b      	ldr	r3, [pc, #44]	; (d6100 <serialEventRun+0x30>)
   d60d4:	b143      	cbz	r3, d60e8 <serialEventRun+0x18>
   d60d6:	f000 f971 	bl	d63bc <_Z16_fetch_usbserialv>
   d60da:	6803      	ldr	r3, [r0, #0]
   d60dc:	691b      	ldr	r3, [r3, #16]
   d60de:	4798      	blx	r3
   d60e0:	2800      	cmp	r0, #0
   d60e2:	dd01      	ble.n	d60e8 <serialEventRun+0x18>
        serialEvent();
   d60e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d60e8:	4b06      	ldr	r3, [pc, #24]	; (d6104 <serialEventRun+0x34>)
   d60ea:	b143      	cbz	r3, d60fe <serialEventRun+0x2e>
   d60ec:	f000 fa12 	bl	d6514 <_Z22__fetch_global_Serial1v>
   d60f0:	6803      	ldr	r3, [r0, #0]
   d60f2:	691b      	ldr	r3, [r3, #16]
   d60f4:	4798      	blx	r3
   d60f6:	2800      	cmp	r0, #0
   d60f8:	dd01      	ble.n	d60fe <serialEventRun+0x2e>
        serialEvent1();
   d60fa:	f3af 8000 	nop.w
}
   d60fe:	bd08      	pop	{r3, pc}
	...

000d6108 <_post_loop>:
{
   d6108:	b508      	push	{r3, lr}
	serialEventRun();
   d610a:	f7ff ffe1 	bl	d60d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d610e:	f7ff fab1 	bl	d5674 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6112:	4b01      	ldr	r3, [pc, #4]	; (d6118 <_post_loop+0x10>)
   d6114:	6018      	str	r0, [r3, #0]
}
   d6116:	bd08      	pop	{r3, pc}
   d6118:	2003e7d4 	.word	0x2003e7d4

000d611c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d611c:	4802      	ldr	r0, [pc, #8]	; (d6128 <_Z33system_initialize_user_backup_ramv+0xc>)
   d611e:	4a03      	ldr	r2, [pc, #12]	; (d612c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6120:	4903      	ldr	r1, [pc, #12]	; (d6130 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6122:	1a12      	subs	r2, r2, r0
   d6124:	f001 b82a 	b.w	d717c <memcpy>
   d6128:	2003f400 	.word	0x2003f400
   d612c:	2003f404 	.word	0x2003f404
   d6130:	000d8080 	.word	0x000d8080

000d6134 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6134:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6136:	2300      	movs	r3, #0
   d6138:	9300      	str	r3, [sp, #0]
   d613a:	461a      	mov	r2, r3
   d613c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6140:	f7ff fc4a 	bl	d59d8 <system_ctrl_set_result>
}
   d6144:	b003      	add	sp, #12
   d6146:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d614c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d614c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d614e:	8843      	ldrh	r3, [r0, #2]
   d6150:	2b0a      	cmp	r3, #10
   d6152:	d008      	beq.n	d6166 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6154:	2b50      	cmp	r3, #80	; 0x50
   d6156:	d10b      	bne.n	d6170 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6158:	4b09      	ldr	r3, [pc, #36]	; (d6180 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d615a:	681b      	ldr	r3, [r3, #0]
   d615c:	b14b      	cbz	r3, d6172 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d615e:	b003      	add	sp, #12
   d6160:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6164:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6166:	f7ff ffe5 	bl	d6134 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d616a:	b003      	add	sp, #12
   d616c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6170:	2300      	movs	r3, #0
   d6172:	9300      	str	r3, [sp, #0]
   d6174:	461a      	mov	r2, r3
   d6176:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d617a:	f7ff fc2d 	bl	d59d8 <system_ctrl_set_result>
}
   d617e:	e7f4      	b.n	d616a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6180:	2003e688 	.word	0x2003e688

000d6184 <module_user_init_hook>:
{
   d6184:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6186:	4c12      	ldr	r4, [pc, #72]	; (d61d0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6188:	4812      	ldr	r0, [pc, #72]	; (d61d4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d618a:	4d13      	ldr	r5, [pc, #76]	; (d61d8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d618c:	2100      	movs	r1, #0
   d618e:	f7ff fcbd 	bl	d5b0c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6192:	6823      	ldr	r3, [r4, #0]
   d6194:	42ab      	cmp	r3, r5
   d6196:	4b11      	ldr	r3, [pc, #68]	; (d61dc <module_user_init_hook+0x58>)
   d6198:	bf0c      	ite	eq
   d619a:	2201      	moveq	r2, #1
   d619c:	2200      	movne	r2, #0
   d619e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d61a0:	d002      	beq.n	d61a8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d61a2:	f7ff ffbb 	bl	d611c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d61a6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d61a8:	f7ff fa54 	bl	d5654 <HAL_RNG_GetRandomNumber>
   d61ac:	4604      	mov	r4, r0
    srand(seed);
   d61ae:	f000 fffb 	bl	d71a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d61b2:	4b0b      	ldr	r3, [pc, #44]	; (d61e0 <module_user_init_hook+0x5c>)
   d61b4:	b113      	cbz	r3, d61bc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d61b6:	4620      	mov	r0, r4
   d61b8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d61bc:	2100      	movs	r1, #0
   d61be:	4808      	ldr	r0, [pc, #32]	; (d61e0 <module_user_init_hook+0x5c>)
   d61c0:	f7ff fc74 	bl	d5aac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d61c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d61c8:	4806      	ldr	r0, [pc, #24]	; (d61e4 <module_user_init_hook+0x60>)
   d61ca:	2100      	movs	r1, #0
   d61cc:	f7ff bbfa 	b.w	d59c4 <system_ctrl_set_app_request_handler>
   d61d0:	2003f400 	.word	0x2003f400
   d61d4:	000d60c5 	.word	0x000d60c5
   d61d8:	9a271c1e 	.word	0x9a271c1e
   d61dc:	2003e684 	.word	0x2003e684
   d61e0:	00000000 	.word	0x00000000
   d61e4:	000d614d 	.word	0x000d614d

000d61e8 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d61e8:	4770      	bx	lr

000d61ea <_ZN9IPAddressD0Ev>:
   d61ea:	b510      	push	{r4, lr}
   d61ec:	2118      	movs	r1, #24
   d61ee:	4604      	mov	r4, r0
   d61f0:	f000 fe9f 	bl	d6f32 <_ZdlPvj>
   d61f4:	4620      	mov	r0, r4
   d61f6:	bd10      	pop	{r4, pc}

000d61f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d61f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d61fa:	7d03      	ldrb	r3, [r0, #20]
   d61fc:	2b06      	cmp	r3, #6
{
   d61fe:	b08d      	sub	sp, #52	; 0x34
   d6200:	460e      	mov	r6, r1
   d6202:	f100 0704 	add.w	r7, r0, #4
   d6206:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d620a:	d012      	beq.n	d6232 <_ZNK9IPAddress7printToER5Print+0x3a>
   d620c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6210:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6214:	220a      	movs	r2, #10
   d6216:	4630      	mov	r0, r6
   d6218:	f7ff fed5 	bl	d5fc6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d621c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d621e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6220:	d019      	beq.n	d6256 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6222:	2c00      	cmp	r4, #0
   d6224:	d0f4      	beq.n	d6210 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6226:	212e      	movs	r1, #46	; 0x2e
   d6228:	4630      	mov	r0, r6
   d622a:	f7ff feb3 	bl	d5f94 <_ZN5Print5printEc>
   d622e:	4404      	add	r4, r0
   d6230:	e7ee      	b.n	d6210 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6232:	232f      	movs	r3, #47	; 0x2f
   d6234:	466a      	mov	r2, sp
   d6236:	4639      	mov	r1, r7
   d6238:	200a      	movs	r0, #10
		buf[0] = 0;
   d623a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d623e:	f7ff fa41 	bl	d56c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6242:	4668      	mov	r0, sp
   d6244:	f000 ffde 	bl	d7204 <strlen>
   d6248:	6833      	ldr	r3, [r6, #0]
   d624a:	4602      	mov	r2, r0
   d624c:	68db      	ldr	r3, [r3, #12]
   d624e:	4669      	mov	r1, sp
   d6250:	4630      	mov	r0, r6
   d6252:	4798      	blx	r3
   d6254:	4604      	mov	r4, r0
    }
    return n;
}
   d6256:	4620      	mov	r0, r4
   d6258:	b00d      	add	sp, #52	; 0x34
   d625a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d625c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d625c:	b510      	push	{r4, lr}
   d625e:	4b05      	ldr	r3, [pc, #20]	; (d6274 <_ZN9IPAddressC1Ev+0x18>)
   d6260:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6262:	2211      	movs	r2, #17
   d6264:	f840 3b04 	str.w	r3, [r0], #4
   d6268:	2100      	movs	r1, #0
   d626a:	f000 ff95 	bl	d7198 <memset>
}
   d626e:	4620      	mov	r0, r4
   d6270:	bd10      	pop	{r4, pc}
   d6272:	bf00      	nop
   d6274:	000d7dd8 	.word	0x000d7dd8

000d6278 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6278:	4603      	mov	r3, r0
   d627a:	4a07      	ldr	r2, [pc, #28]	; (d6298 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d627c:	b510      	push	{r4, lr}
   d627e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6282:	f101 0210 	add.w	r2, r1, #16
   d6286:	f851 4b04 	ldr.w	r4, [r1], #4
   d628a:	f843 4b04 	str.w	r4, [r3], #4
   d628e:	4291      	cmp	r1, r2
   d6290:	d1f9      	bne.n	d6286 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6292:	780a      	ldrb	r2, [r1, #0]
   d6294:	701a      	strb	r2, [r3, #0]
}
   d6296:	bd10      	pop	{r4, pc}
   d6298:	000d7dd8 	.word	0x000d7dd8

000d629c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d629c:	7d03      	ldrb	r3, [r0, #20]
   d629e:	2b04      	cmp	r3, #4
   d62a0:	d104      	bne.n	d62ac <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d62a2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d62a4:	3800      	subs	r0, #0
   d62a6:	bf18      	it	ne
   d62a8:	2001      	movne	r0, #1
   d62aa:	4770      	bx	lr
    } else if (version() == 6) {
   d62ac:	2b06      	cmp	r3, #6
   d62ae:	d107      	bne.n	d62c0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d62b0:	6843      	ldr	r3, [r0, #4]
   d62b2:	b93b      	cbnz	r3, d62c4 <_ZNK9IPAddresscvbEv+0x28>
   d62b4:	6883      	ldr	r3, [r0, #8]
   d62b6:	b92b      	cbnz	r3, d62c4 <_ZNK9IPAddresscvbEv+0x28>
   d62b8:	68c3      	ldr	r3, [r0, #12]
   d62ba:	b91b      	cbnz	r3, d62c4 <_ZNK9IPAddresscvbEv+0x28>
   d62bc:	6900      	ldr	r0, [r0, #16]
   d62be:	e7f1      	b.n	d62a4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d62c0:	2000      	movs	r0, #0
   d62c2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d62c4:	2001      	movs	r0, #1
}
   d62c6:	4770      	bx	lr

000d62c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d62c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d62ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d62ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d62d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d62d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d62da:	2304      	movs	r3, #4
   d62dc:	6041      	str	r1, [r0, #4]
   d62de:	7503      	strb	r3, [r0, #20]
}
   d62e0:	bd10      	pop	{r4, pc}
	...

000d62e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d62e4:	b513      	push	{r0, r1, r4, lr}
   d62e6:	4b05      	ldr	r3, [pc, #20]	; (d62fc <_ZN9IPAddressC1EPKh+0x18>)
   d62e8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d62ea:	78cb      	ldrb	r3, [r1, #3]
   d62ec:	9300      	str	r3, [sp, #0]
   d62ee:	788b      	ldrb	r3, [r1, #2]
   d62f0:	784a      	ldrb	r2, [r1, #1]
   d62f2:	7809      	ldrb	r1, [r1, #0]
   d62f4:	f7ff ffe8 	bl	d62c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d62f8:	b002      	add	sp, #8
   d62fa:	bd10      	pop	{r4, pc}
   d62fc:	000d7dd8 	.word	0x000d7dd8

000d6300 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6300:	7441      	strb	r1, [r0, #17]
}
   d6302:	4770      	bx	lr

000d6304 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6304:	4770      	bx	lr

000d6306 <_ZN9USBSerial4readEv>:
{
   d6306:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6308:	2100      	movs	r1, #0
   d630a:	7c00      	ldrb	r0, [r0, #16]
   d630c:	f7ff fb1a 	bl	d5944 <HAL_USB_USART_Receive_Data>
}
   d6310:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6314:	bd08      	pop	{r3, pc}

000d6316 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6316:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6318:	2101      	movs	r1, #1
   d631a:	7c00      	ldrb	r0, [r0, #16]
   d631c:	f7ff fb12 	bl	d5944 <HAL_USB_USART_Receive_Data>
}
   d6320:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6324:	bd08      	pop	{r3, pc}

000d6326 <_ZN9USBSerial17availableForWriteEv>:
{
   d6326:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6328:	7c00      	ldrb	r0, [r0, #16]
   d632a:	f7ff fb03 	bl	d5934 <HAL_USB_USART_Available_Data_For_Write>
}
   d632e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6332:	bd08      	pop	{r3, pc}

000d6334 <_ZN9USBSerial9availableEv>:
{
   d6334:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6336:	7c00      	ldrb	r0, [r0, #16]
   d6338:	f7ff faf4 	bl	d5924 <HAL_USB_USART_Available_Data>
}
   d633c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6340:	bd08      	pop	{r3, pc}

000d6342 <_ZN9USBSerial5writeEh>:
{
   d6342:	b513      	push	{r0, r1, r4, lr}
   d6344:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6346:	7c00      	ldrb	r0, [r0, #16]
{
   d6348:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d634a:	f7ff faf3 	bl	d5934 <HAL_USB_USART_Available_Data_For_Write>
   d634e:	2800      	cmp	r0, #0
   d6350:	9901      	ldr	r1, [sp, #4]
   d6352:	dc01      	bgt.n	d6358 <_ZN9USBSerial5writeEh+0x16>
   d6354:	7c60      	ldrb	r0, [r4, #17]
   d6356:	b120      	cbz	r0, d6362 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6358:	7c20      	ldrb	r0, [r4, #16]
   d635a:	f7ff fafb 	bl	d5954 <HAL_USB_USART_Send_Data>
   d635e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6362:	b002      	add	sp, #8
   d6364:	bd10      	pop	{r4, pc}

000d6366 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6366:	7c00      	ldrb	r0, [r0, #16]
   d6368:	f7ff bafc 	b.w	d5964 <HAL_USB_USART_Flush_Data>

000d636c <_ZN9USBSerialD0Ev>:
   d636c:	b510      	push	{r4, lr}
   d636e:	2114      	movs	r1, #20
   d6370:	4604      	mov	r4, r0
   d6372:	f000 fdde 	bl	d6f32 <_ZdlPvj>
   d6376:	4620      	mov	r0, r4
   d6378:	bd10      	pop	{r4, pc}
	...

000d637c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d637c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d637e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6382:	4604      	mov	r4, r0
   d6384:	4608      	mov	r0, r1
   d6386:	2100      	movs	r1, #0
   d6388:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d638c:	4b04      	ldr	r3, [pc, #16]	; (d63a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d638e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6390:	2301      	movs	r3, #1
  _serial = serial;
   d6392:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6394:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6396:	4611      	mov	r1, r2
   d6398:	f7ff fab4 	bl	d5904 <HAL_USB_USART_Init>
}
   d639c:	4620      	mov	r0, r4
   d639e:	bd10      	pop	{r4, pc}
   d63a0:	000d7dec 	.word	0x000d7dec

000d63a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d63a4:	7c00      	ldrb	r0, [r0, #16]
   d63a6:	2200      	movs	r2, #0
   d63a8:	f7ff bab4 	b.w	d5914 <HAL_USB_USART_Begin>

000d63ac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d63ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d63ae:	2214      	movs	r2, #20
{
   d63b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d63b2:	2100      	movs	r1, #0
   d63b4:	f000 fef0 	bl	d7198 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d63b8:	4620      	mov	r0, r4
   d63ba:	bd10      	pop	{r4, pc}

000d63bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d63bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d63be:	4c10      	ldr	r4, [pc, #64]	; (d6400 <_Z16_fetch_usbserialv+0x44>)
{
   d63c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d63c2:	a803      	add	r0, sp, #12
   d63c4:	f7ff fff2 	bl	d63ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d63c8:	7821      	ldrb	r1, [r4, #0]
   d63ca:	f3bf 8f5b 	dmb	ish
   d63ce:	f011 0101 	ands.w	r1, r1, #1
   d63d2:	d111      	bne.n	d63f8 <_Z16_fetch_usbserialv+0x3c>
   d63d4:	4620      	mov	r0, r4
   d63d6:	9101      	str	r1, [sp, #4]
   d63d8:	f7fd fe6c 	bl	d40b4 <__cxa_guard_acquire>
   d63dc:	9901      	ldr	r1, [sp, #4]
   d63de:	b158      	cbz	r0, d63f8 <_Z16_fetch_usbserialv+0x3c>
   d63e0:	aa03      	add	r2, sp, #12
   d63e2:	4808      	ldr	r0, [pc, #32]	; (d6404 <_Z16_fetch_usbserialv+0x48>)
   d63e4:	f7ff ffca 	bl	d637c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d63e8:	4620      	mov	r0, r4
   d63ea:	f7fd fe68 	bl	d40be <__cxa_guard_release>
   d63ee:	4a06      	ldr	r2, [pc, #24]	; (d6408 <_Z16_fetch_usbserialv+0x4c>)
   d63f0:	4906      	ldr	r1, [pc, #24]	; (d640c <_Z16_fetch_usbserialv+0x50>)
   d63f2:	4804      	ldr	r0, [pc, #16]	; (d6404 <_Z16_fetch_usbserialv+0x48>)
   d63f4:	f000 fd98 	bl	d6f28 <__aeabi_atexit>
	return _usbserial;
}
   d63f8:	4802      	ldr	r0, [pc, #8]	; (d6404 <_Z16_fetch_usbserialv+0x48>)
   d63fa:	b008      	add	sp, #32
   d63fc:	bd10      	pop	{r4, pc}
   d63fe:	bf00      	nop
   d6400:	2003e68c 	.word	0x2003e68c
   d6404:	2003e690 	.word	0x2003e690
   d6408:	2003e56c 	.word	0x2003e56c
   d640c:	000d6305 	.word	0x000d6305

000d6410 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6410:	4700      	bx	r0
	...

000d6414 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6414:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6418:	2400      	movs	r4, #0
{
   d641a:	461d      	mov	r5, r3
   d641c:	460f      	mov	r7, r1
   d641e:	4690      	mov	r8, r2
   d6420:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d6422:	f7ff f8ff 	bl	d5624 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d6426:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6428:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d642c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6430:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6434:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d6438:	bfa2      	ittt	ge
   d643a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d643e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d6442:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6444:	4907      	ldr	r1, [pc, #28]	; (d6464 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d6446:	9400      	str	r4, [sp, #0]
   d6448:	4643      	mov	r3, r8
   d644a:	463a      	mov	r2, r7
   d644c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d644e:	bfa8      	it	ge
   d6450:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6454:	f7ff f8de 	bl	d5614 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6458:	fab0 f080 	clz	r0, r0
   d645c:	0940      	lsrs	r0, r0, #5
   d645e:	b004      	add	sp, #16
   d6460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6464:	000d6411 	.word	0x000d6411

000d6468 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6468:	f7ff b8e4 	b.w	d5634 <HAL_Interrupts_Enable_All>

000d646c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d646c:	4770      	bx	lr

000d646e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d646e:	7441      	strb	r1, [r0, #17]
}
   d6470:	4770      	bx	lr

000d6472 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6472:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6474:	7c00      	ldrb	r0, [r0, #16]
   d6476:	f7ff f975 	bl	d5764 <hal_usart_available_data_for_write>
}
   d647a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d647e:	bd08      	pop	{r3, pc}

000d6480 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6480:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6482:	7c00      	ldrb	r0, [r0, #16]
   d6484:	f7ff f946 	bl	d5714 <hal_usart_available>
}
   d6488:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d648c:	bd08      	pop	{r3, pc}

000d648e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d648e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6490:	7c00      	ldrb	r0, [r0, #16]
   d6492:	f7ff f94f 	bl	d5734 <hal_usart_peek>
}
   d6496:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d649a:	bd08      	pop	{r3, pc}

000d649c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d649c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d649e:	7c00      	ldrb	r0, [r0, #16]
   d64a0:	f7ff f940 	bl	d5724 <hal_usart_read>
}
   d64a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d64a8:	bd08      	pop	{r3, pc}

000d64aa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d64aa:	7c00      	ldrb	r0, [r0, #16]
   d64ac:	f7ff b94a 	b.w	d5744 <hal_usart_flush>

000d64b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d64b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d64b2:	7c45      	ldrb	r5, [r0, #17]
{
   d64b4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d64b6:	b12d      	cbz	r5, d64c4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d64b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d64ba:	b003      	add	sp, #12
   d64bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d64c0:	f7ff b920 	b.w	d5704 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d64c4:	7c00      	ldrb	r0, [r0, #16]
   d64c6:	9101      	str	r1, [sp, #4]
   d64c8:	f7ff f94c 	bl	d5764 <hal_usart_available_data_for_write>
   d64cc:	2800      	cmp	r0, #0
   d64ce:	9901      	ldr	r1, [sp, #4]
   d64d0:	dcf2      	bgt.n	d64b8 <_ZN11USARTSerial5writeEh+0x8>
}
   d64d2:	4628      	mov	r0, r5
   d64d4:	b003      	add	sp, #12
   d64d6:	bd30      	pop	{r4, r5, pc}

000d64d8 <_ZN11USARTSerialD0Ev>:
   d64d8:	b510      	push	{r4, lr}
   d64da:	2114      	movs	r1, #20
   d64dc:	4604      	mov	r4, r0
   d64de:	f000 fd28 	bl	d6f32 <_ZdlPvj>
   d64e2:	4620      	mov	r0, r4
   d64e4:	bd10      	pop	{r4, pc}
	...

000d64e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d64e8:	b510      	push	{r4, lr}
   d64ea:	f04f 0c00 	mov.w	ip, #0
   d64ee:	4604      	mov	r4, r0
   d64f0:	4608      	mov	r0, r1
   d64f2:	4611      	mov	r1, r2
   d64f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d64f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d64fc:	4a04      	ldr	r2, [pc, #16]	; (d6510 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d64fe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6500:	2201      	movs	r2, #1
  _serial = serial;
   d6502:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6504:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6506:	461a      	mov	r2, r3
   d6508:	f7ff f8f4 	bl	d56f4 <hal_usart_init>
}
   d650c:	4620      	mov	r0, r4
   d650e:	bd10      	pop	{r4, pc}
   d6510:	000d7e1c 	.word	0x000d7e1c

000d6514 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6514:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6516:	4c0e      	ldr	r4, [pc, #56]	; (d6550 <_Z22__fetch_global_Serial1v+0x3c>)
   d6518:	7821      	ldrb	r1, [r4, #0]
   d651a:	f3bf 8f5b 	dmb	ish
   d651e:	f011 0101 	ands.w	r1, r1, #1
   d6522:	d112      	bne.n	d654a <_Z22__fetch_global_Serial1v+0x36>
   d6524:	4620      	mov	r0, r4
   d6526:	9101      	str	r1, [sp, #4]
   d6528:	f7fd fdc4 	bl	d40b4 <__cxa_guard_acquire>
   d652c:	9901      	ldr	r1, [sp, #4]
   d652e:	b160      	cbz	r0, d654a <_Z22__fetch_global_Serial1v+0x36>
   d6530:	4a08      	ldr	r2, [pc, #32]	; (d6554 <_Z22__fetch_global_Serial1v+0x40>)
   d6532:	4b09      	ldr	r3, [pc, #36]	; (d6558 <_Z22__fetch_global_Serial1v+0x44>)
   d6534:	4809      	ldr	r0, [pc, #36]	; (d655c <_Z22__fetch_global_Serial1v+0x48>)
   d6536:	f7ff ffd7 	bl	d64e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d653a:	4620      	mov	r0, r4
   d653c:	f7fd fdbf 	bl	d40be <__cxa_guard_release>
   d6540:	4a07      	ldr	r2, [pc, #28]	; (d6560 <_Z22__fetch_global_Serial1v+0x4c>)
   d6542:	4908      	ldr	r1, [pc, #32]	; (d6564 <_Z22__fetch_global_Serial1v+0x50>)
   d6544:	4805      	ldr	r0, [pc, #20]	; (d655c <_Z22__fetch_global_Serial1v+0x48>)
   d6546:	f000 fcef 	bl	d6f28 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d654a:	4804      	ldr	r0, [pc, #16]	; (d655c <_Z22__fetch_global_Serial1v+0x48>)
   d654c:	b002      	add	sp, #8
   d654e:	bd10      	pop	{r4, pc}
   d6550:	2003e6a4 	.word	0x2003e6a4
   d6554:	2003e6a8 	.word	0x2003e6a8
   d6558:	2003e72c 	.word	0x2003e72c
   d655c:	2003e7b0 	.word	0x2003e7b0
   d6560:	2003e56c 	.word	0x2003e56c
   d6564:	000d646d 	.word	0x000d646d

000d6568 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6568:	4770      	bx	lr

000d656a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d656a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d656c:	4606      	mov	r6, r0
   d656e:	4615      	mov	r5, r2
   d6570:	460c      	mov	r4, r1
   d6572:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6574:	42bc      	cmp	r4, r7
   d6576:	d006      	beq.n	d6586 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6578:	6833      	ldr	r3, [r6, #0]
   d657a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d657e:	689b      	ldr	r3, [r3, #8]
   d6580:	4630      	mov	r0, r6
   d6582:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6584:	e7f6      	b.n	d6574 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6586:	4628      	mov	r0, r5
   d6588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d658a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d658a:	7c00      	ldrb	r0, [r0, #16]
   d658c:	2200      	movs	r2, #0
   d658e:	f7ff b911 	b.w	d57b4 <hal_i2c_write>

000d6592 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6592:	7c00      	ldrb	r0, [r0, #16]
   d6594:	2100      	movs	r1, #0
   d6596:	f7ff b915 	b.w	d57c4 <hal_i2c_available>

000d659a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d659a:	7c00      	ldrb	r0, [r0, #16]
   d659c:	2100      	movs	r1, #0
   d659e:	f7ff b919 	b.w	d57d4 <hal_i2c_read>

000d65a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d65a2:	7c00      	ldrb	r0, [r0, #16]
   d65a4:	2100      	movs	r1, #0
   d65a6:	f7ff b91d 	b.w	d57e4 <hal_i2c_peek>

000d65aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d65aa:	7c00      	ldrb	r0, [r0, #16]
   d65ac:	2100      	movs	r1, #0
   d65ae:	f7ff b921 	b.w	d57f4 <hal_i2c_flush>

000d65b2 <_ZN7TwoWireD0Ev>:
   d65b2:	b510      	push	{r4, lr}
   d65b4:	2114      	movs	r1, #20
   d65b6:	4604      	mov	r4, r0
   d65b8:	f000 fcbb 	bl	d6f32 <_ZdlPvj>
   d65bc:	4620      	mov	r0, r4
   d65be:	bd10      	pop	{r4, pc}

000d65c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d65c0:	b510      	push	{r4, lr}
   d65c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d65c6:	4604      	mov	r4, r0
   d65c8:	4608      	mov	r0, r1
   d65ca:	2100      	movs	r1, #0
   d65cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d65d0:	4b03      	ldr	r3, [pc, #12]	; (d65e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d65d2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d65d4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d65d6:	4611      	mov	r1, r2
   d65d8:	f7ff f91c 	bl	d5814 <hal_i2c_init>
}
   d65dc:	4620      	mov	r0, r4
   d65de:	bd10      	pop	{r4, pc}
   d65e0:	000d7e4c 	.word	0x000d7e4c

000d65e4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d65e4:	7c00      	ldrb	r0, [r0, #16]
   d65e6:	2200      	movs	r2, #0
   d65e8:	f7ff b8c4 	b.w	d5774 <hal_i2c_set_speed>

000d65ec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d65ec:	2300      	movs	r3, #0
   d65ee:	7c00      	ldrb	r0, [r0, #16]
   d65f0:	461a      	mov	r2, r3
   d65f2:	4619      	mov	r1, r3
   d65f4:	f7ff b8c6 	b.w	d5784 <hal_i2c_begin>

000d65f8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d65f8:	7c00      	ldrb	r0, [r0, #16]
   d65fa:	2200      	movs	r2, #0
   d65fc:	f7ff b8ca 	b.w	d5794 <hal_i2c_begin_transmission>

000d6600 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6600:	b2c9      	uxtb	r1, r1
   d6602:	f7ff bff9 	b.w	d65f8 <_ZN7TwoWire17beginTransmissionEh>

000d6606 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6606:	7c00      	ldrb	r0, [r0, #16]
   d6608:	2200      	movs	r2, #0
   d660a:	f7ff b8cb 	b.w	d57a4 <hal_i2c_end_transmission>

000d660e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d660e:	2101      	movs	r1, #1
   d6610:	f7ff bff9 	b.w	d6606 <_ZN7TwoWire15endTransmissionEh>

000d6614 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6614:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6616:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6618:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d661c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d661e:	2201      	movs	r2, #1
   d6620:	f04f 33ff 	mov.w	r3, #4294967295
   d6624:	f10d 0107 	add.w	r1, sp, #7
   d6628:	47a0      	blx	r4
}
   d662a:	b002      	add	sp, #8
   d662c:	bd10      	pop	{r4, pc}

000d662e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d662e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6630:	6803      	ldr	r3, [r0, #0]
   d6632:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6634:	f04f 33ff 	mov.w	r3, #4294967295
   d6638:	46a4      	mov	ip, r4
}
   d663a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d663e:	4760      	bx	ip

000d6640 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6640:	b513      	push	{r0, r1, r4, lr}
   d6642:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d6644:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6646:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d664a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d664c:	f10d 0107 	add.w	r1, sp, #7
   d6650:	2201      	movs	r2, #1
   d6652:	47a0      	blx	r4
}
   d6654:	b002      	add	sp, #8
   d6656:	bd10      	pop	{r4, pc}

000d6658 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d6658:	4770      	bx	lr

000d665a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d665a:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d665c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d665e:	681a      	ldr	r2, [r3, #0]
   d6660:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d6662:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d6664:	da10      	bge.n	d6688 <_ZN9TCPClient9connectedEv+0x2e>
   d6666:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d666a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d666e:	429a      	cmp	r2, r3
   d6670:	d10a      	bne.n	d6688 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d6672:	6803      	ldr	r3, [r0, #0]
   d6674:	691b      	ldr	r3, [r3, #16]
   d6676:	4798      	blx	r3
        if (!rv) {
   d6678:	4604      	mov	r4, r0
   d667a:	b928      	cbnz	r0, d6688 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d667c:	682b      	ldr	r3, [r5, #0]
   d667e:	4628      	mov	r0, r5
   d6680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6682:	4798      	blx	r3
        rv = available();
   d6684:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d6686:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d6688:	2001      	movs	r0, #1
   d668a:	e7fc      	b.n	d6686 <_ZN9TCPClient9connectedEv+0x2c>

000d668c <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d668c:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d668e:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d6690:	43c0      	mvns	r0, r0
   d6692:	0fc0      	lsrs	r0, r0, #31
   d6694:	4770      	bx	lr

000d6696 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6696:	4770      	bx	lr

000d6698 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6698:	4b06      	ldr	r3, [pc, #24]	; (d66b4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d669a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d669c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d669e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d66a2:	d005      	beq.n	d66b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d66a4:	4608      	mov	r0, r1
   d66a6:	f000 fc49 	bl	d6f3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d66aa:	2800      	cmp	r0, #0
	return nullptr;
   d66ac:	bf08      	it	eq
   d66ae:	2400      	moveq	r4, #0
      }
   d66b0:	4620      	mov	r0, r4
   d66b2:	bd10      	pop	{r4, pc}
   d66b4:	000d7da8 	.word	0x000d7da8

000d66b8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d66b8:	b510      	push	{r4, lr}
   d66ba:	21ac      	movs	r1, #172	; 0xac
   d66bc:	4604      	mov	r4, r0
   d66be:	f000 fc38 	bl	d6f32 <_ZdlPvj>
   d66c2:	4620      	mov	r0, r4
   d66c4:	bd10      	pop	{r4, pc}

000d66c6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d66c6:	f7fd bce8 	b.w	d409a <_ZdlPv>

000d66ca <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d66ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d66ce:	f04f 0800 	mov.w	r8, #0
   d66d2:	b086      	sub	sp, #24
   d66d4:	461d      	mov	r5, r3
   d66d6:	f8c0 8004 	str.w	r8, [r0, #4]
   d66da:	4604      	mov	r4, r0
   d66dc:	460e      	mov	r6, r1
   d66de:	4617      	mov	r7, r2
    struct timeval tv = {};
   d66e0:	4641      	mov	r1, r8
   d66e2:	2210      	movs	r2, #16
   d66e4:	a802      	add	r0, sp, #8
   d66e6:	f000 fd57 	bl	d7198 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d66ea:	1c6b      	adds	r3, r5, #1
   d66ec:	d009      	beq.n	d6702 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d66ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d66f2:	fbb5 f3f0 	udiv	r3, r5, r0
   d66f6:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d66fa:	fb00 5313 	mls	r3, r0, r3, r5
   d66fe:	4358      	muls	r0, r3
   d6700:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6702:	6960      	ldr	r0, [r4, #20]
   d6704:	2310      	movs	r3, #16
   d6706:	9300      	str	r3, [sp, #0]
   d6708:	6800      	ldr	r0, [r0, #0]
   d670a:	ab02      	add	r3, sp, #8
   d670c:	f241 0205 	movw	r2, #4101	; 0x1005
   d6710:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6714:	f7ff f886 	bl	d5824 <sock_setsockopt>
    if (ret < 0) {
   d6718:	2800      	cmp	r0, #0
   d671a:	da07      	bge.n	d672c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d671c:	f7ff f9ee 	bl	d5afc <__errno>
   d6720:	6803      	ldr	r3, [r0, #0]
   d6722:	6063      	str	r3, [r4, #4]
        return 0;
   d6724:	2000      	movs	r0, #0
}
   d6726:	b006      	add	sp, #24
   d6728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d672c:	6960      	ldr	r0, [r4, #20]
   d672e:	2300      	movs	r3, #0
   d6730:	6800      	ldr	r0, [r0, #0]
   d6732:	463a      	mov	r2, r7
   d6734:	4631      	mov	r1, r6
   d6736:	f7ff f895 	bl	d5864 <sock_send>
    if (ret < 0) {
   d673a:	1e03      	subs	r3, r0, #0
   d673c:	dbee      	blt.n	d671c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d673e:	4618      	mov	r0, r3
   d6740:	e7f1      	b.n	d6726 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d6744 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6744:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d6746:	6984      	ldr	r4, [r0, #24]
   d6748:	4b0a      	ldr	r3, [pc, #40]	; (d6774 <_ZN9TCPClientD1Ev+0x30>)
   d674a:	6003      	str	r3, [r0, #0]
   d674c:	4605      	mov	r5, r0
   d674e:	b17c      	cbz	r4, d6770 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d6750:	6863      	ldr	r3, [r4, #4]
   d6752:	3b01      	subs	r3, #1
   d6754:	6063      	str	r3, [r4, #4]
   d6756:	b95b      	cbnz	r3, d6770 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d6758:	6823      	ldr	r3, [r4, #0]
   d675a:	4620      	mov	r0, r4
   d675c:	689b      	ldr	r3, [r3, #8]
   d675e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6760:	68a3      	ldr	r3, [r4, #8]
   d6762:	3b01      	subs	r3, #1
   d6764:	60a3      	str	r3, [r4, #8]
   d6766:	b91b      	cbnz	r3, d6770 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d6768:	6823      	ldr	r3, [r4, #0]
   d676a:	4620      	mov	r0, r4
   d676c:	68db      	ldr	r3, [r3, #12]
   d676e:	4798      	blx	r3
   d6770:	4628      	mov	r0, r5
   d6772:	bd38      	pop	{r3, r4, r5, pc}
   d6774:	000d7ea8 	.word	0x000d7ea8

000d6778 <_ZN9TCPClientD0Ev>:
   d6778:	b510      	push	{r4, lr}
   d677a:	4604      	mov	r4, r0
   d677c:	f7ff ffe2 	bl	d6744 <_ZN9TCPClientD1Ev>
   d6780:	4620      	mov	r0, r4
   d6782:	211c      	movs	r1, #28
   d6784:	f000 fbd5 	bl	d6f32 <_ZdlPvj>
   d6788:	4620      	mov	r0, r4
   d678a:	bd10      	pop	{r4, pc}

000d678c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d678c:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d678e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d6790:	4b05      	ldr	r3, [pc, #20]	; (d67a8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6792:	4604      	mov	r4, r0
   d6794:	358c      	adds	r5, #140	; 0x8c
   d6796:	f844 3b04 	str.w	r3, [r4], #4
   d679a:	4606      	mov	r6, r0
   d679c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d679e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67a0:	682b      	ldr	r3, [r5, #0]
   d67a2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d67a4:	4630      	mov	r0, r6
   d67a6:	bd70      	pop	{r4, r5, r6, pc}
   d67a8:	000d7dd8 	.word	0x000d7dd8

000d67ac <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d67ac:	b510      	push	{r4, lr}
   d67ae:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d67b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d67b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d67b8:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d67ba:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d67bc:	d005      	beq.n	d67ca <_ZN9TCPClient4peekEv+0x1e>
   d67be:	6963      	ldr	r3, [r4, #20]
   d67c0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d67c4:	4413      	add	r3, r2
   d67c6:	7918      	ldrb	r0, [r3, #4]
}
   d67c8:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d67ca:	6803      	ldr	r3, [r0, #0]
   d67cc:	691b      	ldr	r3, [r3, #16]
   d67ce:	4798      	blx	r3
   d67d0:	2800      	cmp	r0, #0
   d67d2:	d1f4      	bne.n	d67be <_ZN9TCPClient4peekEv+0x12>
   d67d4:	f04f 30ff 	mov.w	r0, #4294967295
   d67d8:	e7f6      	b.n	d67c8 <_ZN9TCPClient4peekEv+0x1c>

000d67da <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d67da:	b510      	push	{r4, lr}
   d67dc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d67de:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d67e2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d67e6:	429a      	cmp	r2, r3
int TCPClient::read() {
   d67e8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d67ea:	d008      	beq.n	d67fe <_ZN9TCPClient4readEv+0x24>
   d67ec:	6963      	ldr	r3, [r4, #20]
   d67ee:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d67f2:	1c51      	adds	r1, r2, #1
   d67f4:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d67f8:	4413      	add	r3, r2
   d67fa:	7918      	ldrb	r0, [r3, #4]
}
   d67fc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d67fe:	6803      	ldr	r3, [r0, #0]
   d6800:	691b      	ldr	r3, [r3, #16]
   d6802:	4798      	blx	r3
   d6804:	2800      	cmp	r0, #0
   d6806:	d1f1      	bne.n	d67ec <_ZN9TCPClient4readEv+0x12>
   d6808:	f04f 30ff 	mov.w	r0, #4294967295
   d680c:	e7f6      	b.n	d67fc <_ZN9TCPClient4readEv+0x22>

000d680e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6810:	6943      	ldr	r3, [r0, #20]
   d6812:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6814:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6818:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d681c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d681e:	4605      	mov	r5, r0
   d6820:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6822:	d016      	beq.n	d6852 <_ZN9TCPClient4readEPhj+0x44>
   d6824:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d6826:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d682a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d682e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6830:	42bc      	cmp	r4, r7
   d6832:	bf28      	it	cs
   d6834:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6836:	3304      	adds	r3, #4
   d6838:	4622      	mov	r2, r4
   d683a:	4419      	add	r1, r3
   d683c:	4630      	mov	r0, r6
   d683e:	f000 fc9d 	bl	d717c <memcpy>
   d6842:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6844:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6848:	4423      	add	r3, r4
   d684a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d684e:	4620      	mov	r0, r4
   d6850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d6852:	6803      	ldr	r3, [r0, #0]
   d6854:	691b      	ldr	r3, [r3, #16]
   d6856:	4798      	blx	r3
   d6858:	2800      	cmp	r0, #0
   d685a:	d1e3      	bne.n	d6824 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d685c:	f04f 34ff 	mov.w	r4, #4294967295
   d6860:	e7f5      	b.n	d684e <_ZN9TCPClient4readEPhj+0x40>

000d6862 <_ZN9TCPClient12flush_bufferEv>:
   d6862:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6864:	2300      	movs	r3, #0
   d6866:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d686a:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d686c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d6870:	4770      	bx	lr

000d6872 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6876:	461f      	mov	r7, r3
    stop();
   d6878:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d687a:	460c      	mov	r4, r1
    stop();
   d687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d687e:	b08a      	sub	sp, #40	; 0x28
   d6880:	4605      	mov	r5, r0
   d6882:	4616      	mov	r6, r2
    stop();
   d6884:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6886:	7d23      	ldrb	r3, [r4, #20]
   d6888:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d688c:	2b04      	cmp	r3, #4
   d688e:	bf0c      	ite	eq
   d6890:	2002      	moveq	r0, #2
   d6892:	200a      	movne	r0, #10
   d6894:	2206      	movs	r2, #6
   d6896:	2101      	movs	r1, #1
   d6898:	f7fe ffec 	bl	d5874 <sock_socket>
   d689c:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d68a0:	696b      	ldr	r3, [r5, #20]
   d68a2:	681b      	ldr	r3, [r3, #0]
   d68a4:	2b00      	cmp	r3, #0
   d68a6:	da08      	bge.n	d68ba <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d68a8:	682b      	ldr	r3, [r5, #0]
   d68aa:	4628      	mov	r0, r5
   d68ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d68ae:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d68b0:	4798      	blx	r3
}
   d68b2:	4620      	mov	r0, r4
   d68b4:	b00a      	add	sp, #40	; 0x28
   d68b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d68ba:	4628      	mov	r0, r5
   d68bc:	f7ff ffd1 	bl	d6862 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d68c0:	b1b7      	cbz	r7, d68f0 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d68c2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d68c4:	a903      	add	r1, sp, #12
   d68c6:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d68c8:	9303      	str	r3, [sp, #12]
   d68ca:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d68ce:	f7fe feb9 	bl	d5644 <if_index_to_name>
   d68d2:	2800      	cmp	r0, #0
   d68d4:	d1e8      	bne.n	d68a8 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d68d6:	6968      	ldr	r0, [r5, #20]
   d68d8:	2306      	movs	r3, #6
   d68da:	9300      	str	r3, [sp, #0]
   d68dc:	6800      	ldr	r0, [r0, #0]
   d68de:	ab03      	add	r3, sp, #12
   d68e0:	f241 020b 	movw	r2, #4107	; 0x100b
   d68e4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d68e8:	f7fe ff9c 	bl	d5824 <sock_setsockopt>
   d68ec:	2800      	cmp	r0, #0
   d68ee:	d1db      	bne.n	d68a8 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d68f0:	221c      	movs	r2, #28
   d68f2:	2100      	movs	r1, #0
   d68f4:	a803      	add	r0, sp, #12
   d68f6:	f000 fc4f 	bl	d7198 <memset>
    if (ip.version() == 4) {
   d68fa:	7d23      	ldrb	r3, [r4, #20]
   d68fc:	2b04      	cmp	r3, #4
   d68fe:	d11d      	bne.n	d693c <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6900:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d6904:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d6906:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d690a:	f7fe feeb 	bl	d56e4 <inet_htons>
   d690e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6912:	6860      	ldr	r0, [r4, #4]
   d6914:	f7fe fede 	bl	d56d4 <inet_htonl>
   d6918:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d691a:	696b      	ldr	r3, [r5, #20]
   d691c:	221c      	movs	r2, #28
   d691e:	6818      	ldr	r0, [r3, #0]
   d6920:	a903      	add	r1, sp, #12
   d6922:	f7fe ff8f 	bl	d5844 <sock_connect>
   d6926:	2800      	cmp	r0, #0
   d6928:	d1be      	bne.n	d68a8 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d692a:	3404      	adds	r4, #4
   d692c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d692e:	696d      	ldr	r5, [r5, #20]
   d6930:	358c      	adds	r5, #140	; 0x8c
   d6932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6934:	6823      	ldr	r3, [r4, #0]
   d6936:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d6938:	2401      	movs	r4, #1
   d693a:	e7ba      	b.n	d68b2 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d693c:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d6940:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d6942:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d6946:	f7fe fecd 	bl	d56e4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d694a:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d694c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6950:	1d23      	adds	r3, r4, #4
   d6952:	f104 0714 	add.w	r7, r4, #20
   d6956:	6818      	ldr	r0, [r3, #0]
   d6958:	6859      	ldr	r1, [r3, #4]
   d695a:	4632      	mov	r2, r6
   d695c:	c203      	stmia	r2!, {r0, r1}
   d695e:	3308      	adds	r3, #8
   d6960:	42bb      	cmp	r3, r7
   d6962:	4616      	mov	r6, r2
   d6964:	d1f7      	bne.n	d6956 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d6966:	e7d8      	b.n	d691a <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d6968 <_ZN9TCPClient9availableEv>:
{
   d6968:	b530      	push	{r4, r5, lr}
   d696a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d696c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d6970:	b08b      	sub	sp, #44	; 0x2c
   d6972:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d6974:	b12b      	cbz	r3, d6982 <_ZN9TCPClient9availableEv+0x1a>
   d6976:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d697a:	429a      	cmp	r2, r3
   d697c:	d101      	bne.n	d6982 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d697e:	f7ff ff70 	bl	d6862 <_ZN9TCPClient12flush_bufferEv>
   d6982:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d6984:	6808      	ldr	r0, [r1, #0]
   d6986:	2800      	cmp	r0, #0
   d6988:	db18      	blt.n	d69bc <_ZN9TCPClient9availableEv+0x54>
   d698a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d698e:	2d7f      	cmp	r5, #127	; 0x7f
   d6990:	d814      	bhi.n	d69bc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6992:	3104      	adds	r1, #4
   d6994:	2308      	movs	r3, #8
   d6996:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d699a:	4429      	add	r1, r5
   d699c:	f7fe ff5a 	bl	d5854 <sock_recv>
            if (ret > 0) {
   d69a0:	2800      	cmp	r0, #0
   d69a2:	dd13      	ble.n	d69cc <_ZN9TCPClient9availableEv+0x64>
   d69a4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d69a6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d69aa:	b90a      	cbnz	r2, d69b0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d69ac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d69b0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d69b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d69b6:	4410      	add	r0, r2
   d69b8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d69bc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d69be:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d69c2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d69c6:	1ac0      	subs	r0, r0, r3
   d69c8:	b00b      	add	sp, #44	; 0x2c
   d69ca:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d69cc:	f7ff f896 	bl	d5afc <__errno>
   d69d0:	6803      	ldr	r3, [r0, #0]
   d69d2:	2b0b      	cmp	r3, #11
   d69d4:	d0f2      	beq.n	d69bc <_ZN9TCPClient9availableEv+0x54>
   d69d6:	f7ff f891 	bl	d5afc <__errno>
   d69da:	6803      	ldr	r3, [r0, #0]
   d69dc:	2b0b      	cmp	r3, #11
   d69de:	d0ed      	beq.n	d69bc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d69e0:	2320      	movs	r3, #32
   d69e2:	2500      	movs	r5, #0
   d69e4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d69e8:	f7ff f888 	bl	d5afc <__errno>
   d69ec:	6803      	ldr	r3, [r0, #0]
   d69ee:	9301      	str	r3, [sp, #4]
   d69f0:	4b08      	ldr	r3, [pc, #32]	; (d6a14 <_ZN9TCPClient9availableEv+0xac>)
   d69f2:	4909      	ldr	r1, [pc, #36]	; (d6a18 <_ZN9TCPClient9availableEv+0xb0>)
   d69f4:	9300      	str	r3, [sp, #0]
   d69f6:	aa02      	add	r2, sp, #8
   d69f8:	462b      	mov	r3, r5
   d69fa:	2032      	movs	r0, #50	; 0x32
   d69fc:	f7fe ffc2 	bl	d5984 <log_message>
                    sock_close(d_->sock);
   d6a00:	6963      	ldr	r3, [r4, #20]
   d6a02:	6818      	ldr	r0, [r3, #0]
   d6a04:	f7fe ff16 	bl	d5834 <sock_close>
   d6a08:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6a0a:	f04f 32ff 	mov.w	r2, #4294967295
   d6a0e:	601a      	str	r2, [r3, #0]
   d6a10:	e7d4      	b.n	d69bc <_ZN9TCPClient9availableEv+0x54>
   d6a12:	bf00      	nop
   d6a14:	000d7e73 	.word	0x000d7e73
   d6a18:	000d7e6c 	.word	0x000d7e6c

000d6a1c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d6a1c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6a1e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6a20:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6a22:	6818      	ldr	r0, [r3, #0]
   d6a24:	2800      	cmp	r0, #0
   d6a26:	db01      	blt.n	d6a2c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6a28:	f7fe ff04 	bl	d5834 <sock_close>
   d6a2c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d6a2e:	f04f 32ff 	mov.w	r2, #4294967295
   d6a32:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6a34:	6960      	ldr	r0, [r4, #20]
   d6a36:	2211      	movs	r2, #17
   d6a38:	2100      	movs	r1, #0
   d6a3a:	308c      	adds	r0, #140	; 0x8c
   d6a3c:	f000 fbac 	bl	d7198 <memset>
    flush_buffer();
   d6a40:	4620      	mov	r0, r4
}
   d6a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d6a46:	f7ff bf0c 	b.w	d6862 <_ZN9TCPClient12flush_bufferEv>

000d6a4a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d6a4a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6a4c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d6a4e:	4604      	mov	r4, r0
          total(0) {
   d6a50:	6001      	str	r1, [r0, #0]
   d6a52:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d6a56:	3088      	adds	r0, #136	; 0x88
   d6a58:	f7ff fc00 	bl	d625c <_ZN9IPAddressC1Ev>
}
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	bd10      	pop	{r4, pc}

000d6a60 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d6a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6a62:	2300      	movs	r3, #0
   d6a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6a68:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d6a6c:	4a0e      	ldr	r2, [pc, #56]	; (d6aa8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d6a6e:	6103      	str	r3, [r0, #16]
   d6a70:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6a72:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d6a74:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6a76:	20ac      	movs	r0, #172	; 0xac
   d6a78:	9101      	str	r1, [sp, #4]
   d6a7a:	f7fd fb0a 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6a7e:	1e05      	subs	r5, r0, #0
   d6a80:	f105 060c 	add.w	r6, r5, #12
   d6a84:	d008      	beq.n	d6a98 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d6a86:	2301      	movs	r3, #1
   d6a88:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6a8c:	4b07      	ldr	r3, [pc, #28]	; (d6aac <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6a8e:	9901      	ldr	r1, [sp, #4]
   d6a90:	602b      	str	r3, [r5, #0]
   d6a92:	4630      	mov	r0, r6
   d6a94:	f7ff ffd9 	bl	d6a4a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d6a98:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d6a9a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d6a9e:	f7ff fee0 	bl	d6862 <_ZN9TCPClient12flush_bufferEv>
}
   d6aa2:	b002      	add	sp, #8
   d6aa4:	bd70      	pop	{r4, r5, r6, pc}
   d6aa6:	bf00      	nop
   d6aa8:	000d7ea8 	.word	0x000d7ea8
   d6aac:	000d7e8c 	.word	0x000d7e8c

000d6ab0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d6ab0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6ab2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d6ab6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6ab8:	f7ff ffd2 	bl	d6a60 <_ZN9TCPClientC1Ei>
}
   d6abc:	4620      	mov	r0, r4
   d6abe:	bd10      	pop	{r4, pc}

000d6ac0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d6ac0:	b510      	push	{r4, lr}
   d6ac2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6ac4:	6800      	ldr	r0, [r0, #0]
   d6ac6:	2800      	cmp	r0, #0
   d6ac8:	db01      	blt.n	d6ace <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6aca:	f7fe feb3 	bl	d5834 <sock_close>
    }
}
   d6ace:	4620      	mov	r0, r4
   d6ad0:	bd10      	pop	{r4, pc}

000d6ad2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d6ad2:	300c      	adds	r0, #12
   d6ad4:	f7ff bff4 	b.w	d6ac0 <_ZN9TCPClient4DataD1Ev>

000d6ad8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6adc:	4698      	mov	r8, r3
    stop();
   d6ade:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6ae0:	b093      	sub	sp, #76	; 0x4c
   d6ae2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6ae4:	2400      	movs	r4, #0
    stop();
   d6ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6ae8:	4606      	mov	r6, r0
   d6aea:	4617      	mov	r7, r2
    stop();
   d6aec:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6aee:	4628      	mov	r0, r5
   d6af0:	466b      	mov	r3, sp
   d6af2:	4622      	mov	r2, r4
   d6af4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6af6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6af8:	f7fe fd64 	bl	d55c4 <netdb_getaddrinfo>
   d6afc:	4605      	mov	r5, r0
   d6afe:	2800      	cmp	r0, #0
   d6b00:	d163      	bne.n	d6bca <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6b02:	9b00      	ldr	r3, [sp, #0]
   d6b04:	2b00      	cmp	r3, #0
   d6b06:	d04b      	beq.n	d6ba0 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6b08:	695b      	ldr	r3, [r3, #20]
   d6b0a:	2b00      	cmp	r3, #0
   d6b0c:	d048      	beq.n	d6ba0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d6b0e:	a806      	add	r0, sp, #24
   d6b10:	f7ff fba4 	bl	d625c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6b14:	9b00      	ldr	r3, [sp, #0]
   d6b16:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6b18:	7863      	ldrb	r3, [r4, #1]
   d6b1a:	2b02      	cmp	r3, #2
   d6b1c:	d104      	bne.n	d6b28 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6b1e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6b20:	a806      	add	r0, sp, #24
   d6b22:	f7ff f967 	bl	d5df4 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6b26:	e026      	b.n	d6b76 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6b28:	2b0a      	cmp	r3, #10
   d6b2a:	d124      	bne.n	d6b76 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d6b2c:	2211      	movs	r2, #17
   d6b2e:	4629      	mov	r1, r5
   d6b30:	a801      	add	r0, sp, #4
   d6b32:	f000 fb31 	bl	d7198 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6b36:	68a3      	ldr	r3, [r4, #8]
   d6b38:	2b00      	cmp	r3, #0
   d6b3a:	d038      	beq.n	d6bae <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6b3c:	f104 0308 	add.w	r3, r4, #8
   d6b40:	f10d 0c04 	add.w	ip, sp, #4
   d6b44:	3418      	adds	r4, #24
   d6b46:	6818      	ldr	r0, [r3, #0]
   d6b48:	6859      	ldr	r1, [r3, #4]
   d6b4a:	4662      	mov	r2, ip
   d6b4c:	c203      	stmia	r2!, {r0, r1}
   d6b4e:	3308      	adds	r3, #8
   d6b50:	42a3      	cmp	r3, r4
   d6b52:	4694      	mov	ip, r2
   d6b54:	d1f7      	bne.n	d6b46 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d6b56:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6b58:	a901      	add	r1, sp, #4
   d6b5a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d6b5c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6b60:	f7ff fb8a 	bl	d6278 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d6b64:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d6b68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6b6c:	ac07      	add	r4, sp, #28
   d6b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b70:	f8dc 3000 	ldr.w	r3, [ip]
   d6b74:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6b76:	a806      	add	r0, sp, #24
   d6b78:	f7ff fb90 	bl	d629c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6b7c:	b180      	cbz	r0, d6ba0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d6b7e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6b80:	ad07      	add	r5, sp, #28
   d6b82:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6b86:	4b12      	ldr	r3, [pc, #72]	; (d6bd0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6b88:	930c      	str	r3, [sp, #48]	; 0x30
   d6b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b8c:	ac0d      	add	r4, sp, #52	; 0x34
   d6b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b90:	682b      	ldr	r3, [r5, #0]
   d6b92:	7023      	strb	r3, [r4, #0]
   d6b94:	463a      	mov	r2, r7
   d6b96:	4643      	mov	r3, r8
   d6b98:	a90c      	add	r1, sp, #48	; 0x30
   d6b9a:	4630      	mov	r0, r6
   d6b9c:	47c8      	blx	r9
   d6b9e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6ba0:	9800      	ldr	r0, [sp, #0]
   d6ba2:	f7fe fd07 	bl	d55b4 <netdb_freeaddrinfo>
}
   d6ba6:	4628      	mov	r0, r5
   d6ba8:	b013      	add	sp, #76	; 0x4c
   d6baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6bae:	68e3      	ldr	r3, [r4, #12]
   d6bb0:	2b00      	cmp	r3, #0
   d6bb2:	d1c3      	bne.n	d6b3c <_ZN9TCPClient7connectEPKctm+0x64>
   d6bb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6bb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6bbc:	f7fe fd8a 	bl	d56d4 <inet_htonl>
   d6bc0:	4581      	cmp	r9, r0
   d6bc2:	d1bb      	bne.n	d6b3c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6bc4:	f104 0114 	add.w	r1, r4, #20
   d6bc8:	e7aa      	b.n	d6b20 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6bca:	4625      	mov	r5, r4
   d6bcc:	e7e8      	b.n	d6ba0 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6bce:	bf00      	nop
   d6bd0:	000d7dd8 	.word	0x000d7dd8

000d6bd4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6bd4:	2200      	movs	r2, #0
   d6bd6:	6840      	ldr	r0, [r0, #4]
   d6bd8:	4611      	mov	r1, r2
   d6bda:	f7fe bf1f 	b.w	d5a1c <network_ready>

000d6bde <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6bde:	2200      	movs	r2, #0
   d6be0:	6840      	ldr	r0, [r0, #4]
   d6be2:	4611      	mov	r1, r2
   d6be4:	f7fe bf3a 	b.w	d5a5c <network_listening>

000d6be8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6be8:	2200      	movs	r2, #0
   d6bea:	6840      	ldr	r0, [r0, #4]
   d6bec:	4611      	mov	r1, r2
   d6bee:	f7fe bf45 	b.w	d5a7c <network_get_listen_timeout>

000d6bf2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6bf2:	6840      	ldr	r0, [r0, #4]
   d6bf4:	2200      	movs	r2, #0
   d6bf6:	f7fe bf39 	b.w	d5a6c <network_set_listen_timeout>

000d6bfa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6bfa:	6840      	ldr	r0, [r0, #4]
   d6bfc:	2200      	movs	r2, #0
   d6bfe:	f081 0101 	eor.w	r1, r1, #1
   d6c02:	f7fe bf23 	b.w	d5a4c <network_listen>

000d6c06 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6c06:	2300      	movs	r3, #0
   d6c08:	6840      	ldr	r0, [r0, #4]
   d6c0a:	461a      	mov	r2, r3
   d6c0c:	4619      	mov	r1, r3
   d6c0e:	f7fe bf15 	b.w	d5a3c <network_off>

000d6c12 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6c12:	2200      	movs	r2, #0
   d6c14:	6840      	ldr	r0, [r0, #4]
   d6c16:	4611      	mov	r1, r2
   d6c18:	f7fe bef0 	b.w	d59fc <network_connecting>

000d6c1c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6c1c:	6840      	ldr	r0, [r0, #4]
   d6c1e:	2200      	movs	r2, #0
   d6c20:	2102      	movs	r1, #2
   d6c22:	f7fe bef3 	b.w	d5a0c <network_disconnect>

000d6c26 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6c26:	2300      	movs	r3, #0
   d6c28:	6840      	ldr	r0, [r0, #4]
   d6c2a:	461a      	mov	r2, r3
   d6c2c:	f7fe bede 	b.w	d59ec <network_connect>

000d6c30 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6c30:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6c32:	2204      	movs	r2, #4
   d6c34:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6c36:	4a02      	ldr	r2, [pc, #8]	; (d6c40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6c38:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6c3a:	4770      	bx	lr
   d6c3c:	2003e7c4 	.word	0x2003e7c4
   d6c40:	000d7ef4 	.word	0x000d7ef4

000d6c44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6c44:	2300      	movs	r3, #0
   d6c46:	6840      	ldr	r0, [r0, #4]
   d6c48:	461a      	mov	r2, r3
   d6c4a:	f7fe becf 	b.w	d59ec <network_connect>

000d6c4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6c4e:	6840      	ldr	r0, [r0, #4]
   d6c50:	2200      	movs	r2, #0
   d6c52:	2102      	movs	r1, #2
   d6c54:	f7fe beda 	b.w	d5a0c <network_disconnect>

000d6c58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6c58:	2200      	movs	r2, #0
   d6c5a:	6840      	ldr	r0, [r0, #4]
   d6c5c:	4611      	mov	r1, r2
   d6c5e:	f7fe becd 	b.w	d59fc <network_connecting>

000d6c62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6c62:	2200      	movs	r2, #0
   d6c64:	6840      	ldr	r0, [r0, #4]
   d6c66:	4611      	mov	r1, r2
   d6c68:	f7fe bed8 	b.w	d5a1c <network_ready>

000d6c6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6c6c:	2300      	movs	r3, #0
   d6c6e:	6840      	ldr	r0, [r0, #4]
   d6c70:	461a      	mov	r2, r3
   d6c72:	4619      	mov	r1, r3
   d6c74:	f7fe beda 	b.w	d5a2c <network_on>

000d6c78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6c78:	2300      	movs	r3, #0
   d6c7a:	6840      	ldr	r0, [r0, #4]
   d6c7c:	461a      	mov	r2, r3
   d6c7e:	4619      	mov	r1, r3
   d6c80:	f7fe bedc 	b.w	d5a3c <network_off>

000d6c84 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6c84:	6840      	ldr	r0, [r0, #4]
   d6c86:	2100      	movs	r1, #0
   d6c88:	f7fe bf00 	b.w	d5a8c <network_is_on>

000d6c8c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6c8c:	6840      	ldr	r0, [r0, #4]
   d6c8e:	2100      	movs	r1, #0
   d6c90:	f7fe bf04 	b.w	d5a9c <network_is_off>

000d6c94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6c94:	6840      	ldr	r0, [r0, #4]
   d6c96:	2200      	movs	r2, #0
   d6c98:	f081 0101 	eor.w	r1, r1, #1
   d6c9c:	f7fe bed6 	b.w	d5a4c <network_listen>

000d6ca0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6ca0:	6840      	ldr	r0, [r0, #4]
   d6ca2:	2200      	movs	r2, #0
   d6ca4:	f7fe bee2 	b.w	d5a6c <network_set_listen_timeout>

000d6ca8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6ca8:	2200      	movs	r2, #0
   d6caa:	6840      	ldr	r0, [r0, #4]
   d6cac:	4611      	mov	r1, r2
   d6cae:	f7fe bee5 	b.w	d5a7c <network_get_listen_timeout>

000d6cb2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6cb2:	2200      	movs	r2, #0
   d6cb4:	6840      	ldr	r0, [r0, #4]
   d6cb6:	4611      	mov	r1, r2
   d6cb8:	f7fe bed0 	b.w	d5a5c <network_listening>

000d6cbc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6cc0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6cc2:	b095      	sub	sp, #84	; 0x54
   d6cc4:	4616      	mov	r6, r2
   d6cc6:	460d      	mov	r5, r1
   d6cc8:	4607      	mov	r7, r0
    IPAddress addr;
   d6cca:	f7ff fac7 	bl	d625c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6cce:	4621      	mov	r1, r4
   d6cd0:	2218      	movs	r2, #24
   d6cd2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6cd4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6cd6:	f000 fa5f 	bl	d7198 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6cda:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6cdc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6ce0:	4621      	mov	r1, r4
   d6ce2:	466b      	mov	r3, sp
   d6ce4:	aa0c      	add	r2, sp, #48	; 0x30
   d6ce6:	4630      	mov	r0, r6
   d6ce8:	f7fe fc6c 	bl	d55c4 <netdb_getaddrinfo>
    if (!r) {
   d6cec:	4604      	mov	r4, r0
   d6cee:	2800      	cmp	r0, #0
   d6cf0:	d14c      	bne.n	d6d8c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6cf2:	4602      	mov	r2, r0
   d6cf4:	2101      	movs	r1, #1
   d6cf6:	6868      	ldr	r0, [r5, #4]
   d6cf8:	f7fe fe90 	bl	d5a1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6cfc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6cfe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d00:	4622      	mov	r2, r4
   d6d02:	6868      	ldr	r0, [r5, #4]
   d6d04:	f7fe fe8a 	bl	d5a1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d08:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d0a:	4681      	mov	r9, r0
        bool ok = false;
   d6d0c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d0e:	2e00      	cmp	r6, #0
   d6d10:	d03c      	beq.n	d6d8c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6d12:	2900      	cmp	r1, #0
   d6d14:	d13a      	bne.n	d6d8c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6d16:	6873      	ldr	r3, [r6, #4]
   d6d18:	2b02      	cmp	r3, #2
   d6d1a:	d003      	beq.n	d6d24 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6d1c:	2b0a      	cmp	r3, #10
   d6d1e:	d011      	beq.n	d6d44 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d20:	69f6      	ldr	r6, [r6, #28]
   d6d22:	e7f4      	b.n	d6d0e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6d24:	f1b8 0f00 	cmp.w	r8, #0
   d6d28:	d00a      	beq.n	d6d40 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6d2a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6d2c:	a806      	add	r0, sp, #24
   d6d2e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6d30:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6d32:	f7ff fad7 	bl	d62e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d38:	1d3c      	adds	r4, r7, #4
   d6d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d3c:	682b      	ldr	r3, [r5, #0]
   d6d3e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6d40:	4641      	mov	r1, r8
   d6d42:	e7ed      	b.n	d6d20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6d44:	f1b9 0f00 	cmp.w	r9, #0
   d6d48:	d101      	bne.n	d6d4e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6d4a:	4649      	mov	r1, r9
   d6d4c:	e7e8      	b.n	d6d20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6d4e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6d50:	2210      	movs	r2, #16
   d6d52:	a801      	add	r0, sp, #4
   d6d54:	f000 fa20 	bl	d7198 <memset>
                    a.v = 6;
   d6d58:	2306      	movs	r3, #6
   d6d5a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6d5e:	ad01      	add	r5, sp, #4
   d6d60:	f104 0308 	add.w	r3, r4, #8
   d6d64:	3418      	adds	r4, #24
   d6d66:	6818      	ldr	r0, [r3, #0]
   d6d68:	6859      	ldr	r1, [r3, #4]
   d6d6a:	462a      	mov	r2, r5
   d6d6c:	c203      	stmia	r2!, {r0, r1}
   d6d6e:	3308      	adds	r3, #8
   d6d70:	42a3      	cmp	r3, r4
   d6d72:	4615      	mov	r5, r2
   d6d74:	d1f7      	bne.n	d6d66 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6d76:	a901      	add	r1, sp, #4
   d6d78:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6d7a:	ad07      	add	r5, sp, #28
   d6d7c:	f7ff fa7c 	bl	d6278 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d82:	1d3c      	adds	r4, r7, #4
   d6d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d86:	682b      	ldr	r3, [r5, #0]
   d6d88:	7023      	strb	r3, [r4, #0]
   d6d8a:	e7de      	b.n	d6d4a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6d8c:	9800      	ldr	r0, [sp, #0]
   d6d8e:	f7fe fc11 	bl	d55b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6d92:	4638      	mov	r0, r7
   d6d94:	b015      	add	sp, #84	; 0x54
   d6d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6d9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6d9c:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6d9e:	4a03      	ldr	r2, [pc, #12]	; (d6dac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6da0:	601a      	str	r2, [r3, #0]
   d6da2:	2200      	movs	r2, #0
   d6da4:	605a      	str	r2, [r3, #4]

} // spark
   d6da6:	4770      	bx	lr
   d6da8:	2003e7cc 	.word	0x2003e7cc
   d6dac:	000d7f30 	.word	0x000d7f30

000d6db0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6db0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6db2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6db4:	d902      	bls.n	d6dbc <pinAvailable+0xc>
    return false;
   d6db6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6db8:	b002      	add	sp, #8
   d6dba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6dbc:	f1a0 030b 	sub.w	r3, r0, #11
   d6dc0:	2b02      	cmp	r3, #2
   d6dc2:	d81a      	bhi.n	d6dfa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6dc4:	4c17      	ldr	r4, [pc, #92]	; (d6e24 <pinAvailable+0x74>)
   d6dc6:	7821      	ldrb	r1, [r4, #0]
   d6dc8:	f3bf 8f5b 	dmb	ish
   d6dcc:	f011 0101 	ands.w	r1, r1, #1
   d6dd0:	d10b      	bne.n	d6dea <pinAvailable+0x3a>
   d6dd2:	4620      	mov	r0, r4
   d6dd4:	9101      	str	r1, [sp, #4]
   d6dd6:	f7fd f96d 	bl	d40b4 <__cxa_guard_acquire>
   d6dda:	9901      	ldr	r1, [sp, #4]
   d6ddc:	b128      	cbz	r0, d6dea <pinAvailable+0x3a>
   d6dde:	4812      	ldr	r0, [pc, #72]	; (d6e28 <pinAvailable+0x78>)
   d6de0:	f7fe fee0 	bl	d5ba4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6de4:	4620      	mov	r0, r4
   d6de6:	f7fd f96a 	bl	d40be <__cxa_guard_release>
   d6dea:	4b0f      	ldr	r3, [pc, #60]	; (d6e28 <pinAvailable+0x78>)
   d6dec:	7818      	ldrb	r0, [r3, #0]
   d6dee:	f7fe fd61 	bl	d58b4 <hal_spi_is_enabled>
   d6df2:	2800      	cmp	r0, #0
   d6df4:	d1df      	bne.n	d6db6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6df6:	2001      	movs	r0, #1
   d6df8:	e7de      	b.n	d6db8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6dfa:	2801      	cmp	r0, #1
   d6dfc:	d809      	bhi.n	d6e12 <pinAvailable+0x62>
   d6dfe:	f000 f86b 	bl	d6ed8 <_Z19__fetch_global_Wirev>
   d6e02:	2100      	movs	r1, #0
   d6e04:	7c00      	ldrb	r0, [r0, #16]
   d6e06:	f7fe fcfd 	bl	d5804 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6e0a:	f080 0001 	eor.w	r0, r0, #1
   d6e0e:	b2c0      	uxtb	r0, r0
   d6e10:	e7d2      	b.n	d6db8 <pinAvailable+0x8>
   d6e12:	3809      	subs	r0, #9
   d6e14:	2801      	cmp	r0, #1
   d6e16:	d8ee      	bhi.n	d6df6 <pinAvailable+0x46>
   d6e18:	f7ff fb7c 	bl	d6514 <_Z22__fetch_global_Serial1v>
   d6e1c:	7c00      	ldrb	r0, [r0, #16]
   d6e1e:	f7fe fc99 	bl	d5754 <hal_usart_is_enabled>
   d6e22:	e7f2      	b.n	d6e0a <pinAvailable+0x5a>
   d6e24:	2003e644 	.word	0x2003e644
   d6e28:	2003e648 	.word	0x2003e648

000d6e2c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e2c:	2823      	cmp	r0, #35	; 0x23
{
   d6e2e:	b538      	push	{r3, r4, r5, lr}
   d6e30:	4604      	mov	r4, r0
   d6e32:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e34:	d80a      	bhi.n	d6e4c <pinMode+0x20>
   d6e36:	29ff      	cmp	r1, #255	; 0xff
   d6e38:	d008      	beq.n	d6e4c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6e3a:	f7ff ffb9 	bl	d6db0 <pinAvailable>
   d6e3e:	b128      	cbz	r0, d6e4c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6e40:	4629      	mov	r1, r5
   d6e42:	4620      	mov	r0, r4
}
   d6e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6e48:	f7fe bbc4 	b.w	d55d4 <HAL_Pin_Mode>
}
   d6e4c:	bd38      	pop	{r3, r4, r5, pc}

000d6e4e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6e4e:	b538      	push	{r3, r4, r5, lr}
   d6e50:	4604      	mov	r4, r0
   d6e52:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6e54:	f7fe fbc6 	bl	d55e4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6e58:	28ff      	cmp	r0, #255	; 0xff
   d6e5a:	d010      	beq.n	d6e7e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6e5c:	2806      	cmp	r0, #6
   d6e5e:	d804      	bhi.n	d6e6a <digitalWrite+0x1c>
   d6e60:	234d      	movs	r3, #77	; 0x4d
   d6e62:	fa23 f000 	lsr.w	r0, r3, r0
   d6e66:	07c3      	lsls	r3, r0, #31
   d6e68:	d409      	bmi.n	d6e7e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	f7ff ffa0 	bl	d6db0 <pinAvailable>
   d6e70:	b128      	cbz	r0, d6e7e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6e72:	4629      	mov	r1, r5
   d6e74:	4620      	mov	r0, r4
}
   d6e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6e7a:	f7fe bbbb 	b.w	d55f4 <HAL_GPIO_Write>
}
   d6e7e:	bd38      	pop	{r3, r4, r5, pc}

000d6e80 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6e80:	b510      	push	{r4, lr}
   d6e82:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6e84:	f7fe fbae 	bl	d55e4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6e88:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6e8a:	b2db      	uxtb	r3, r3
   d6e8c:	2b01      	cmp	r3, #1
   d6e8e:	d908      	bls.n	d6ea2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6e90:	4620      	mov	r0, r4
   d6e92:	f7ff ff8d 	bl	d6db0 <pinAvailable>
   d6e96:	b120      	cbz	r0, d6ea2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6e98:	4620      	mov	r0, r4
}
   d6e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6e9e:	f7fe bbb1 	b.w	d5604 <HAL_GPIO_Read>
}
   d6ea2:	2000      	movs	r0, #0
   d6ea4:	bd10      	pop	{r4, pc}
	...

000d6ea8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6ea8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6eaa:	2300      	movs	r3, #0
   d6eac:	2520      	movs	r5, #32
   d6eae:	8043      	strh	r3, [r0, #2]
   d6eb0:	2314      	movs	r3, #20
{
   d6eb2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6eb4:	8003      	strh	r3, [r0, #0]
   d6eb6:	6085      	str	r5, [r0, #8]
   d6eb8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6eba:	4906      	ldr	r1, [pc, #24]	; (d6ed4 <_Z17acquireWireBufferv+0x2c>)
   d6ebc:	4628      	mov	r0, r5
   d6ebe:	f000 f83a 	bl	d6f36 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6ec2:	4904      	ldr	r1, [pc, #16]	; (d6ed4 <_Z17acquireWireBufferv+0x2c>)
	};
   d6ec4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6ec6:	4628      	mov	r0, r5
   d6ec8:	f000 f835 	bl	d6f36 <_ZnajRKSt9nothrow_t>
	};
   d6ecc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6ece:	4620      	mov	r0, r4
   d6ed0:	bd38      	pop	{r3, r4, r5, pc}
   d6ed2:	bf00      	nop
   d6ed4:	000d7f64 	.word	0x000d7f64

000d6ed8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6ed8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6eda:	4d0f      	ldr	r5, [pc, #60]	; (d6f18 <_Z19__fetch_global_Wirev+0x40>)
   d6edc:	7829      	ldrb	r1, [r5, #0]
   d6ede:	f3bf 8f5b 	dmb	ish
   d6ee2:	f011 0401 	ands.w	r4, r1, #1
{
   d6ee6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ee8:	d113      	bne.n	d6f12 <_Z19__fetch_global_Wirev+0x3a>
   d6eea:	4628      	mov	r0, r5
   d6eec:	f7fd f8e2 	bl	d40b4 <__cxa_guard_acquire>
   d6ef0:	b178      	cbz	r0, d6f12 <_Z19__fetch_global_Wirev+0x3a>
   d6ef2:	a801      	add	r0, sp, #4
   d6ef4:	f7ff ffd8 	bl	d6ea8 <_Z17acquireWireBufferv>
   d6ef8:	aa01      	add	r2, sp, #4
   d6efa:	4621      	mov	r1, r4
   d6efc:	4807      	ldr	r0, [pc, #28]	; (d6f1c <_Z19__fetch_global_Wirev+0x44>)
   d6efe:	f7ff fb5f 	bl	d65c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6f02:	4628      	mov	r0, r5
   d6f04:	f7fd f8db 	bl	d40be <__cxa_guard_release>
   d6f08:	4a05      	ldr	r2, [pc, #20]	; (d6f20 <_Z19__fetch_global_Wirev+0x48>)
   d6f0a:	4906      	ldr	r1, [pc, #24]	; (d6f24 <_Z19__fetch_global_Wirev+0x4c>)
   d6f0c:	4803      	ldr	r0, [pc, #12]	; (d6f1c <_Z19__fetch_global_Wirev+0x44>)
   d6f0e:	f000 f80b 	bl	d6f28 <__aeabi_atexit>
	return wire;
}
   d6f12:	4802      	ldr	r0, [pc, #8]	; (d6f1c <_Z19__fetch_global_Wirev+0x44>)
   d6f14:	b007      	add	sp, #28
   d6f16:	bd30      	pop	{r4, r5, pc}
   d6f18:	2003e7d8 	.word	0x2003e7d8
   d6f1c:	2003e7dc 	.word	0x2003e7dc
   d6f20:	2003e56c 	.word	0x2003e56c
   d6f24:	000d6569 	.word	0x000d6569

000d6f28 <__aeabi_atexit>:
   d6f28:	460b      	mov	r3, r1
   d6f2a:	4601      	mov	r1, r0
   d6f2c:	4618      	mov	r0, r3
   d6f2e:	f000 b917 	b.w	d7160 <__cxa_atexit>

000d6f32 <_ZdlPvj>:
   d6f32:	f7fd b8b2 	b.w	d409a <_ZdlPv>

000d6f36 <_ZnajRKSt9nothrow_t>:
   d6f36:	f7fd b8ae 	b.w	d4096 <_Znaj>
	...

000d6f3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6f3c:	4901      	ldr	r1, [pc, #4]	; (d6f44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6f3e:	f000 b8f9 	b.w	d7134 <_ZNKSt9type_infoeqERKS_>
   d6f42:	bf00      	nop
   d6f44:	000d7f80 	.word	0x000d7f80

000d6f48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6f4a:	2400      	movs	r4, #0
   d6f4c:	2310      	movs	r3, #16
   d6f4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6f52:	6803      	ldr	r3, [r0, #0]
   d6f54:	9400      	str	r4, [sp, #0]
   d6f56:	699e      	ldr	r6, [r3, #24]
   d6f58:	f88d 4004 	strb.w	r4, [sp, #4]
   d6f5c:	4615      	mov	r5, r2
   d6f5e:	466b      	mov	r3, sp
   d6f60:	6812      	ldr	r2, [r2, #0]
   d6f62:	47b0      	blx	r6
   d6f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6f68:	f003 0306 	and.w	r3, r3, #6
   d6f6c:	2b06      	cmp	r3, #6
   d6f6e:	bf03      	ittte	eq
   d6f70:	9b00      	ldreq	r3, [sp, #0]
   d6f72:	602b      	streq	r3, [r5, #0]
   d6f74:	2001      	moveq	r0, #1
   d6f76:	4620      	movne	r0, r4
   d6f78:	b004      	add	sp, #16
   d6f7a:	bd70      	pop	{r4, r5, r6, pc}

000d6f7c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6f7c:	9800      	ldr	r0, [sp, #0]
   d6f7e:	4290      	cmp	r0, r2
   d6f80:	bf14      	ite	ne
   d6f82:	2001      	movne	r0, #1
   d6f84:	2006      	moveq	r0, #6
   d6f86:	4770      	bx	lr

000d6f88 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6f88:	b510      	push	{r4, lr}
   d6f8a:	4b03      	ldr	r3, [pc, #12]	; (d6f98 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6f8c:	6003      	str	r3, [r0, #0]
   d6f8e:	4604      	mov	r4, r0
   d6f90:	f000 f8cd 	bl	d712e <_ZNSt9type_infoD1Ev>
   d6f94:	4620      	mov	r0, r4
   d6f96:	bd10      	pop	{r4, pc}
   d6f98:	000d7fc0 	.word	0x000d7fc0

000d6f9c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6f9c:	b510      	push	{r4, lr}
   d6f9e:	4604      	mov	r4, r0
   d6fa0:	f7ff fff2 	bl	d6f88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6fa4:	4620      	mov	r0, r4
   d6fa6:	2108      	movs	r1, #8
   d6fa8:	f7ff ffc3 	bl	d6f32 <_ZdlPvj>
   d6fac:	4620      	mov	r0, r4
   d6fae:	bd10      	pop	{r4, pc}

000d6fb0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6fb4:	461f      	mov	r7, r3
   d6fb6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6fba:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6fbe:	4598      	cmp	r8, r3
   d6fc0:	4606      	mov	r6, r0
   d6fc2:	4615      	mov	r5, r2
   d6fc4:	d107      	bne.n	d6fd6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6fc6:	9907      	ldr	r1, [sp, #28]
   d6fc8:	f000 f8b4 	bl	d7134 <_ZNKSt9type_infoeqERKS_>
   d6fcc:	b118      	cbz	r0, d6fd6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6fce:	7165      	strb	r5, [r4, #5]
   d6fd0:	2000      	movs	r0, #0
   d6fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fd6:	4639      	mov	r1, r7
   d6fd8:	4630      	mov	r0, r6
   d6fda:	f000 f8ab 	bl	d7134 <_ZNKSt9type_infoeqERKS_>
   d6fde:	2800      	cmp	r0, #0
   d6fe0:	d0f6      	beq.n	d6fd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6fe2:	2301      	movs	r3, #1
   d6fe4:	f8c4 8000 	str.w	r8, [r4]
   d6fe8:	7125      	strb	r5, [r4, #4]
   d6fea:	71a3      	strb	r3, [r4, #6]
   d6fec:	e7f0      	b.n	d6fd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6fee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6fee:	b538      	push	{r3, r4, r5, lr}
   d6ff0:	4615      	mov	r5, r2
   d6ff2:	461c      	mov	r4, r3
   d6ff4:	f000 f89e 	bl	d7134 <_ZNKSt9type_infoeqERKS_>
   d6ff8:	b120      	cbz	r0, d7004 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6ffa:	2308      	movs	r3, #8
   d6ffc:	60e3      	str	r3, [r4, #12]
   d6ffe:	2306      	movs	r3, #6
   d7000:	6025      	str	r5, [r4, #0]
   d7002:	7123      	strb	r3, [r4, #4]
   d7004:	bd38      	pop	{r3, r4, r5, pc}

000d7006 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7006:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7008:	4605      	mov	r5, r0
   d700a:	460c      	mov	r4, r1
   d700c:	9201      	str	r2, [sp, #4]
   d700e:	461e      	mov	r6, r3
   d7010:	f000 f890 	bl	d7134 <_ZNKSt9type_infoeqERKS_>
   d7014:	b950      	cbnz	r0, d702c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7016:	2e03      	cmp	r6, #3
   d7018:	d808      	bhi.n	d702c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d701a:	6823      	ldr	r3, [r4, #0]
   d701c:	9a01      	ldr	r2, [sp, #4]
   d701e:	695b      	ldr	r3, [r3, #20]
   d7020:	4629      	mov	r1, r5
   d7022:	4620      	mov	r0, r4
   d7024:	b002      	add	sp, #8
   d7026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d702a:	4718      	bx	r3
   d702c:	b002      	add	sp, #8
   d702e:	bd70      	pop	{r4, r5, r6, pc}

000d7030 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7030:	b510      	push	{r4, lr}
   d7032:	4b03      	ldr	r3, [pc, #12]	; (d7040 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7034:	6003      	str	r3, [r0, #0]
   d7036:	4604      	mov	r4, r0
   d7038:	f7ff ffa6 	bl	d6f88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d703c:	4620      	mov	r0, r4
   d703e:	bd10      	pop	{r4, pc}
   d7040:	000d8020 	.word	0x000d8020

000d7044 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7044:	b510      	push	{r4, lr}
   d7046:	4604      	mov	r4, r0
   d7048:	f7ff fff2 	bl	d7030 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d704c:	4620      	mov	r0, r4
   d704e:	210c      	movs	r1, #12
   d7050:	f7ff ff6f 	bl	d6f32 <_ZdlPvj>
   d7054:	4620      	mov	r0, r4
   d7056:	bd10      	pop	{r4, pc}

000d7058 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d705a:	9f08      	ldr	r7, [sp, #32]
   d705c:	4297      	cmp	r7, r2
   d705e:	4605      	mov	r5, r0
   d7060:	460e      	mov	r6, r1
   d7062:	4614      	mov	r4, r2
   d7064:	d00a      	beq.n	d707c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7066:	68a8      	ldr	r0, [r5, #8]
   d7068:	6802      	ldr	r2, [r0, #0]
   d706a:	9708      	str	r7, [sp, #32]
   d706c:	6a15      	ldr	r5, [r2, #32]
   d706e:	4631      	mov	r1, r6
   d7070:	4622      	mov	r2, r4
   d7072:	46ac      	mov	ip, r5
   d7074:	b003      	add	sp, #12
   d7076:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d707a:	4760      	bx	ip
   d707c:	4619      	mov	r1, r3
   d707e:	9301      	str	r3, [sp, #4]
   d7080:	f000 f858 	bl	d7134 <_ZNKSt9type_infoeqERKS_>
   d7084:	9b01      	ldr	r3, [sp, #4]
   d7086:	2800      	cmp	r0, #0
   d7088:	d0ed      	beq.n	d7066 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d708a:	2006      	movs	r0, #6
   d708c:	b003      	add	sp, #12
   d708e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7090 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7090:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7094:	460d      	mov	r5, r1
   d7096:	4619      	mov	r1, r3
   d7098:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d709c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d70a0:	4681      	mov	r9, r0
   d70a2:	4617      	mov	r7, r2
   d70a4:	4698      	mov	r8, r3
   d70a6:	f000 f845 	bl	d7134 <_ZNKSt9type_infoeqERKS_>
   d70aa:	b190      	cbz	r0, d70d2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d70ac:	2d00      	cmp	r5, #0
   d70ae:	6034      	str	r4, [r6, #0]
   d70b0:	7137      	strb	r7, [r6, #4]
   d70b2:	db09      	blt.n	d70c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d70b4:	1961      	adds	r1, r4, r5
   d70b6:	458a      	cmp	sl, r1
   d70b8:	bf0c      	ite	eq
   d70ba:	2106      	moveq	r1, #6
   d70bc:	2101      	movne	r1, #1
   d70be:	71b1      	strb	r1, [r6, #6]
   d70c0:	2000      	movs	r0, #0
   d70c2:	b001      	add	sp, #4
   d70c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d70c8:	3502      	adds	r5, #2
   d70ca:	d1f9      	bne.n	d70c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d70cc:	2301      	movs	r3, #1
   d70ce:	71b3      	strb	r3, [r6, #6]
   d70d0:	e7f6      	b.n	d70c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d70d2:	4554      	cmp	r4, sl
   d70d4:	d106      	bne.n	d70e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d70d6:	4659      	mov	r1, fp
   d70d8:	4648      	mov	r0, r9
   d70da:	f000 f82b 	bl	d7134 <_ZNKSt9type_infoeqERKS_>
   d70de:	b108      	cbz	r0, d70e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d70e0:	7177      	strb	r7, [r6, #5]
   d70e2:	e7ed      	b.n	d70c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d70e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d70e8:	6803      	ldr	r3, [r0, #0]
   d70ea:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d70ee:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d70f2:	69dc      	ldr	r4, [r3, #28]
   d70f4:	463a      	mov	r2, r7
   d70f6:	4643      	mov	r3, r8
   d70f8:	4629      	mov	r1, r5
   d70fa:	46a4      	mov	ip, r4
   d70fc:	b001      	add	sp, #4
   d70fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7102:	4760      	bx	ip

000d7104 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7108:	4607      	mov	r7, r0
   d710a:	460c      	mov	r4, r1
   d710c:	4615      	mov	r5, r2
   d710e:	461e      	mov	r6, r3
   d7110:	f7ff ff6d 	bl	d6fee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7114:	b948      	cbnz	r0, d712a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7116:	68b8      	ldr	r0, [r7, #8]
   d7118:	6803      	ldr	r3, [r0, #0]
   d711a:	699f      	ldr	r7, [r3, #24]
   d711c:	462a      	mov	r2, r5
   d711e:	4633      	mov	r3, r6
   d7120:	4621      	mov	r1, r4
   d7122:	46bc      	mov	ip, r7
   d7124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7128:	4760      	bx	ip
   d712a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d712e <_ZNSt9type_infoD1Ev>:
   d712e:	4770      	bx	lr

000d7130 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7130:	2000      	movs	r0, #0
   d7132:	4770      	bx	lr

000d7134 <_ZNKSt9type_infoeqERKS_>:
   d7134:	4281      	cmp	r1, r0
   d7136:	b508      	push	{r3, lr}
   d7138:	d00e      	beq.n	d7158 <_ZNKSt9type_infoeqERKS_+0x24>
   d713a:	6840      	ldr	r0, [r0, #4]
   d713c:	7803      	ldrb	r3, [r0, #0]
   d713e:	2b2a      	cmp	r3, #42	; 0x2a
   d7140:	d00c      	beq.n	d715c <_ZNKSt9type_infoeqERKS_+0x28>
   d7142:	6849      	ldr	r1, [r1, #4]
   d7144:	780b      	ldrb	r3, [r1, #0]
   d7146:	2b2a      	cmp	r3, #42	; 0x2a
   d7148:	bf08      	it	eq
   d714a:	3101      	addeq	r1, #1
   d714c:	f000 f850 	bl	d71f0 <strcmp>
   d7150:	fab0 f080 	clz	r0, r0
   d7154:	0940      	lsrs	r0, r0, #5
   d7156:	bd08      	pop	{r3, pc}
   d7158:	2001      	movs	r0, #1
   d715a:	e7fc      	b.n	d7156 <_ZNKSt9type_infoeqERKS_+0x22>
   d715c:	2000      	movs	r0, #0
   d715e:	e7fa      	b.n	d7156 <_ZNKSt9type_infoeqERKS_+0x22>

000d7160 <__cxa_atexit>:
   d7160:	b510      	push	{r4, lr}
   d7162:	4c05      	ldr	r4, [pc, #20]	; (d7178 <__cxa_atexit+0x18>)
   d7164:	4613      	mov	r3, r2
   d7166:	b12c      	cbz	r4, d7174 <__cxa_atexit+0x14>
   d7168:	460a      	mov	r2, r1
   d716a:	4601      	mov	r1, r0
   d716c:	2002      	movs	r0, #2
   d716e:	f3af 8000 	nop.w
   d7172:	bd10      	pop	{r4, pc}
   d7174:	4620      	mov	r0, r4
   d7176:	e7fc      	b.n	d7172 <__cxa_atexit+0x12>
   d7178:	00000000 	.word	0x00000000

000d717c <memcpy>:
   d717c:	440a      	add	r2, r1
   d717e:	4291      	cmp	r1, r2
   d7180:	f100 33ff 	add.w	r3, r0, #4294967295
   d7184:	d100      	bne.n	d7188 <memcpy+0xc>
   d7186:	4770      	bx	lr
   d7188:	b510      	push	{r4, lr}
   d718a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d718e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7192:	4291      	cmp	r1, r2
   d7194:	d1f9      	bne.n	d718a <memcpy+0xe>
   d7196:	bd10      	pop	{r4, pc}

000d7198 <memset>:
   d7198:	4402      	add	r2, r0
   d719a:	4603      	mov	r3, r0
   d719c:	4293      	cmp	r3, r2
   d719e:	d100      	bne.n	d71a2 <memset+0xa>
   d71a0:	4770      	bx	lr
   d71a2:	f803 1b01 	strb.w	r1, [r3], #1
   d71a6:	e7f9      	b.n	d719c <memset+0x4>

000d71a8 <srand>:
   d71a8:	b538      	push	{r3, r4, r5, lr}
   d71aa:	4b0d      	ldr	r3, [pc, #52]	; (d71e0 <srand+0x38>)
   d71ac:	681d      	ldr	r5, [r3, #0]
   d71ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d71b0:	4604      	mov	r4, r0
   d71b2:	b97b      	cbnz	r3, d71d4 <srand+0x2c>
   d71b4:	2018      	movs	r0, #24
   d71b6:	f7fe fc81 	bl	d5abc <malloc>
   d71ba:	4a0a      	ldr	r2, [pc, #40]	; (d71e4 <srand+0x3c>)
   d71bc:	4b0a      	ldr	r3, [pc, #40]	; (d71e8 <srand+0x40>)
   d71be:	63a8      	str	r0, [r5, #56]	; 0x38
   d71c0:	e9c0 2300 	strd	r2, r3, [r0]
   d71c4:	4b09      	ldr	r3, [pc, #36]	; (d71ec <srand+0x44>)
   d71c6:	6083      	str	r3, [r0, #8]
   d71c8:	230b      	movs	r3, #11
   d71ca:	8183      	strh	r3, [r0, #12]
   d71cc:	2201      	movs	r2, #1
   d71ce:	2300      	movs	r3, #0
   d71d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d71d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d71d6:	2200      	movs	r2, #0
   d71d8:	611c      	str	r4, [r3, #16]
   d71da:	615a      	str	r2, [r3, #20]
   d71dc:	bd38      	pop	{r3, r4, r5, pc}
   d71de:	bf00      	nop
   d71e0:	2003e508 	.word	0x2003e508
   d71e4:	abcd330e 	.word	0xabcd330e
   d71e8:	e66d1234 	.word	0xe66d1234
   d71ec:	0005deec 	.word	0x0005deec

000d71f0 <strcmp>:
   d71f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d71f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d71f8:	2a01      	cmp	r2, #1
   d71fa:	bf28      	it	cs
   d71fc:	429a      	cmpcs	r2, r3
   d71fe:	d0f7      	beq.n	d71f0 <strcmp>
   d7200:	1ad0      	subs	r0, r2, r3
   d7202:	4770      	bx	lr

000d7204 <strlen>:
   d7204:	4603      	mov	r3, r0
   d7206:	f813 2b01 	ldrb.w	r2, [r3], #1
   d720a:	2a00      	cmp	r2, #0
   d720c:	d1fb      	bne.n	d7206 <strlen+0x2>
   d720e:	1a18      	subs	r0, r3, r0
   d7210:	3801      	subs	r0, #1
   d7212:	4770      	bx	lr

000d7214 <dynalib_user>:
   d7214:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d7224:	0000 0000 7254 6961 006c 6564 6166 6c75     ....Trail.defaul
   d7234:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d7244:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d7254:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d7264:	7525 2520 2073 4f4d 4544 7525 003e          %u %s MODE%u>.

000d7272 <_ZL4font>:
   d7272:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7282:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7292:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d72a2:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d72b2:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d72c2:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d72d2:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d72e2:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d72f2:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7302:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7312:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7322:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7332:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7342:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7352:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7362:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7372:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7382:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7392:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d73a2:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d73b2:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d73c2:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d73d2:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d73e2:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d73f2:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d7402:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d7412:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7422:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7432:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d7442:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7452:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7462:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7472:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7482:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7492:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d74a2:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d74b2:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d74c2:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d74d2:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d74e2:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d74f2:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7502:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d7512:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7522:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7532:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d7542:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d7552:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d7562:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d7572:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d7582:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7592:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d75a2:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d75b2:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d75c2:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d75d2:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d75e2:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d75f2:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d7602:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d7612:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d7622:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d7632:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d7642:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d7652:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d7662:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d7672:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d7682:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d7692:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d76a2:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d76b2:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d76c2:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d76d2:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d76e2:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d76f2:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d7702:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d7712:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d7722:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d7732:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d7742:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d7752:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d7762:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000d7774 <_ZTV12Adafruit_GFX>:
	...
   d7784:	49f1 000d 5f3d 000d 40a1 000d 43f9 000d     .I..=_...@...C..
   d7794:	43fb 000d 442d 000d 4409 000d 441b 000d     .C..-D...D...D..
   d77a4:	433d 000d 43f9 000d 4625 000d 459f 000d     =C...C..%F...E..
   d77b4:	4445 000d 4483 000d 44bd 000d 4503 000d     ED...D...D...E..
   d77c4:	45a1 000d 451f 000d                         .E...E..

000d77cc <_ZTV16OledWingAdafruit>:
	...
   d77d4:	4b01 000d 4b21 000d 49f1 000d 5f3d 000d     .K..!K...I..=_..
   d77e4:	4ce5 000d 43f9 000d 43fb 000d 442d 000d     .L...C...C..-D..
   d77f4:	4409 000d 441b 000d 433d 000d 43f9 000d     .D...D..=C...C..
   d7804:	4625 000d 4e9f 000d 5433 000d 53e5 000d     %F...N..3T...S..
   d7814:	44bd 000d 4503 000d 45a1 000d 451f 000d     .D...E...E...E..

000d7824 <_ZTVN8particle11SPISettingsE>:
	...
   d782c:	42e9 000d 42bd 000d 42bf 000d               .B...B...B..

000d7838 <_ZL12splash1_data>:
   d7838:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d7848:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d7858:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d7868:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d7878:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d7888:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d78a0:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d78b0:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d78c0:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d78d0:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d78e0:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d78f0:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d7900:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d7910:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d7920:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d7930:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d7940:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d7950:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d7960:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d7970:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d7980:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d7990:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d79a0:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d79b0:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d79c8:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d79e0:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d79f0:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d7a00:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d7a10:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d7a20:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d7a30:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d7a40:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d7a50:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d7a60:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d7a70:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d7a80:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d7a90:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d7aa0:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d7ab0:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d7ac0:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d7ad0:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d7ae0:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d7af0:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d7af8 <_ZL12splash2_data>:
   d7af8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d7b08:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d7b18:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d7b34:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d7b44:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d7b54:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d7b64:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d7b74:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d7b84:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d7b94:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d7ba4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d7bb4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d7bc4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d7bd4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d7be4:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d7bf4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d7c04:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d7c14:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d7c24:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d7c34:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d7c44:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d7c54:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d7c64:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d7c74:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d7c8c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d7c9c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d7cac:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d7cbc:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d7ccc:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d7cd8 <_ZTV16Adafruit_SSD1306>:
	...
   d7ce0:	4cb9 000d 4cd1 000d 49f1 000d 5f3d 000d     .L...L...I..=_..
   d7cf0:	4ce5 000d 43f9 000d 43fb 000d 442d 000d     .L...C...C..-D..
   d7d00:	4409 000d 441b 000d 433d 000d 43f9 000d     .D...D..=C...C..
   d7d10:	4625 000d 4e9f 000d 5433 000d 53e5 000d     %F...N..3T...S..
   d7d20:	44bd 000d 4503 000d 45a1 000d 451f 000d     .D...E...E...E..

000d7d30 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d7d30:	8000 e0c0 f8f0 fefc                         ........

000d7d38 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d7d38:	0100 0703 1f0f 7f3f                         ......?.

000d7d40 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d7d40:	d5ae a880                                   ....

000d7d44 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d7d44:	00d3 8d40                                   ..@.

000d7d48 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d7d48:	0020 c8a1                                    ...

000d7d4c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d7d4c:	40db a6a4 af2e                              .@....

000d7d52 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d7d52:	02da 8f81                                   ....

000d7d56 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d7d56:	12da                                         ...

000d7d59 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d7d59:	02da                                         ...

000d7d5c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d7d5c:	0022 21ff 0000 0000                         "..!....

000d7d64 <_ZTVN5spark13EthernetClassE>:
	...
   d7d6c:	5b7b 000d 5b71 000d 5b67 000d 5b5d 000d     {[..q[..g[..][..
   d7d7c:	5b51 000d 5b45 000d 6c85 000d 6c8d 000d     Q[..E[...l...l..
   d7d8c:	5b39 000d 5b31 000d 5b27 000d 5b1d 000d     9[..1[..'[...[..
   d7d9c:	6cbd 000d                                   .l..

000d7da0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7da0:	0800 1810 2820 3830                         .... (08

000d7da8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d7db0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d7dc0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d7dd0 <_ZTV9IPAddress>:
	...
   d7dd8:	61f9 000d 61e9 000d 61eb 000d               .a...a...a..

000d7de4 <_ZTV9USBSerial>:
	...
   d7dec:	6305 000d 636d 000d 6343 000d 5f3d 000d     .c..mc..Cc..=_..
   d7dfc:	6335 000d 6307 000d 6317 000d 6367 000d     5c...c...c..gc..
   d7e0c:	6327 000d 6301 000d                         'c...c..

000d7e14 <_ZTV11USARTSerial>:
	...
   d7e1c:	646d 000d 64d9 000d 64b1 000d 5f3d 000d     md...d...d..=_..
   d7e2c:	6481 000d 649d 000d 648f 000d 64ab 000d     .d...d...d...d..
   d7e3c:	646f 000d 6473 000d                         od..sd..

000d7e44 <_ZTV7TwoWire>:
	...
   d7e4c:	6569 000d 65b3 000d 658b 000d 656b 000d     ie...e...e..ke..
   d7e5c:	6593 000d 659b 000d 65a3 000d 65ab 000d     .e...e...e...e..
   d7e6c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   d7e7c:	2072 203d 6425 0000                         r = %d..

000d7e84 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7e8c:	6697 000d 66b9 000d 6ad3 000d 66c7 000d     .f...f...j...f..
   d7e9c:	6699 000d                                   .f..

000d7ea0 <_ZTV9TCPClient>:
	...
   d7ea8:	6745 000d 6779 000d 6615 000d 662f 000d     Eg..yg...f../f..
   d7eb8:	6969 000d 67db 000d 67ad 000d 6659 000d     ii...g...g..Yf..
   d7ec8:	6873 000d 6ad9 000d 680f 000d 6a1d 000d     sh...j...h...j..
   d7ed8:	665b 000d 668d 000d 6641 000d 66cb 000d     [f...f..Af...f..
   d7ee8:	678d 000d                                   .g..

000d7eec <_ZTVN5spark9WiFiClassE>:
	...
   d7ef4:	6c27 000d 6c1d 000d 6c13 000d 6bd5 000d     'l...l...l...k..
   d7f04:	6065 000d 6c07 000d 6c85 000d 6c8d 000d     e`...l...l...l..
   d7f14:	6bfb 000d 6bf3 000d 6be9 000d 6bdf 000d     .k...k...k...k..
   d7f24:	6cbd 000d                                   .l..

000d7f28 <_ZTVN5spark12NetworkClassE>:
	...
   d7f30:	6c45 000d 6c4f 000d 6c59 000d 6c63 000d     El..Ol..Yl..cl..
   d7f40:	6c6d 000d 6c79 000d 6c85 000d 6c8d 000d     ml..yl...l...l..
   d7f50:	6c95 000d 6ca1 000d 6ca9 000d 6cb3 000d     .l...l...l...l..
   d7f60:	6cbd 000d                                   .l..

000d7f64 <_ZSt7nothrow>:
	...

000d7f65 <_ZTSSt19_Sp_make_shared_tag>:
   d7f65:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d7f75:	6572 5f64 6174 0067 0000                     red_tag....

000d7f80 <_ZTISt19_Sp_make_shared_tag>:
   d7f80:	7fc0 000d 7f65 000d                         ....e...

000d7f88 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d7f88:	8020 000d 7f94 000d 8044 000d                .......D...

000d7f94 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d7f94:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d7fa4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d7fb4:	0045 0000                                   E...

000d7fb8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d7fb8:	0000 0000 7f88 000d 6f89 000d 6f9d 000d     .........o...o..
   d7fc8:	7131 000d 7131 000d 7007 000d 6f49 000d     1q..1q...p..Io..
   d7fd8:	6fef 000d 6fb1 000d 6f7d 000d               .o...o..}o..

000d7fe4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d7fe4:	8020 000d 7ff0 000d 7f88 000d                ...........

000d7ff0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d7ff0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d8000:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d8010:	666e 456f 0000 0000                         nfoE....

000d8018 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8018:	0000 0000 7fe4 000d 7031 000d 7045 000d     ........1p..Ep..
   d8028:	7131 000d 7131 000d 7007 000d 6f49 000d     1q..1q...p..Io..
   d8038:	7105 000d 7091 000d 7059 000d               .q...p..Yp..

000d8044 <_ZTISt9type_info>:
   d8044:	7fc0 000d 804c 000d                         ....L...

000d804c <_ZTSSt9type_info>:
   d804c:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d8059 <link_const_variable_data_end>:
   d8059:	00          	.byte	0x00
	...

000d805c <link_constructors_location>:
   d805c:	000d4251 	.word	0x000d4251
   d8060:	000d5b85 	.word	0x000d5b85
   d8064:	000d5d15 	.word	0x000d5d15
   d8068:	000d5f15 	.word	0x000d5f15
   d806c:	000d6071 	.word	0x000d6071
   d8070:	000d6081 	.word	0x000d6081
   d8074:	000d60a9 	.word	0x000d60a9
   d8078:	000d6c31 	.word	0x000d6c31
   d807c:	000d6d9d 	.word	0x000d6d9d
